gplink-0.13.3 alpha
Copyright (c) 1998-2005 gputils project
Listing File Generated: 9-15-2006  11:51:33
 
 
Address  Value    Disassembly              Source
-------  -----    -----------              ------
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Aug 16 2006)
                                           ; This file generated Fri Sep 15 11:04:56 2006
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4455
                                           	__config 0x300000, 0xe1
                                           	__config 0x300001, 0x3e
                                           	__config 0x300002, 0xf8
                                           	__config 0x300003, 0xe0
                                           	__config 0x300005, 0xfc
                                           	__config 0x300006, 0x9a
                                           	__config 0x300008, 0xff
                                           	__config 0x300009, 0xff
                                           	__config 0x30000a, 0xfe
                                           	__config 0x30000b, 0x9f
                                           	__config 0x30000c, 0xff
                                           	__config 0x30000d, 0xff
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _stack
                                           	global _stack_end
                                           	global _init_boot
                                           	global _main
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _SPPDATAbits
                                           	extern _SPPCFGbits
                                           	extern _SPPEPSbits
                                           	extern _SPPCONbits
                                           	extern _UFRMLbits
                                           	extern _UFRMHbits
                                           	extern _UIRbits
                                           	extern _UIEbits
                                           	extern _UEIRbits
                                           	extern _UEIEbits
                                           	extern _USTATbits
                                           	extern _UCONbits
                                           	extern _UADDRbits
                                           	extern _UCFGbits
                                           	extern _UEP0bits
                                           	extern _UEP1bits
                                           	extern _UEP2bits
                                           	extern _UEP3bits
                                           	extern _UEP4bits
                                           	extern _UEP5bits
                                           	extern _UEP6bits
                                           	extern _UEP7bits
                                           	extern _UEP8bits
                                           	extern _UEP9bits
                                           	extern _UEP10bits
                                           	extern _UEP11bits
                                           	extern _UEP12bits
                                           	extern _UEP13bits
                                           	extern _UEP14bits
                                           	extern _UEP15bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _ep_bdt
                                           	extern _usb_device_state
                                           	extern _usb_active_cfg
                                           	extern _usb_active_alt_setting
                                           	extern _device_descriptor
                                           	extern _configuration_descriptor
                                           	extern _string_descriptor
                                           	extern _ep_init
                                           	extern _ep_in
                                           	extern _ep_out
                                           	extern _ep_setup
                                           	extern _adc_cfg
                                           	extern _adc_int_nr
                                           	extern _adc_flags
                                           	extern _SPPDATA
                                           	extern _SPPCFG
                                           	extern _SPPEPS
                                           	extern _SPPCON
                                           	extern _UFRML
                                           	extern _UFRMH
                                           	extern _UIR
                                           	extern _UIE
                                           	extern _UEIR
                                           	extern _UEIE
                                           	extern _USTAT
                                           	extern _UCON
                                           	extern _UADDR
                                           	extern _UCFG
                                           	extern _UEP0
                                           	extern _UEP1
                                           	extern _UEP2
                                           	extern _UEP3
                                           	extern _UEP4
                                           	extern _UEP5
                                           	extern _UEP6
                                           	extern _UEP7
                                           	extern _UEP8
                                           	extern _UEP9
                                           	extern _UEP10
                                           	extern _UEP11
                                           	extern _UEP12
                                           	extern _UEP13
                                           	extern _UEP14
                                           	extern _UEP15
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _ECCP1DEL
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _ECCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _init_usb
                                           	extern _dispatch_usb_event
                                           	extern _adc_dispatch
                                           	extern _adc_reset
                                           	extern _boot_device_descriptor
                                           	extern _boot_configuration_descriptor
                                           	extern _boot_string_descriptor
                                           	extern _str0
                                           	extern _str1
                                           	extern _str2
                                           	extern _str3
                                           	extern _boot_ep_init
                                           	extern _boot_ep_in
                                           	extern _boot_ep_out
                                           	extern _boot_ep_setup
                                           	extern _application_data
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           INTCON	equ	0xff2
                                           TOSL	equ	0xffd
                                           TOSH	equ	0xffe
                                           TOSU	equ	0xfff
                                           TBLPTRL	equ	0xff6
                                           TBLPTRH	equ	0xff7
                                           TBLPTRU	equ	0xff8
                                           TABLAT	equ	0xff5
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           
                                           
                                           ustat_boot_main_00	udata	0X0200
                                           _stack	res	254
                                           _stack_end	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; interrupt vector 
                                           ;--------------------------------------------------------
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_boot_main__main	code
                                           _main:
                                           ;	.line	136; boot_main.c	init_boot();
001958   ec19     call	0xe32, 0            	CALL	_init_boot
00195a   f007
                                           ;	.line	138; boot_main.c	init_usb();
00195c   ec76     call	0x1aec, 0           	CALL	_init_usb
00195e   f00d
                                           ;	.line	139; boot_main.c	adc_reset();
001960   ec32     call	0x1c64, 0           	CALL	_adc_reset
001962   f00e
                                           _00120_DS_:
                                           ;	.line	143; boot_main.c	adc_dispatch();
001964   ecb1     call	0x1762, 0           	CALL	_adc_dispatch
001966   f00b
                                           ;	.line	144; boot_main.c	dispatch_usb_event();
001968   ecec     call	0x3d8, 0            	CALL	_dispatch_usb_event
00196a   f001
                                           ;	.line	145; boot_main.c	if((application_data.invalid == 0) &&
00196c   0e30     movlw	0x30               	MOVLW	LOW(_application_data)
00196e   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
001970   0e20     movlw	0x20               	MOVLW	HIGH(_application_data)
001972   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
001974   0e00     movlw	0                  	MOVLW	UPPER(_application_data)
001976   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
001978   0009     tblrd	*+                 	TBLRD*+	
00197a   cff5     movff	0xff5, 0           	MOVFF	TABLAT, r0x00
00197c   f000
00197e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001980   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
001982   efb2     goto	0x1964              	GOTO	_00120_DS_
001984   f00c
                                           ;	.line	146; boot_main.c	(GET_ACTIVE_CONFIGURATION() > FLASH_CONFIGURATION))
001986   0e03     movlw	0x3                	MOVLW	0x03
001988   0100     movlb	0                  	BANKSEL	_usb_active_cfg
00198a   5d9f     subwf	0x9f, 0, 0x1       	SUBWF	_usb_active_cfg, W, B
00198c   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00198e   efb2     goto	0x1964              	GOTO	_00120_DS_
001990   f00c
                                           ;	.line	148; boot_main.c	application_data.main();
001992   0e46     movlw	0x46               	MOVLW	LOW(_application_data + 22)
001994   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
001996   0e20     movlw	0x20               	MOVLW	HIGH(_application_data + 22)
001998   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
00199a   0e00     movlw	0                  	MOVLW	UPPER(_application_data + 22)
00199c   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
00199e   0009     tblrd	*+                 	TBLRD*+	
0019a0   cff5     movff	0xff5, 0           	MOVFF	TABLAT, r0x00
0019a2   f000
0019a4   0009     tblrd	*+                 	TBLRD*+	
0019a6   cff5     movff	0xff5, 0x1         	MOVFF	TABLAT, r0x01
0019a8   f001
0019aa   0009     tblrd	*+                 	TBLRD*+	
0019ac   cff5     movff	0xff5, 0x2         	MOVFF	TABLAT, r0x02
0019ae   f002
0019b0   cff2     movff	0xff2, 0xfe5       	MOVFF	INTCON, POSTDEC1
0019b2   ffe5
0019b4   9ef2     bcf	0xf2, 0x7, 0         	BCF	INTCON, 7
0019b6   0005     push                     	PUSH	
0019b8   0ed4     movlw	0xd4               	MOVLW	LOW(_00128_DS_)
0019ba   6efd     movwf	0xfd, 0            	MOVWF	TOSL
0019bc   0e19     movlw	0x19               	MOVLW	HIGH(_00128_DS_)
0019be   6efe     movwf	0xfe, 0            	MOVWF	TOSH
0019c0   0e00     movlw	0                  	MOVLW	UPPER(_00128_DS_)
0019c2   6eff     movwf	0xff, 0            	MOVWF	TOSU
0019c4   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
0019c6   6ef2     movwf	0xf2, 0            	MOVWF	INTCON
0019c8   c002     movff	0x2, 0xffb         	MOVFF	r0x02, PCLATU
0019ca   fffb
0019cc   c001     movff	0x1, 0xffa         	MOVFF	r0x01, PCLATH
0019ce   fffa
0019d0   5000     movf	0, 0, 0             	MOVF	r0x00, W
0019d2   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00128_DS_:
                                           ;	.line	149; boot_main.c	INTCON = 0; // Forbid interrupts
0019d4   6af2     clrf	0xf2, 0             	CLRF	_INTCON
0019d6   efb2     goto	0x1964              	GOTO	_00120_DS_
0019d8   f00c
0019da   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_boot_main__init_boot	code
                                           _init_boot:
                                           ;	.line	90; boot_main.c	void init_boot(void)
000e32   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000e34   ffe5
000e36   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000e38   ffd9
000e3a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000e3c   ffe5
000e3e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000e40   ffe5
000e42   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000e44   ffe5
000e46   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000e48   ffe5
                                           ;	.line	94; boot_main.c	ADCON1 = 0x0F;
000e4a   0e0f     movlw	0xf                	MOVLW	0x0f
000e4c   6ec1     movwf	0xc1, 0            	MOVWF	_ADCON1
                                           ;	.line	95; boot_main.c	CMCON  = 0x07;
000e4e   0e07     movlw	0x7                	MOVLW	0x07
000e50   6eb4     movwf	0xb4, 0            	MOVWF	_CMCON
                                           ;	.line	96; boot_main.c	TRISA  = 0xFE;
000e52   0efe     movlw	0xfe               	MOVLW	0xfe
000e54   6e92     movwf	0x92, 0            	MOVWF	_TRISA
                                           ;	.line	97; boot_main.c	PORTA  = 0x01;
000e56   0e01     movlw	0x1                	MOVLW	0x01
000e58   6e80     movwf	0x80, 0            	MOVWF	_PORTA
                                           ;	.line	100; boot_main.c	while(count)
000e5a   6a00     clrf	0, 0                	CLRF	r0x00
000e5c   6a01     clrf	0x1, 0              	CLRF	r0x01
000e5e   0e08     movlw	0x8                	MOVLW	0x08
000e60   6e02     movwf	0x2, 0             	MOVWF	r0x02
000e62   6a03     clrf	0x3, 0              	CLRF	r0x03
                                           _00105_DS_:
000e64   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e66   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
000e68   1002     iorwf	0x2, 0, 0          	IORWF	r0x02, W
000e6a   1003     iorwf	0x3, 0, 0          	IORWF	r0x03, W
000e6c   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000e6e   ef43     goto	0xe86               	GOTO	_00107_DS_
000e70   f007
                                           ;	.line	102; boot_main.c	count--;
000e72   0eff     movlw	0xff               	MOVLW	0xff
000e74   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000e76   0eff     movlw	0xff               	MOVLW	0xff
000e78   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000e7a   0eff     movlw	0xff               	MOVLW	0xff
000e7c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000e7e   0eff     movlw	0xff               	MOVLW	0xff
000e80   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000e82   ef32     goto	0xe64               	GOTO	_00105_DS_
000e84   f007
                                           _00107_DS_:
                                           ;	.line	105; boot_main.c	PORTA  = 0x00;
000e86   6a80     clrf	0x80, 0             	CLRF	_PORTA
                                           ;	.line	108; boot_main.c	if(application_data.invalid == 0) 
000e88   0e30     movlw	0x30               	MOVLW	LOW(_application_data)
000e8a   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
000e8c   0e20     movlw	0x20               	MOVLW	HIGH(_application_data)
000e8e   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
000e90   0e00     movlw	0                  	MOVLW	UPPER(_application_data)
000e92   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
000e94   0009     tblrd	*+                 	TBLRD*+	
000e96   cff5     movff	0xff5, 0           	MOVFF	TABLAT, r0x00
000e98   f000
000e9a   5000     movf	0, 0, 0             	MOVF	r0x00, W
000e9c   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
000e9e   efbc     goto	0xf78               	GOTO	_00109_DS_
000ea0   f007
                                           ;	.line	111; boot_main.c	device_descriptor        = application_data.device_descriptor;
000ea2   0e31     movlw	0x31               	MOVLW	LOW(_application_data + 1)
000ea4   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
000ea6   0e20     movlw	0x20               	MOVLW	HIGH(_application_data + 1)
000ea8   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
000eaa   0e00     movlw	0                  	MOVLW	UPPER(_application_data + 1)
000eac   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
000eae   0009     tblrd	*+                 	TBLRD*+	
000eb0   cff5     movff	0xff5, 0x72        	MOVFF	TABLAT, _device_descriptor
000eb2   f072
000eb4   0009     tblrd	*+                 	TBLRD*+	
000eb6   cff5     movff	0xff5, 0x73        	MOVFF	TABLAT, (_device_descriptor + 1)
000eb8   f073
000eba   0009     tblrd	*+                 	TBLRD*+	
000ebc   cff5     movff	0xff5, 0x74        	MOVFF	TABLAT, (_device_descriptor + 2)
000ebe   f074
                                           ;	.line	112; boot_main.c	configuration_descriptor = application_data.configuration_descriptor;
000ec0   0e34     movlw	0x34               	MOVLW	LOW(_application_data + 4)
000ec2   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
000ec4   0e20     movlw	0x20               	MOVLW	HIGH(_application_data + 4)
000ec6   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
000ec8   0e00     movlw	0                  	MOVLW	UPPER(_application_data + 4)
000eca   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
000ecc   0009     tblrd	*+                 	TBLRD*+	
000ece   cff5     movff	0xff5, 0x75        	MOVFF	TABLAT, _configuration_descriptor
000ed0   f075
000ed2   0009     tblrd	*+                 	TBLRD*+	
000ed4   cff5     movff	0xff5, 0x76        	MOVFF	TABLAT, (_configuration_descriptor + 1)
000ed6   f076
000ed8   0009     tblrd	*+                 	TBLRD*+	
000eda   cff5     movff	0xff5, 0x77        	MOVFF	TABLAT, (_configuration_descriptor + 2)
000edc   f077
                                           ;	.line	113; boot_main.c	string_descriptor        = application_data.string_descriptor;
000ede   0e37     movlw	0x37               	MOVLW	LOW(_application_data + 7)
000ee0   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
000ee2   0e20     movlw	0x20               	MOVLW	HIGH(_application_data + 7)
000ee4   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
000ee6   0e00     movlw	0                  	MOVLW	UPPER(_application_data + 7)
000ee8   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
000eea   0009     tblrd	*+                 	TBLRD*+	
000eec   cff5     movff	0xff5, 0x78        	MOVFF	TABLAT, _string_descriptor
000eee   f078
000ef0   0009     tblrd	*+                 	TBLRD*+	
000ef2   cff5     movff	0xff5, 0x79        	MOVFF	TABLAT, (_string_descriptor + 1)
000ef4   f079
000ef6   0009     tblrd	*+                 	TBLRD*+	
000ef8   cff5     movff	0xff5, 0x7a        	MOVFF	TABLAT, (_string_descriptor + 2)
000efa   f07a
                                           ;	.line	114; boot_main.c	ep_init                  = application_data.ep_init;
000efc   0e3a     movlw	0x3a               	MOVLW	LOW(_application_data + 10)
000efe   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
000f00   0e20     movlw	0x20               	MOVLW	HIGH(_application_data + 10)
000f02   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
000f04   0e00     movlw	0                  	MOVLW	UPPER(_application_data + 10)
000f06   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
000f08   0009     tblrd	*+                 	TBLRD*+	
000f0a   cff5     movff	0xff5, 0x7b        	MOVFF	TABLAT, _ep_init
000f0c   f07b
000f0e   0009     tblrd	*+                 	TBLRD*+	
000f10   cff5     movff	0xff5, 0x7c        	MOVFF	TABLAT, (_ep_init + 1)
000f12   f07c
000f14   0009     tblrd	*+                 	TBLRD*+	
000f16   cff5     movff	0xff5, 0x7d        	MOVFF	TABLAT, (_ep_init + 2)
000f18   f07d
                                           ;	.line	115; boot_main.c	ep_in                    = application_data.ep_in;
000f1a   0e3d     movlw	0x3d               	MOVLW	LOW(_application_data + 13)
000f1c   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
000f1e   0e20     movlw	0x20               	MOVLW	HIGH(_application_data + 13)
000f20   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
000f22   0e00     movlw	0                  	MOVLW	UPPER(_application_data + 13)
000f24   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
000f26   0009     tblrd	*+                 	TBLRD*+	
000f28   cff5     movff	0xff5, 0x84        	MOVFF	TABLAT, _ep_in
000f2a   f084
000f2c   0009     tblrd	*+                 	TBLRD*+	
000f2e   cff5     movff	0xff5, 0x85        	MOVFF	TABLAT, (_ep_in + 1)
000f30   f085
000f32   0009     tblrd	*+                 	TBLRD*+	
000f34   cff5     movff	0xff5, 0x86        	MOVFF	TABLAT, (_ep_in + 2)
000f36   f086
                                           ;	.line	116; boot_main.c	ep_out                   = application_data.ep_out;
000f38   0e40     movlw	0x40               	MOVLW	LOW(_application_data + 16)
000f3a   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
000f3c   0e20     movlw	0x20               	MOVLW	HIGH(_application_data + 16)
000f3e   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
000f40   0e00     movlw	0                  	MOVLW	UPPER(_application_data + 16)
000f42   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
000f44   0009     tblrd	*+                 	TBLRD*+	
000f46   cff5     movff	0xff5, 0x81        	MOVFF	TABLAT, _ep_out
000f48   f081
000f4a   0009     tblrd	*+                 	TBLRD*+	
000f4c   cff5     movff	0xff5, 0x82        	MOVFF	TABLAT, (_ep_out + 1)
000f4e   f082
000f50   0009     tblrd	*+                 	TBLRD*+	
000f52   cff5     movff	0xff5, 0x83        	MOVFF	TABLAT, (_ep_out + 2)
000f54   f083
                                           ;	.line	117; boot_main.c	ep_setup                 = application_data.ep_setup;
000f56   0e43     movlw	0x43               	MOVLW	LOW(_application_data + 19)
000f58   6ef6     movwf	0xf6, 0            	MOVWF	TBLPTRL
000f5a   0e20     movlw	0x20               	MOVLW	HIGH(_application_data + 19)
000f5c   6ef7     movwf	0xf7, 0            	MOVWF	TBLPTRH
000f5e   0e00     movlw	0                  	MOVLW	UPPER(_application_data + 19)
000f60   6ef8     movwf	0xf8, 0            	MOVWF	TBLPTRU
000f62   0009     tblrd	*+                 	TBLRD*+	
000f64   cff5     movff	0xff5, 0x7e        	MOVFF	TABLAT, _ep_setup
000f66   f07e
000f68   0009     tblrd	*+                 	TBLRD*+	
000f6a   cff5     movff	0xff5, 0x7f        	MOVFF	TABLAT, (_ep_setup + 1)
000f6c   f07f
000f6e   0009     tblrd	*+                 	TBLRD*+	
000f70   cff5     movff	0xff5, 0x80        	MOVFF	TABLAT, (_ep_setup + 2)
000f72   f080
000f74   effb     goto	0xff6               	GOTO	_00111_DS_
000f76   f007
                                           _00109_DS_:
                                           ;	.line	122; boot_main.c	device_descriptor        = &boot_device_descriptor;
000f78   0e6c     movlw	0x6c               	MOVLW	LOW(_boot_device_descriptor)
000f7a   0100     movlb	0                  	BANKSEL	_device_descriptor
000f7c   6f72     movwf	0x72, 0x1          	MOVWF	_device_descriptor, B
000f7e   0e07     movlw	0x7                	MOVLW	HIGH(_boot_device_descriptor)
000f80   0100     movlb	0                  	BANKSEL	(_device_descriptor + 1)
000f82   6f73     movwf	0x73, 0x1          	MOVWF	(_device_descriptor + 1), B
000f84   0e00     movlw	0                  	MOVLW	UPPER(_boot_device_descriptor)
000f86   0100     movlb	0                  	BANKSEL	(_device_descriptor + 2)
000f88   6f74     movwf	0x74, 0x1          	MOVWF	(_device_descriptor + 2), B
                                           ;	.line	123; boot_main.c	configuration_descriptor = boot_configuration_descriptor;
000f8a   0eb0     movlw	0xb0               	MOVLW	LOW(_boot_configuration_descriptor)
000f8c   0100     movlb	0                  	BANKSEL	_configuration_descriptor
000f8e   6f75     movwf	0x75, 0x1          	MOVWF	_configuration_descriptor, B
000f90   0e07     movlw	0x7                	MOVLW	HIGH(_boot_configuration_descriptor)
000f92   0100     movlb	0                  	BANKSEL	(_configuration_descriptor + 1)
000f94   6f76     movwf	0x76, 0x1          	MOVWF	(_configuration_descriptor + 1), B
000f96   0e00     movlw	0                  	MOVLW	UPPER(_boot_configuration_descriptor)
000f98   0100     movlb	0                  	BANKSEL	(_configuration_descriptor + 2)
000f9a   6f77     movwf	0x77, 0x1          	MOVWF	(_configuration_descriptor + 2), B
                                           ;	.line	124; boot_main.c	string_descriptor        = boot_string_descriptor;
000f9c   0e1a     movlw	0x1a               	MOVLW	LOW(_boot_string_descriptor)
000f9e   0100     movlb	0                  	BANKSEL	_string_descriptor
000fa0   6f78     movwf	0x78, 0x1          	MOVWF	_string_descriptor, B
000fa2   0e08     movlw	0x8                	MOVLW	HIGH(_boot_string_descriptor)
000fa4   0100     movlb	0                  	BANKSEL	(_string_descriptor + 1)
000fa6   6f79     movwf	0x79, 0x1          	MOVWF	(_string_descriptor + 1), B
000fa8   0e00     movlw	0                  	MOVLW	UPPER(_boot_string_descriptor)
000faa   0100     movlb	0                  	BANKSEL	(_string_descriptor + 2)
000fac   6f7a     movwf	0x7a, 0x1          	MOVWF	(_string_descriptor + 2), B
                                           ;	.line	125; boot_main.c	ep_init                  = boot_ep_init;
000fae   0e8c     movlw	0x8c               	MOVLW	LOW(_boot_ep_init)
000fb0   0100     movlb	0                  	BANKSEL	_ep_init
000fb2   6f7b     movwf	0x7b, 0x1          	MOVWF	_ep_init, B
000fb4   0e08     movlw	0x8                	MOVLW	HIGH(_boot_ep_init)
000fb6   0100     movlb	0                  	BANKSEL	(_ep_init + 1)
000fb8   6f7c     movwf	0x7c, 0x1          	MOVWF	(_ep_init + 1), B
000fba   0e00     movlw	0                  	MOVLW	UPPER(_boot_ep_init)
000fbc   0100     movlb	0                  	BANKSEL	(_ep_init + 2)
000fbe   6f7d     movwf	0x7d, 0x1          	MOVWF	(_ep_init + 2), B
                                           ;	.line	126; boot_main.c	ep_in                    = &boot_ep_in;
000fc0   0ef6     movlw	0xf6               	MOVLW	LOW(_boot_ep_in)
000fc2   0100     movlb	0                  	BANKSEL	_ep_in
000fc4   6f84     movwf	0x84, 0x1          	MOVWF	_ep_in, B
000fc6   0e08     movlw	0x8                	MOVLW	HIGH(_boot_ep_in)
000fc8   0100     movlb	0                  	BANKSEL	(_ep_in + 1)
000fca   6f85     movwf	0x85, 0x1          	MOVWF	(_ep_in + 1), B
000fcc   0e00     movlw	0                  	MOVLW	UPPER(_boot_ep_in)
000fce   0100     movlb	0                  	BANKSEL	(_ep_in + 2)
000fd0   6f86     movwf	0x86, 0x1          	MOVWF	(_ep_in + 2), B
                                           ;	.line	127; boot_main.c	ep_out                   = &boot_ep_out;
000fd2   0e60     movlw	0x60               	MOVLW	LOW(_boot_ep_out)
000fd4   0100     movlb	0                  	BANKSEL	_ep_out
000fd6   6f81     movwf	0x81, 0x1          	MOVWF	_ep_out, B
000fd8   0e09     movlw	0x9                	MOVLW	HIGH(_boot_ep_out)
000fda   0100     movlb	0                  	BANKSEL	(_ep_out + 1)
000fdc   6f82     movwf	0x82, 0x1          	MOVWF	(_ep_out + 1), B
000fde   0e00     movlw	0                  	MOVLW	UPPER(_boot_ep_out)
000fe0   0100     movlb	0                  	BANKSEL	(_ep_out + 2)
000fe2   6f83     movwf	0x83, 0x1          	MOVWF	(_ep_out + 2), B
                                           ;	.line	128; boot_main.c	ep_setup                 = &boot_ep_setup;
000fe4   0e9a     movlw	0x9a               	MOVLW	LOW(_boot_ep_setup)
000fe6   0100     movlb	0                  	BANKSEL	_ep_setup
000fe8   6f7e     movwf	0x7e, 0x1          	MOVWF	_ep_setup, B
000fea   0e09     movlw	0x9                	MOVLW	HIGH(_boot_ep_setup)
000fec   0100     movlb	0                  	BANKSEL	(_ep_setup + 1)
000fee   6f7f     movwf	0x7f, 0x1          	MOVWF	(_ep_setup + 1), B
000ff0   0e00     movlw	0                  	MOVLW	UPPER(_boot_ep_setup)
000ff2   0100     movlb	0                  	BANKSEL	(_ep_setup + 2)
000ff4   6f80     movwf	0x80, 0x1          	MOVWF	(_ep_setup + 2), B
                                           _00111_DS_:
000ff6   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000ff8   f003
000ffa   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000ffc   f002
000ffe   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001000   f001
001002   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001004   f000
001006   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001008   ffd9
00100a   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  606 (0x025e) bytes ( 0.46%)
                                           ;           	  303 (0x012f) words
                                           ; udata size:	  255 (0x00ff) bytes (14.23%)
                                           ; access size:	    4 (0x0004) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Aug 16 2006)
                                           ; This file generated Fri Sep 15 11:51:33 2006
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4455
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _adc_init
                                           	global _adc_reset
                                           	global _adc_start
                                           	global _adc_stop
                                           	global _adc_dispatch
                                           	global _adc_flags
                                           	global _adc_cfg
                                           	global _adc_int_nr
                                           	global _adc_interrupt
                                           	global _err_ovr
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __divuchar
                                           	extern _ep_bdt
                                           	extern _usb_device_state
                                           	extern _usb_active_cfg
                                           	extern _usb_active_alt_setting
                                           	extern _device_descriptor
                                           	extern _configuration_descriptor
                                           	extern _string_descriptor
                                           	extern _ep_init
                                           	extern _ep_in
                                           	extern _ep_out
                                           	extern _ep_setup
                                           	extern _ep2_num_bytes_to_send
                                           	extern _ep2_source_data
                                           	extern _SPPDATAbits
                                           	extern _SPPCFGbits
                                           	extern _SPPEPSbits
                                           	extern _SPPCONbits
                                           	extern _UFRMLbits
                                           	extern _UFRMHbits
                                           	extern _UIRbits
                                           	extern _UIEbits
                                           	extern _UEIRbits
                                           	extern _UEIEbits
                                           	extern _USTATbits
                                           	extern _UCONbits
                                           	extern _UADDRbits
                                           	extern _UCFGbits
                                           	extern _UEP0bits
                                           	extern _UEP1bits
                                           	extern _UEP2bits
                                           	extern _UEP3bits
                                           	extern _UEP4bits
                                           	extern _UEP5bits
                                           	extern _UEP6bits
                                           	extern _UEP7bits
                                           	extern _UEP8bits
                                           	extern _UEP9bits
                                           	extern _UEP10bits
                                           	extern _UEP11bits
                                           	extern _UEP12bits
                                           	extern _UEP13bits
                                           	extern _UEP14bits
                                           	extern _UEP15bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _SPPDATA
                                           	extern _SPPCFG
                                           	extern _SPPEPS
                                           	extern _SPPCON
                                           	extern _UFRML
                                           	extern _UFRMH
                                           	extern _UIR
                                           	extern _UIE
                                           	extern _UEIR
                                           	extern _UEIE
                                           	extern _USTAT
                                           	extern _UCON
                                           	extern _UADDR
                                           	extern _UCFG
                                           	extern _UEP0
                                           	extern _UEP1
                                           	extern _UEP2
                                           	extern _UEP3
                                           	extern _UEP4
                                           	extern _UEP5
                                           	extern _UEP6
                                           	extern _UEP7
                                           	extern _UEP8
                                           	extern _UEP9
                                           	extern _UEP10
                                           	extern _UEP11
                                           	extern _UEP12
                                           	extern _UEP13
                                           	extern _UEP14
                                           	extern _UEP15
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _ECCP1DEL
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _ECCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _prepare_ep2_in
                                           	extern _boot_device_descriptor
                                           	extern _boot_configuration_descriptor
                                           	extern _boot_string_descriptor
                                           	extern _str0
                                           	extern _str1
                                           	extern _str2
                                           	extern _str3
                                           	extern _boot_ep_init
                                           	extern _boot_ep_in
                                           	extern _boot_ep_out
                                           	extern _boot_ep_setup
                                           	extern _section_descriptor
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           BSR	equ	0xfe0
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           	idata
                                           _adc_data_len	db	0x00
                                           _adc_rec_nr	db	0x00
                                           _adc_flags	db	0x00
                                           _adc_buf_ptr	db	0x00
                                           _adc_int_nr	db	0x64, 0x00
                                           _adc_one_buf_size	db	0x00
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           
                                           udata_adc_0	udata
                                           _adc_nbufs	res	1
                                           
                                           udata_adc_1	udata
                                           _adc_in	res	1
                                           
                                           udata_adc_2	udata
                                           _adc_out	res	1
                                           
                                           udata_adc_3	udata
                                           _adc_nchans	res	1
                                           
                                           udata_adc_4	udata
                                           _adc_nchan	res	1
                                           
                                           udata_adc_5	udata
                                           _adc_interrupt_tmp_1_1	res	1
                                           
                                           udata_adc_6	udata
                                           _adc_cfg	res	11
                                           
                                           udata_adc_7	udata
                                           _adc_buf	res	255
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute section
                                           ; ;-----------------------------------------
                                           S_adc_ivec_0x1_adc_interrupt	code	0X000008
                                           ivec_0x1_adc_interrupt:
000008   efbc     goto	0x1178              	GOTO	_adc_interrupt
00000a   f008
                                           
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_adc__adc_dispatch	code
                                           _adc_dispatch:
                                           ;	.line	133; adc.c	void adc_dispatch(void)
001762   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001764   ffe5
001766   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001768   ffd9
00176a   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00176c   ffe5
00176e   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001770   ffe5
001772   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 20)
                                           ;	.line	138; adc.c	if( !(EP_IN_BD(2).Stat.uc & BDS_USIE)) {
001774   bf14     btfsc	0x14, 0x7, 0x1     	BTFSC	(_ep_bdt + 20), 7
001776   ef01     goto	0x1802              	GOTO	_00163_DS_
001778   f00c
00177a   0100     movlb	0                  	BANKSEL	_adc_flags
                                           ;	.line	140; adc.c	if(adc_flags.adc_overrun) {
00177c   a36d     btfss	0x6d, 0x1, 0x1     	BTFSS	_adc_flags, 1, B
00177e   efd5     goto	0x17aa              	GOTO	_00159_DS_
001780   f00b
                                           ;	.line	141; adc.c	ep2_num_bytes_to_send = sizeof(err_ovr);
001782   0e0a     movlw	0xa                	MOVLW	0x0a
001784   0100     movlb	0                  	BANKSEL	_ep2_num_bytes_to_send
001786   6f8f     movwf	0x8f, 0x1          	MOVWF	_ep2_num_bytes_to_send, B
001788   0100     movlb	0                  	BANKSEL	(_ep2_num_bytes_to_send + 1)
00178a   6b90     clrf	0x90, 0x1           	CLRF	(_ep2_num_bytes_to_send + 1), B
                                           ;	.line	142; adc.c	ep2_source_data = err_ovr;
00178c   0e62     movlw	0x62               	MOVLW	LOW(_err_ovr)
00178e   0100     movlb	0                  	BANKSEL	_ep2_source_data
001790   6f8a     movwf	0x8a, 0x1          	MOVWF	_ep2_source_data, B
001792   0e07     movlw	0x7                	MOVLW	HIGH(_err_ovr)
001794   0100     movlb	0                  	BANKSEL	(_ep2_source_data + 1)
001796   6f8b     movwf	0x8b, 0x1          	MOVWF	(_ep2_source_data + 1), B
001798   0e00     movlw	0                  	MOVLW	UPPER(_err_ovr)
00179a   0100     movlb	0                  	BANKSEL	(_ep2_source_data + 2)
00179c   6f8c     movwf	0x8c, 0x1          	MOVWF	(_ep2_source_data + 2), B
                                           ;	.line	143; adc.c	prepare_ep2_in();
00179e   ec4c     call	0x1698, 0           	CALL	_prepare_ep2_in
0017a0   f00b
0017a2   0100     movlb	0                  	BANKSEL	_adc_flags
                                           ;	.line	144; adc.c	adc_flags.adc_overrun=0;
0017a4   936d     bcf	0x6d, 0x1, 0x1       	BCF	_adc_flags, 1, B
0017a6   ef01     goto	0x1802              	GOTO	_00163_DS_
0017a8   f00c
                                           _00159_DS_:
0017aa   0100     movlb	0                  	BANKSEL	_adc_in
                                           ;	.line	147; adc.c	if(adc_in != adc_out) {
0017ac   5198     movf	0x98, 0, 0x1        	MOVF	_adc_in, W, B
0017ae   0100     movlb	0                  	BANKSEL	_adc_out
0017b0   1999     xorwf	0x99, 0, 0x1       	XORWF	_adc_out, W, B
0017b2   e102     bnz	0x17b8               	BNZ	_00170_DS_
0017b4   ef01     goto	0x1802              	GOTO	_00163_DS_
0017b6   f00c
                                           _00170_DS_:
                                           ;	.line	148; adc.c	ep2_num_bytes_to_send = adc_one_buf_size;
0017b8   c071     movff	0x71, 0x8f         	MOVFF	_adc_one_buf_size, _ep2_num_bytes_to_send
0017ba   f08f
0017bc   0100     movlb	0                  	BANKSEL	(_ep2_num_bytes_to_send + 1)
0017be   6b90     clrf	0x90, 0x1           	CLRF	(_ep2_num_bytes_to_send + 1), B
                                           ; ;multiply variable :_adc_out by variable _adc_one_buf_size and store in r0x00
0017c0   0100     movlb	0                  	BANKSEL	_adc_one_buf_size
                                           ;	.line	149; adc.c	ep2_source_data = &(adc_buf[adc_one_buf_size*adc_out]);
0017c2   5171     movf	0x71, 0, 0x1        	MOVF	_adc_one_buf_size, W, B
0017c4   0100     movlb	0                  	BANKSEL	_adc_out
0017c6   0399     mulwf	0x99, 0x1          	MULWF	_adc_out, B
0017c8   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
0017ca   f000
0017cc   0e00     movlw	0                  	MOVLW	LOW(_adc_buf)
0017ce   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0017d0   0e01     movlw	0x1                	MOVLW	HIGH(_adc_buf)
0017d2   6a01     clrf	0x1, 0              	CLRF	r0x01
0017d4   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0017d6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0017d8   0100     movlb	0                  	BANKSEL	(_ep2_source_data + 1)
0017da   6f8b     movwf	0x8b, 0x1          	MOVWF	(_ep2_source_data + 1), B
0017dc   5000     movf	0, 0, 0             	MOVF	r0x00, W
0017de   0100     movlb	0                  	BANKSEL	_ep2_source_data
0017e0   6f8a     movwf	0x8a, 0x1          	MOVWF	_ep2_source_data, B
0017e2   0e80     movlw	0x80               	MOVLW	0x80
0017e4   0100     movlb	0                  	BANKSEL	(_ep2_source_data + 2)
0017e6   6f8c     movwf	0x8c, 0x1          	MOVWF	(_ep2_source_data + 2), B
                                           ;	.line	150; adc.c	prepare_ep2_in();
0017e8   ec4c     call	0x1698, 0           	CALL	_prepare_ep2_in
0017ea   f00b
0017ec   0100     movlb	0                  	BANKSEL	_adc_out
                                           ;	.line	151; adc.c	adc_out++;
0017ee   2b99     incf	0x99, 0x1, 0x1      	INCF	_adc_out, F, B
0017f0   0100     movlb	0                  	BANKSEL	_adc_nbufs
                                           ;	.line	152; adc.c	if(adc_out>=adc_nbufs) adc_out=0;
0017f2   5197     movf	0x97, 0, 0x1        	MOVF	_adc_nbufs, W, B
0017f4   0100     movlb	0                  	BANKSEL	_adc_out
0017f6   5d99     subwf	0x99, 0, 0x1       	SUBWF	_adc_out, W, B
0017f8   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0017fa   ef01     goto	0x1802              	GOTO	_00163_DS_
0017fc   f00c
0017fe   0100     movlb	0                  	BANKSEL	_adc_out
001800   6b99     clrf	0x99, 0x1           	CLRF	_adc_out, B
                                           _00163_DS_:
001802   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001804   f001
001806   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001808   f000
00180a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00180c   ffd9
00180e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_adc__adc_interrupt	code
                                           _adc_interrupt:
                                           ;	.line	98; adc.c	void adc_interrupt(void) interrupt 1
001178   cfe8     movff	0xfe8, 0xfe5       	MOVFF	WREG, POSTDEC1
00117a   ffe5
00117c   cfd8     movff	0xfd8, 0xfe5       	MOVFF	STATUS, POSTDEC1
00117e   ffe5
001180   cfe0     movff	0xfe0, 0xfe5       	MOVFF	BSR, POSTDEC1
001182   ffe5
001184   cff3     movff	0xff3, 0xfe5       	MOVFF	PRODL, POSTDEC1
001186   ffe5
001188   cff4     movff	0xff4, 0xfe5       	MOVFF	PRODH, POSTDEC1
00118a   ffe5
00118c   cfe9     movff	0xfe9, 0xfe5       	MOVFF	FSR0L, POSTDEC1
00118e   ffe5
001190   cfea     movff	0xfea, 0xfe5       	MOVFF	FSR0H, POSTDEC1
001192   ffe5
001194   cffa     movff	0xffa, 0xfe5       	MOVFF	PCLATH, POSTDEC1
001196   ffe5
001198   cffb     movff	0xffb, 0xfe5       	MOVFF	PCLATU, POSTDEC1
00119a   ffe5
00119c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00119e   ffe5
0011a0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0011a2   ffd9
0011a4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0011a6   ffe5
0011a8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0011aa   ffe5
0011ac   0100     movlb	0                  	BANKSEL	_adc_int_nr
                                           ;	.line	102; adc.c	adc_int_nr++;
0011ae   2b6f     incf	0x6f, 0x1, 0x1      	INCF	_adc_int_nr, F, B
0011b0   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0011b2   d002     bra	0x11b8               	BRA	_10154_DS_
0011b4   0100     movlb	0                  	BANKSEL	(_adc_int_nr + 1)
0011b6   2b70     incf	0x70, 0x1, 0x1      	INCF	(_adc_int_nr + 1), F, B
                                           _10154_DS_:
                                           ;	.line	104; adc.c	adc_buf[adc_buf_ptr++]=ADRESH; 
0011b8   c06e     movff	0x6e, 0            	MOVFF	_adc_buf_ptr, r0x00
0011ba   f000
0011bc   0100     movlb	0                  	BANKSEL	_adc_buf_ptr
0011be   2b6e     incf	0x6e, 0x1, 0x1      	INCF	_adc_buf_ptr, F, B
0011c0   0e00     movlw	0                  	MOVLW	LOW(_adc_buf)
0011c2   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0011c4   0e01     movlw	0x1                	MOVLW	HIGH(_adc_buf)
0011c6   6a01     clrf	0x1, 0              	CLRF	r0x01
0011c8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0011ca   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0011cc   ffe9
0011ce   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
0011d0   ffea
0011d2   cfc4     movff	0xfc4, 0xfef       	MOVFF	_ADRESH, INDF0
0011d4   ffef
                                           ;	.line	105; adc.c	adc_buf[adc_buf_ptr++]=ADRESL;
0011d6   c06e     movff	0x6e, 0            	MOVFF	_adc_buf_ptr, r0x00
0011d8   f000
0011da   0100     movlb	0                  	BANKSEL	_adc_buf_ptr
0011dc   2b6e     incf	0x6e, 0x1, 0x1      	INCF	_adc_buf_ptr, F, B
0011de   0e00     movlw	0                  	MOVLW	LOW(_adc_buf)
0011e0   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0011e2   0e01     movlw	0x1                	MOVLW	HIGH(_adc_buf)
0011e4   6a01     clrf	0x1, 0              	CLRF	r0x01
0011e6   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0011e8   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0011ea   ffe9
0011ec   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
0011ee   ffea
0011f0   cfc3     movff	0xfc3, 0xfef       	MOVFF	_ADRESL, INDF0
0011f2   ffef
                                           ;	.line	107; adc.c	PIR1bits.ADIF=0;
0011f4   9c9e     bcf	0x9e, 0x6, 0         	BCF	_PIR1bits, 6
0011f6   0100     movlb	0                  	BANKSEL	_adc_nchan
                                           ;	.line	109; adc.c	adc_nchan++;
0011f8   2b9b     incf	0x9b, 0x1, 0x1      	INCF	_adc_nchan, F, B
0011fa   0100     movlb	0                  	BANKSEL	_adc_nchans
                                           ;	.line	110; adc.c	if (adc_nchan >= adc_nchans) {
0011fc   519a     movf	0x9a, 0, 0x1        	MOVF	_adc_nchans, W, B
0011fe   0100     movlb	0                  	BANKSEL	_adc_nchan
001200   5d9b     subwf	0x9b, 0, 0x1       	SUBWF	_adc_nchan, W, B
001202   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
001204   ef42     goto	0x1284              	GOTO	_00140_DS_
001206   f009
001208   0100     movlb	0                  	BANKSEL	_adc_nchan
                                           ;	.line	112; adc.c	adc_nchan=0;
00120a   6b9b     clrf	0x9b, 0x1           	CLRF	_adc_nchan, B
00120c   0100     movlb	0                  	BANKSEL	_adc_in
                                           ;	.line	113; adc.c	adc_in++;
00120e   2b98     incf	0x98, 0x1, 0x1      	INCF	_adc_in, F, B
001210   0100     movlb	0                  	BANKSEL	_adc_nbufs
                                           ;	.line	114; adc.c	if(adc_in >= adc_nbufs) {
001212   5197     movf	0x97, 0, 0x1        	MOVF	_adc_nbufs, W, B
001214   0100     movlb	0                  	BANKSEL	_adc_in
001216   5d98     subwf	0x98, 0, 0x1       	SUBWF	_adc_in, W, B
001218   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
00121a   ef13     goto	0x1226              	GOTO	_00136_DS_
00121c   f009
00121e   0100     movlb	0                  	BANKSEL	_adc_in
                                           ;	.line	115; adc.c	adc_in = 0;
001220   6b98     clrf	0x98, 0x1           	CLRF	_adc_in, B
001222   0100     movlb	0                  	BANKSEL	_adc_buf_ptr
                                           ;	.line	116; adc.c	adc_buf_ptr=0;
001224   6b6e     clrf	0x6e, 0x1           	CLRF	_adc_buf_ptr, B
                                           _00136_DS_:
001226   0100     movlb	0                  	BANKSEL	_adc_in
                                           ;	.line	118; adc.c	if(adc_in==adc_out) {
001228   5198     movf	0x98, 0, 0x1        	MOVF	_adc_in, W, B
00122a   0100     movlb	0                  	BANKSEL	_adc_out
00122c   1999     xorwf	0x99, 0, 0x1       	XORWF	_adc_out, W, B
00122e   e102     bnz	0x1234               	BNZ	_00148_DS_
001230   ef1c     goto	0x1238              	GOTO	_00149_DS_
001232   f009
                                           _00148_DS_:
001234   ef22     goto	0x1244              	GOTO	_00138_DS_
001236   f009
                                           _00149_DS_:
001238   0100     movlb	0                  	BANKSEL	_adc_flags
                                           ;	.line	121; adc.c	adc_flags.adc_overrun=1;
00123a   836d     bsf	0x6d, 0x1, 0x1       	BSF	_adc_flags, 1, B
                                           ;	.line	122; adc.c	PIE1bits.ADIE=0;
00123c   9c9d     bcf	0x9d, 0x6, 0         	BCF	_PIE1bits, 6
                                           ;	.line	123; adc.c	ADCON0=0;
00123e   6ac2     clrf	0xc2, 0             	CLRF	_ADCON0
                                           ;	.line	124; adc.c	return;
001240   ef55     goto	0x12aa              	GOTO	_00141_DS_
001242   f009
                                           _00138_DS_:
                                           ;	.line	126; adc.c	adc_buf[adc_buf_ptr++]='D';
001244   c06e     movff	0x6e, 0            	MOVFF	_adc_buf_ptr, r0x00
001246   f000
001248   0100     movlb	0                  	BANKSEL	_adc_buf_ptr
00124a   2b6e     incf	0x6e, 0x1, 0x1      	INCF	_adc_buf_ptr, F, B
00124c   0e00     movlw	0                  	MOVLW	LOW(_adc_buf)
00124e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001250   0e01     movlw	0x1                	MOVLW	HIGH(_adc_buf)
001252   6a01     clrf	0x1, 0              	CLRF	r0x01
001254   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001256   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001258   ffe9
00125a   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
00125c   ffea
00125e   0e44     movlw	0x44               	MOVLW	0x44
001260   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	127; adc.c	adc_buf[adc_buf_ptr++]=++adc_rec_nr;
001262   c06e     movff	0x6e, 0            	MOVFF	_adc_buf_ptr, r0x00
001264   f000
001266   0100     movlb	0                  	BANKSEL	_adc_buf_ptr
001268   2b6e     incf	0x6e, 0x1, 0x1      	INCF	_adc_buf_ptr, F, B
00126a   0e00     movlw	0                  	MOVLW	LOW(_adc_buf)
00126c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00126e   0e01     movlw	0x1                	MOVLW	HIGH(_adc_buf)
001270   6a01     clrf	0x1, 0              	CLRF	r0x01
001272   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001274   0100     movlb	0                  	BANKSEL	_adc_rec_nr
001276   2b6c     incf	0x6c, 0x1, 0x1      	INCF	_adc_rec_nr, F, B
001278   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00127a   ffe9
00127c   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
00127e   ffea
001280   c06c     movff	0x6c, 0xfef        	MOVFF	_adc_rec_nr, INDF0
001282   ffef
                                           _00140_DS_:
                                           ;	.line	130; adc.c	ADCON0 = (adc_cfg.chns[adc_nchan]<<2)+1;
001284   c09b     movff	0x9b, 0            	MOVFF	_adc_nchan, r0x00
001286   f000
001288   0e63     movlw	0x63               	MOVLW	LOW(_adc_cfg + 3)
00128a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00128c   0e00     movlw	0                  	MOVLW	HIGH(_adc_cfg + 3)
00128e   6a01     clrf	0x1, 0              	CLRF	r0x01
001290   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001292   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001294   ffe9
001296   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
001298   ffea
00129a   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
00129c   f000
00129e   3400     rlcf	0, 0, 0             	RLCF	r0x00, W
0012a0   0b7e     andlw	0x7e               	ANDLW	0x7e
0012a2   6e01     movwf	0x1, 0             	MOVWF	r0x01
0012a4   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
0012a6   2801     incf	0x1, 0, 0           	INCF	r0x01, W
0012a8   6ec2     movwf	0xc2, 0            	MOVWF	_ADCON0
                                           _00141_DS_:
0012aa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0012ac   f001
0012ae   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0012b0   f000
0012b2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0012b4   ffd9
0012b6   cfe4     movff	0xfe4, 0xffb       	MOVFF	PREINC1, PCLATU
0012b8   fffb
0012ba   cfe4     movff	0xfe4, 0xffa       	MOVFF	PREINC1, PCLATH
0012bc   fffa
0012be   cfe4     movff	0xfe4, 0xfea       	MOVFF	PREINC1, FSR0H
0012c0   ffea
0012c2   cfe4     movff	0xfe4, 0xfe9       	MOVFF	PREINC1, FSR0L
0012c4   ffe9
0012c6   cfe4     movff	0xfe4, 0xff4       	MOVFF	PREINC1, PRODH
0012c8   fff4
0012ca   cfe4     movff	0xfe4, 0xff3       	MOVFF	PREINC1, PRODL
0012cc   fff3
0012ce   cfe4     movff	0xfe4, 0xfe0       	MOVFF	PREINC1, BSR
0012d0   ffe0
0012d2   cfe4     movff	0xfe4, 0xfd8       	MOVFF	PREINC1, STATUS
0012d4   ffd8
0012d6   cfe4     movff	0xfe4, 0xfe8       	MOVFF	PREINC1, WREG
0012d8   ffe8
0012da   0010     retfie	0                 	RETFIE	
                                           
                                           ; ; Starting pCode block
                                           S_adc__adc_stop	code
                                           _adc_stop:
                                           ;	.line	86; adc.c	void adc_stop(void)
001c4e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001c50   ffe5
001c52   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001c54   ffd9
                                           ;	.line	91; adc.c	PIE1bits.ADIE=0;
001c56   9c9d     bcf	0x9d, 0x6, 0         	BCF	_PIE1bits, 6
                                           ;	.line	93; adc.c	ADCON0=0;
001c58   6ac2     clrf	0xc2, 0             	CLRF	_ADCON0
001c5a   0100     movlb	0                  	BANKSEL	_adc_flags
                                           ;	.line	94; adc.c	adc_flags.adc_sampling = 0;
001c5c   916d     bcf	0x6d, 0, 0x1         	BCF	_adc_flags, 0, B
001c5e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001c60   ffd9
001c62   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_adc__adc_start	code
                                           _adc_start:
                                           ;	.line	47; adc.c	void adc_start(void)
0013f4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0013f6   ffe5
0013f8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0013fa   ffd9
0013fc   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0013fe   ffe5
001400   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001402   ffe5
001404   0100     movlb	0                  	BANKSEL	_adc_in
                                           ;	.line	50; adc.c	adc_in=0;
001406   6b98     clrf	0x98, 0x1           	CLRF	_adc_in, B
001408   0100     movlb	0                  	BANKSEL	_adc_out
                                           ;	.line	51; adc.c	adc_out=0;
00140a   6b99     clrf	0x99, 0x1           	CLRF	_adc_out, B
00140c   0100     movlb	0                  	BANKSEL	_adc_nchan
                                           ;	.line	52; adc.c	adc_nchan=0;
00140e   6b9b     clrf	0x9b, 0x1           	CLRF	_adc_nchan, B
001410   0100     movlb	0                  	BANKSEL	_adc_rec_nr
                                           ;	.line	53; adc.c	adc_rec_nr=0;
001412   6b6c     clrf	0x6c, 0x1           	CLRF	_adc_rec_nr, B
                                           ;	.line	54; adc.c	adc_int_nr=60;
001414   0e3c     movlw	0x3c               	MOVLW	0x3c
001416   0100     movlb	0                  	BANKSEL	_adc_int_nr
001418   6f6f     movwf	0x6f, 0x1          	MOVWF	_adc_int_nr, B
00141a   0100     movlb	0                  	BANKSEL	(_adc_int_nr + 1)
00141c   6b70     clrf	0x70, 0x1           	CLRF	(_adc_int_nr + 1), B
00141e   0100     movlb	0                  	BANKSEL	_adc_buf_ptr
                                           ;	.line	55; adc.c	adc_buf_ptr=0;
001420   6b6e     clrf	0x6e, 0x1           	CLRF	_adc_buf_ptr, B
                                           ;	.line	56; adc.c	adc_buf[adc_buf_ptr++]='D';
001422   c06e     movff	0x6e, 0            	MOVFF	_adc_buf_ptr, r0x00
001424   f000
001426   0100     movlb	0                  	BANKSEL	_adc_buf_ptr
001428   2b6e     incf	0x6e, 0x1, 0x1      	INCF	_adc_buf_ptr, F, B
00142a   0e00     movlw	0                  	MOVLW	LOW(_adc_buf)
00142c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00142e   0e01     movlw	0x1                	MOVLW	HIGH(_adc_buf)
001430   6a01     clrf	0x1, 0              	CLRF	r0x01
001432   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001434   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001436   ffe9
001438   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
00143a   ffea
00143c   0e44     movlw	0x44               	MOVLW	0x44
00143e   6eef     movwf	0xef, 0            	MOVWF	INDF0
                                           ;	.line	57; adc.c	adc_buf[adc_buf_ptr++]=adc_rec_nr;
001440   c06e     movff	0x6e, 0            	MOVFF	_adc_buf_ptr, r0x00
001442   f000
001444   0100     movlb	0                  	BANKSEL	_adc_buf_ptr
001446   2b6e     incf	0x6e, 0x1, 0x1      	INCF	_adc_buf_ptr, F, B
001448   0e00     movlw	0                  	MOVLW	LOW(_adc_buf)
00144a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00144c   0e01     movlw	0x1                	MOVLW	HIGH(_adc_buf)
00144e   6a01     clrf	0x1, 0              	CLRF	r0x01
001450   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
001452   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001454   ffe9
001456   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
001458   ffea
00145a   0e00     movlw	0                  	MOVLW	0x00
00145c   6eef     movwf	0xef, 0            	MOVWF	INDF0
00145e   0100     movlb	0                  	BANKSEL	_adc_flags
                                           ;	.line	58; adc.c	adc_flags.adc_overrun=0;
001460   936d     bcf	0x6d, 0x1, 0x1       	BCF	_adc_flags, 1, B
                                           ;	.line	59; adc.c	TRISA=0xff;
001462   0eff     movlw	0xff               	MOVLW	0xff
001464   6e92     movwf	0x92, 0            	MOVWF	_TRISA
                                           ;	.line	60; adc.c	ADCON1=0; // Configure A/D inputs
001466   6ac1     clrf	0xc1, 0             	CLRF	_ADCON1
                                           ;	.line	61; adc.c	PIR1bits.ADIF=0; // Clear A/D interrupt flag bit
001468   9c9e     bcf	0x9e, 0x6, 0         	BCF	_PIR1bits, 6
                                           ;	.line	62; adc.c	PIE1bits.ADIE=1; // Enable A/D interrupts
00146a   8c9d     bsf	0x9d, 0x6, 0         	BSF	_PIE1bits, 6
                                           ;	.line	63; adc.c	IPR1bits.ADIP=1; //High Priority
00146c   8c9f     bsf	0x9f, 0x6, 0         	BSF	_IPR1bits, 6
                                           ;	.line	64; adc.c	ADCON0 = (adc_cfg.chns[adc_nchan]<<2)+1;
00146e   c09b     movff	0x9b, 0            	MOVFF	_adc_nchan, r0x00
001470   f000
001472   0e63     movlw	0x63               	MOVLW	LOW(_adc_cfg + 3)
001474   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
001476   0e00     movlw	0                  	MOVLW	HIGH(_adc_cfg + 3)
001478   6a01     clrf	0x1, 0              	CLRF	r0x01
00147a   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00147c   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00147e   ffe9
001480   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
001482   ffea
001484   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
001486   f000
001488   3400     rlcf	0, 0, 0             	RLCF	r0x00, W
00148a   0b7e     andlw	0x7e               	ANDLW	0x7e
00148c   6e01     movwf	0x1, 0             	MOVWF	r0x01
00148e   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
001490   2801     incf	0x1, 0, 0           	INCF	r0x01, W
001492   6ec2     movwf	0xc2, 0            	MOVWF	_ADCON0
                                           ;	.line	65; adc.c	ADCON2=0x06; //Left Justified, AN0 is analog, Vref comes from AVDD and AVSS
001494   0e06     movlw	0x6                	MOVLW	0x06
001496   6ec0     movwf	0xc0, 0            	MOVWF	_ADCON2
                                           ;	.line	67; adc.c	CCPR2H=(adc_cfg.freq[1]);
001498   c061     movff	0x61, 0xfbc        	MOVFF	(_adc_cfg + 1), _CCPR2H
00149a   ffbc
                                           ;	.line	68; adc.c	CCPR2L=(adc_cfg.freq[0]);
00149c   c060     movff	0x60, 0xfbb        	MOVFF	_adc_cfg, _CCPR2L
00149e   ffbb
                                           ;	.line	70; adc.c	CCP2CON = 0x0b;
0014a0   0e0b     movlw	0xb                	MOVLW	0x0b
0014a2   6eba     movwf	0xba, 0            	MOVWF	_CCP2CON
                                           ;	.line	72; adc.c	T3CON = 0; //Necessary to connect CCP2 to timer1
0014a4   6ab1     clrf	0xb1, 0             	CLRF	_T3CON
                                           ;	.line	73; adc.c	T1CON = 4;
0014a6   0e04     movlw	0x4                	MOVLW	0x04
0014a8   6ecd     movwf	0xcd, 0            	MOVWF	_T1CON
                                           ;	.line	74; adc.c	TMR1L = 0;
0014aa   6ace     clrf	0xce, 0             	CLRF	_TMR1L
                                           ;	.line	75; adc.c	TMR1H = 0;
0014ac   6acf     clrf	0xcf, 0             	CLRF	_TMR1H
                                           ;	.line	76; adc.c	T1CON = ((adc_cfg.freq[2]&3)<<4) | 1 ;
0014ae   0e03     movlw	0x3                	MOVLW	0x03
0014b0   0100     movlb	0                  	BANKSEL	(_adc_cfg + 2)
0014b2   1562     andwf	0x62, 0, 0x1       	ANDWF	(_adc_cfg + 2), W, B
0014b4   6e00     movwf	0, 0               	MOVWF	r0x00
0014b6   3800     swapf	0, 0, 0            	SWAPF	r0x00, W
0014b8   0bf0     andlw	0xf0               	ANDLW	0xf0
0014ba   6e01     movwf	0x1, 0             	MOVWF	r0x01
0014bc   0e01     movlw	0x1                	MOVLW	0x01
0014be   1001     iorwf	0x1, 0, 0          	IORWF	r0x01, W
0014c0   6ecd     movwf	0xcd, 0            	MOVWF	_T1CON
0014c2   0100     movlb	0                  	BANKSEL	_adc_flags
                                           ;	.line	78; adc.c	adc_flags.adc_sampling=1;
0014c4   816d     bsf	0x6d, 0, 0x1         	BSF	_adc_flags, 0, B
                                           ;	.line	80; adc.c	PIR1bits.ADIF=0; // Clear A/D interrupt flag bit
0014c6   9c9e     bcf	0x9e, 0x6, 0         	BCF	_PIR1bits, 6
                                           ;	.line	81; adc.c	PIE1bits.ADIE=1;
0014c8   8c9d     bsf	0x9d, 0x6, 0         	BSF	_PIE1bits, 6
                                           ;	.line	82; adc.c	INTCONbits.PEIE=1; //Enable peripheral interrupts
0014ca   8cf2     bsf	0xf2, 0x6, 0         	BSF	_INTCONbits, 6
                                           ;	.line	83; adc.c	INTCONbits.GIE=1; //Enable all interrupts
0014cc   8ef2     bsf	0xf2, 0x7, 0         	BSF	_INTCONbits, 7
0014ce   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0014d0   f001
0014d2   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0014d4   f000
0014d6   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0014d8   ffd9
0014da   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_adc__adc_reset	code
                                           _adc_reset:
                                           ;	.line	41; adc.c	void adc_reset(void)
001c64   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001c66   ffe5
001c68   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001c6a   ffd9
001c6c   0100     movlb	0                  	BANKSEL	_adc_flags
                                           ;	.line	43; adc.c	adc_flags.adc_overrun = 0;
001c6e   936d     bcf	0x6d, 0x1, 0x1       	BCF	_adc_flags, 1, B
001c70   0100     movlb	0                  	BANKSEL	_adc_flags
                                           ;	.line	44; adc.c	adc_flags.adc_sampling = 0;
001c72   916d     bcf	0x6d, 0, 0x1         	BCF	_adc_flags, 0, B
001c74   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001c76   ffd9
001c78   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_adc__adc_init	code
                                           _adc_init:
                                           ;	.line	25; adc.c	void adc_init()
001810   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001812   ffe5
001814   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001816   ffd9
001818   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
00181a   ffe5
00181c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00181e   ffe5
001820   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001822   ffe5
001824   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001826   ffe5
001828   0100     movlb	0                  	BANKSEL	_adc_nchans
                                           ;	.line	29; adc.c	adc_nchans=0;
00182a   6b9a     clrf	0x9a, 0x1           	CLRF	_adc_nchans, B
                                           ;	.line	30; adc.c	for(i=0;i<8;i++) {
00182c   6a00     clrf	0, 0                	CLRF	r0x00
00182e   6a01     clrf	0x1, 0              	CLRF	r0x01
                                           _00108_DS_:
001830   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001832   0f80     addlw	0x80               	ADDLW	0x80
001834   0f80     addlw	0x80               	ADDLW	0x80
001836   e102     bnz	0x183c               	BNZ	_00118_DS_
001838   0e08     movlw	0x8                	MOVLW	0x08
00183a   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00118_DS_:
00183c   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00183e   ef39     goto	0x1872              	GOTO	_00111_DS_
001840   f00c
                                           ;	.line	31; adc.c	if (adc_cfg.chns[i]<16) adc_nchans++;
001842   0e63     movlw	0x63               	MOVLW	LOW(_adc_cfg + 3)
001844   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
001846   6e02     movwf	0x2, 0             	MOVWF	r0x02
001848   0e00     movlw	0                  	MOVLW	HIGH(_adc_cfg + 3)
00184a   2001     addwfc	0x1, 0, 0         	ADDWFC	r0x01, W
00184c   6e03     movwf	0x3, 0             	MOVWF	r0x03
00184e   c002     movff	0x2, 0xfe9         	MOVFF	r0x02, FSR0L
001850   ffe9
001852   c003     movff	0x3, 0xfea         	MOVFF	r0x03, FSR0H
001854   ffea
001856   cfef     movff	0xfef, 0x2         	MOVFF	INDF0, r0x02
001858   f002
00185a   0e10     movlw	0x10               	MOVLW	0x10
00185c   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
00185e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001860   ef39     goto	0x1872              	GOTO	_00111_DS_
001862   f00c
001864   0100     movlb	0                  	BANKSEL	_adc_nchans
001866   2b9a     incf	0x9a, 0x1, 0x1      	INCF	_adc_nchans, F, B
                                           ;	.line	30; adc.c	for(i=0;i<8;i++) {
001868   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00186a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
00186c   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
00186e   ef18     goto	0x1830              	GOTO	_00108_DS_
001870   f00c
                                           ; ;multiply lit val:0x02 by variable _adc_nchans and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00111_DS_:
                                           ;	.line	34; adc.c	adc_one_buf_size = 2*adc_nchans+2;
001872   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
001874   0100     movlb	0                  	BANKSEL	_adc_nchans
001876   359a     rlcf	0x9a, 0, 0x1        	RLCF	_adc_nchans, W, B
001878   6e00     movwf	0, 0               	MOVWF	r0x00
00187a   0e02     movlw	0x2                	MOVLW	0x02
00187c   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
00187e   0100     movlb	0                  	BANKSEL	_adc_one_buf_size
001880   6f71     movwf	0x71, 0x1          	MOVWF	_adc_one_buf_size, B
                                           ;	.line	35; adc.c	adc_nbufs=ADC_BUF_SIZE/adc_one_buf_size;
001882   c071     movff	0x71, 0xfe5        	MOVFF	_adc_one_buf_size, POSTDEC1
001884   ffe5
001886   0eff     movlw	0xff               	MOVLW	0xff
001888   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00188a   ecee     call	0x19dc, 0           	CALL	__divuchar
00188c   f00c
00188e   0100     movlb	0                  	BANKSEL	_adc_nbufs
001890   6f97     movwf	0x97, 0x1          	MOVWF	_adc_nbufs, B
001892   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
001894   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
001896   0100     movlb	0                  	BANKSEL	_adc_in
                                           ;	.line	36; adc.c	adc_in=0;
001898   6b98     clrf	0x98, 0x1           	CLRF	_adc_in, B
00189a   0100     movlb	0                  	BANKSEL	_adc_out
                                           ;	.line	37; adc.c	adc_out=0;
00189c   6b99     clrf	0x99, 0x1           	CLRF	_adc_out, B
00189e   0100     movlb	0                  	BANKSEL	_adc_nchan
                                           ;	.line	38; adc.c	adc_nchan=0;
0018a0   6b9b     clrf	0x9b, 0x1           	CLRF	_adc_nchan, B
0018a2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0018a4   f003
0018a6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0018a8   f002
0018aa   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0018ac   f001
0018ae   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0018b0   f000
0018b2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0018b4   ffd9
0018b6   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _err_ovr:
000762   3a45     swapf	0x45, 0x1, 0       	DB	0x45, 0x3a, 0x4f, 0x56, 0x45, 0x52, 0x52, 0x55, 0x4e, 0x00
000764   564f     subfwb	0x4f, 0x1, 0      
000766   5245     movf	0x45, 0x1, 0        
000768   5552     subfwb	0x52, 0, 0x1      
00076a   004e     dw	0x4e  ;unknown opcode 
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  980 (0x03d4) bytes ( 0.75%)
                                           ;           	  490 (0x01ea) words
                                           ; udata size:	  272 (0x0110) bytes (15.18%)
                                           ; access size:	    4 (0x0004) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Aug 16 2006)
                                           ; This file generated Fri Sep 15 11:04:57 2006
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4455
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _usb_active_alt_setting
                                           	global _string_descriptor
                                           	global _configuration_descriptor
                                           	global _device_descriptor
                                           	global _init_usb
                                           	global _reset_usb
                                           	global _usb_sleep
                                           	global _dispatch_usb_event
                                           	global _fill_in_buffer
                                           	global _ep_bdt
                                           	global _ep_init
                                           	global _ep_in
                                           	global _ep_out
                                           	global _ep_setup
                                           	global _usb_device_state
                                           	global _usb_active_cfg
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget3
                                           	extern __gptrget2
                                           	extern __gptrput2
                                           	extern __gptrget1
                                           	extern __gptrput1
                                           	extern __gptrput3
                                           	extern _SPPDATAbits
                                           	extern _SPPCFGbits
                                           	extern _SPPEPSbits
                                           	extern _SPPCONbits
                                           	extern _UFRMLbits
                                           	extern _UFRMHbits
                                           	extern _UIRbits
                                           	extern _UIEbits
                                           	extern _UEIRbits
                                           	extern _UEIEbits
                                           	extern _USTATbits
                                           	extern _UCONbits
                                           	extern _UADDRbits
                                           	extern _UCFGbits
                                           	extern _UEP0bits
                                           	extern _UEP1bits
                                           	extern _UEP2bits
                                           	extern _UEP3bits
                                           	extern _UEP4bits
                                           	extern _UEP5bits
                                           	extern _UEP6bits
                                           	extern _UEP7bits
                                           	extern _UEP8bits
                                           	extern _UEP9bits
                                           	extern _UEP10bits
                                           	extern _UEP11bits
                                           	extern _UEP12bits
                                           	extern _UEP13bits
                                           	extern _UEP14bits
                                           	extern _UEP15bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _SPPDATA
                                           	extern _SPPCFG
                                           	extern _SPPEPS
                                           	extern _SPPCON
                                           	extern _UFRML
                                           	extern _UFRMH
                                           	extern _UIR
                                           	extern _UIE
                                           	extern _UEIR
                                           	extern _UEIE
                                           	extern _USTAT
                                           	extern _UCON
                                           	extern _UADDR
                                           	extern _UCFG
                                           	extern _UEP0
                                           	extern _UEP1
                                           	extern _UEP2
                                           	extern _UEP3
                                           	extern _UEP4
                                           	extern _UEP5
                                           	extern _UEP6
                                           	extern _UEP7
                                           	extern _UEP8
                                           	extern _UEP9
                                           	extern _UEP10
                                           	extern _UEP11
                                           	extern _UEP12
                                           	extern _UEP13
                                           	extern _UEP14
                                           	extern _UEP15
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _ECCP1DEL
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _ECCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern __mulint
                                           	extern _boot_device_descriptor
                                           	extern _boot_configuration_descriptor
                                           	extern _boot_string_descriptor
                                           	extern _str0
                                           	extern _str1
                                           	extern _str2
                                           	extern _str3
                                           	extern _boot_ep_init
                                           	extern _boot_ep_in
                                           	extern _boot_ep_out
                                           	extern _boot_ep_setup
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           INTCON	equ	0xff2
                                           WREG	equ	0xfe8
                                           TOSL	equ	0xffd
                                           TOSH	equ	0xffe
                                           TOSU	equ	0xfff
                                           TBLPTRL	equ	0xff6
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           r0x0a	res	1
                                           r0x0b	res	1
                                           r0x0c	res	1
                                           r0x0d	res	1
                                           
                                           udata_usb_0	udata
                                           _device_descriptor	res	3
                                           
                                           udata_usb_1	udata
                                           _configuration_descriptor	res	3
                                           
                                           udata_usb_2	udata
                                           _string_descriptor	res	3
                                           
                                           udata_usb_3	udata
                                           _usb_active_alt_setting	res	1
                                           
                                           udata_usb_4	udata
                                           _usb_device_state	res	1
                                           
                                           udata_usb_5	udata
                                           _usb_active_cfg	res	1
                                           
                                           udata_usb_6	udata
                                           _ep_init	res	3
                                           
                                           udata_usb_7	udata
                                           _ep_setup	res	3
                                           
                                           udata_usb_8	udata
                                           _ep_out	res	3
                                           
                                           udata_usb_9	udata
                                           _ep_in	res	3
                                           
                                           
                                           ustat_usb_00	udata	0X0400
                                           _ep_bdt	res	128
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_usb__fill_in_buffer	code
                                           _fill_in_buffer:
                                           ;	.line	185; usb.c	void fill_in_buffer(uchar EPnum,
000c40   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
000c42   ffe5
000c44   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000c46   ffd9
000c48   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000c4a   ffe5
000c4c   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000c4e   ffe5
000c50   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
000c52   ffe5
000c54   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000c56   ffe5
000c58   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000c5a   ffe5
000c5c   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000c5e   ffe5
000c60   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
000c62   ffe5
000c64   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000c66   ffe5
000c68   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000c6a   ffe5
000c6c   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000c6e   ffe5
000c70   c00a     movff	0xa, 0xfe5         	MOVFF	r0x0a, POSTDEC1
000c72   ffe5
000c74   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000c76   ffe5
000c78   c00c     movff	0xc, 0xfe5         	MOVFF	r0x0c, POSTDEC1
000c7a   ffe5
000c7c   c00d     movff	0xd, 0xfe5         	MOVFF	r0x0d, POSTDEC1
000c7e   ffe5
000c80   0e02     movlw	0x2                	MOVLW	0x02
000c82   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
000c84   f000
000c86   0e03     movlw	0x3                	MOVLW	0x03
000c88   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
000c8a   f001
000c8c   0e04     movlw	0x4                	MOVLW	0x04
000c8e   cfdb     movff	0xfdb, 0x2         	MOVFF	PLUSW2, r0x02
000c90   f002
000c92   0e05     movlw	0x5                	MOVLW	0x05
000c94   cfdb     movff	0xfdb, 0x3         	MOVFF	PLUSW2, r0x03
000c96   f003
000c98   0e06     movlw	0x6                	MOVLW	0x06
000c9a   cfdb     movff	0xfdb, 0x4         	MOVFF	PLUSW2, r0x04
000c9c   f004
000c9e   0e07     movlw	0x7                	MOVLW	0x07
000ca0   cfdb     movff	0xfdb, 0x5         	MOVFF	PLUSW2, r0x05
000ca2   f005
000ca4   0e08     movlw	0x8                	MOVLW	0x08
000ca6   cfdb     movff	0xfdb, 0x6         	MOVFF	PLUSW2, r0x06
000ca8   f006
000caa   0e09     movlw	0x9                	MOVLW	0x09
000cac   cfdb     movff	0xfdb, 0x7         	MOVFF	PLUSW2, r0x07
000cae   f007
000cb0   0e0a     movlw	0xa                	MOVLW	0x0a
000cb2   cfdb     movff	0xfdb, 0x8         	MOVFF	PLUSW2, r0x08
000cb4   f008
                                           ;	.line	194; usb.c	if(*nb_byte < buffer_size)
000cb6   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
000cb8   ffe9
000cba   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
000cbc   fff3
000cbe   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000cc0   eca7     call	0x1b4e, 0           	CALL	__gptrget2
000cc2   f00d
000cc4   6e09     movwf	0x9, 0             	MOVWF	r0x09
000cc6   cff3     movff	0xff3, 0xa         	MOVFF	PRODL, r0x0a
000cc8   f00a
000cca   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000ccc   5c0a     subwf	0xa, 0, 0          	SUBWF	r0x0a, W
000cce   e102     bnz	0xcd4                	BNZ	_00207_DS_
000cd0   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000cd2   5c09     subwf	0x9, 0, 0          	SUBWF	r0x09, W
                                           _00207_DS_:
000cd4   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000cd6   ef73     goto	0xce6               	GOTO	_00196_DS_
000cd8   f006
                                           ;	.line	196; usb.c	byte_to_send = *nb_byte;
000cda   c009     movff	0x9, 0xb           	MOVFF	r0x09, r0x0b
000cdc   f00b
000cde   c00a     movff	0xa, 0xc           	MOVFF	r0x0a, r0x0c
000ce0   f00c
000ce2   ef77     goto	0xcee               	GOTO	_00197_DS_
000ce4   f006
                                           _00196_DS_:
                                           ;	.line	200; usb.c	byte_to_send = buffer_size;
000ce6   c004     movff	0x4, 0xb           	MOVFF	r0x04, r0x0b
000ce8   f00b
000cea   c005     movff	0x5, 0xc           	MOVFF	r0x05, r0x0c
000cec   f00c
                                           _00197_DS_:
                                           ;	.line	203; usb.c	EP_IN_BD(EPnum).Cnt = byte_to_send;
000cee   5000     movf	0, 0, 0             	MOVF	r0x00, W
000cf0   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000cf2   6e04     movwf	0x4, 0             	MOVWF	r0x04
000cf4   2804     incf	0x4, 0, 0           	INCF	r0x04, W
000cf6   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ; ;multiply lit val:0x04 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
000cf8   5000     movf	0, 0, 0             	MOVF	r0x00, W
000cfa   0d04     mullw	0x4                	MULLW	0x04
000cfc   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
000cfe   f000
000d00   0e00     movlw	0                  	MOVLW	LOW(_ep_bdt)
000d02   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
000d04   6e04     movwf	0x4, 0             	MOVWF	r0x04
000d06   6a05     clrf	0x5, 0              	CLRF	r0x05
000d08   0e04     movlw	0x4                	MOVLW	HIGH(_ep_bdt)
000d0a   2205     addwfc	0x5, 0x1, 0       	ADDWFC	r0x05, F
000d0c   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
000d0e   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000d10   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
000d12   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000d14   6e0d     movwf	0xd, 0             	MOVWF	r0x0d
000d16   c004     movff	0x4, 0xfe9         	MOVFF	r0x04, FSR0L
000d18   ffe9
000d1a   c005     movff	0x5, 0xfea         	MOVFF	r0x05, FSR0H
000d1c   ffea
000d1e   c00d     movff	0xd, 0xfef         	MOVFF	r0x0d, INDF0
000d20   ffef
                                           ;	.line	206; usb.c	dest = (uchar __data *) EP_IN_BD(EPnum).ADR;
000d22   0e00     movlw	0                  	MOVLW	LOW(_ep_bdt)
000d24   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000d26   0e04     movlw	0x4                	MOVLW	HIGH(_ep_bdt)
000d28   6a04     clrf	0x4, 0              	CLRF	r0x04
000d2a   2204     addwfc	0x4, 0x1, 0       	ADDWFC	r0x04, F
000d2c   0e02     movlw	0x2                	MOVLW	0x02
000d2e   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000d30   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000d32   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
000d34   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000d36   ffe9
000d38   c004     movff	0x4, 0xfea         	MOVFF	r0x04, FSR0H
000d3a   ffea
000d3c   cfee     movff	0xfee, 0           	MOVFF	POSTINC0, r0x00
000d3e   f000
000d40   cfef     movff	0xfef, 0x4         	MOVFF	INDF0, r0x04
000d42   f004
000d44   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000d46   6e04     movwf	0x4, 0             	MOVWF	r0x04
000d48   5000     movf	0, 0, 0             	MOVF	r0x00, W
000d4a   6e00     movwf	0, 0               	MOVWF	r0x00
000d4c   0e80     movlw	0x80               	MOVLW	0x80
000d4e   6e05     movwf	0x5, 0             	MOVWF	r0x05
                                           ;	.line	209; usb.c	*nb_byte -= byte_to_send;
000d50   500b     movf	0xb, 0, 0           	MOVF	r0x0b, W
000d52   5e09     subwf	0x9, 0x1, 0        	SUBWF	r0x09, F
000d54   500c     movf	0xc, 0, 0           	MOVF	r0x0c, W
000d56   5a0a     subwfb	0xa, 0x1, 0       	SUBWFB	r0x0a, F
000d58   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000d5a   ffe5
000d5c   c00a     movff	0xa, 0xff4         	MOVFF	r0x0a, PRODH
000d5e   fff4
000d60   c006     movff	0x6, 0xfe9         	MOVFF	r0x06, FSR0L
000d62   ffe9
000d64   c007     movff	0x7, 0xff3         	MOVFF	r0x07, PRODL
000d66   fff3
000d68   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000d6a   ec1b     call	0x1c36, 0           	CALL	__gptrput2
000d6c   f00e
                                           ;	.line	212; usb.c	while(byte_to_send)
000d6e   c00b     movff	0xb, 0x6           	MOVFF	r0x0b, r0x06
000d70   f006
000d72   c00c     movff	0xc, 0x7           	MOVFF	r0x0c, r0x07
000d74   f007
                                           _00198_DS_:
000d76   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000d78   1007     iorwf	0x7, 0, 0          	IORWF	r0x07, W
000d7a   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
000d7c   effa     goto	0xdf4               	GOTO	_00201_DS_
000d7e   f006
                                           ;	.line	214; usb.c	*dest = **source;
000d80   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000d82   ffe9
000d84   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
000d86   fff3
000d88   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000d8a   ec5b     call	0x1ab6, 0           	CALL	__gptrget3
000d8c   f00d
000d8e   6e08     movwf	0x8, 0             	MOVWF	r0x08
000d90   cff3     movff	0xff3, 0x9         	MOVFF	PRODL, r0x09
000d92   f009
000d94   cff4     movff	0xff4, 0xa         	MOVFF	PRODH, r0x0a
000d96   f00a
000d98   c008     movff	0x8, 0xfe9         	MOVFF	r0x08, FSR0L
000d9a   ffe9
000d9c   c009     movff	0x9, 0xff3         	MOVFF	r0x09, PRODL
000d9e   fff3
000da0   500a     movf	0xa, 0, 0           	MOVF	r0x0a, W
000da2   ece3     call	0x1bc6, 0           	CALL	__gptrget1
000da4   f00d
000da6   6e0b     movwf	0xb, 0             	MOVWF	r0x0b
000da8   c00b     movff	0xb, 0xfe5         	MOVFF	r0x0b, POSTDEC1
000daa   ffe5
000dac   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000dae   ffe9
000db0   c004     movff	0x4, 0xff3         	MOVFF	r0x04, PRODL
000db2   fff3
000db4   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000db6   ec47     call	0x1c8e, 0           	CALL	__gptrput1
000db8   f00e
                                           ;	.line	215; usb.c	dest++;
000dba   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000dbc   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000dbe   2a04     incf	0x4, 0x1, 0         	INCF	r0x04, F
000dc0   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000dc2   2a05     incf	0x5, 0x1, 0         	INCF	r0x05, F
                                           ;	.line	216; usb.c	(*source)++;
000dc4   2a08     incf	0x8, 0x1, 0         	INCF	r0x08, F
000dc6   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000dc8   2a09     incf	0x9, 0x1, 0         	INCF	r0x09, F
000dca   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000dcc   2a0a     incf	0xa, 0x1, 0         	INCF	r0x0a, F
000dce   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000dd0   ffe5
000dd2   c009     movff	0x9, 0xff4         	MOVFF	r0x09, PRODH
000dd4   fff4
000dd6   c00a     movff	0xa, 0xff6         	MOVFF	r0x0a, TBLPTRL
000dd8   fff6
000dda   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000ddc   ffe9
000dde   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
000de0   fff3
000de2   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000de4   ecf4     call	0x1be8, 0           	CALL	__gptrput3
000de6   f00d
                                           ;	.line	217; usb.c	byte_to_send--;
000de8   0eff     movlw	0xff               	MOVLW	0xff
000dea   2606     addwf	0x6, 0x1, 0        	ADDWF	r0x06, F
000dec   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000dee   0607     decf	0x7, 0x1, 0         	DECF	r0x07, F
000df0   efbb     goto	0xd76               	GOTO	_00198_DS_
000df2   f006
                                           _00201_DS_:
000df4   cfe4     movff	0xfe4, 0xd         	MOVFF	PREINC1, r0x0d
000df6   f00d
000df8   cfe4     movff	0xfe4, 0xc         	MOVFF	PREINC1, r0x0c
000dfa   f00c
000dfc   cfe4     movff	0xfe4, 0xb         	MOVFF	PREINC1, r0x0b
000dfe   f00b
000e00   cfe4     movff	0xfe4, 0xa         	MOVFF	PREINC1, r0x0a
000e02   f00a
000e04   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
000e06   f009
000e08   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000e0a   f008
000e0c   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000e0e   f007
000e10   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000e12   f006
000e14   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000e16   f005
000e18   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000e1a   f004
000e1c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000e1e   f003
000e20   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000e22   f002
000e24   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000e26   f001
000e28   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000e2a   f000
000e2c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000e2e   ffd9
000e30   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__dispatch_usb_event	code
                                           _dispatch_usb_event:
                                           ;	.line	114; usb.c	void dispatch_usb_event(void)
0003d8   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0003da   ffe5
0003dc   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0003de   ffd9
0003e0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0003e2   ffe5
0003e4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0003e6   ffe5
0003e8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0003ea   ffe5
0003ec   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0003ee   ffe5
0003f0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0003f2   ffe5
                                           ;	.line	117; usb.c	if(UIEbits.ACTIVIE && UIRbits.ACTIVIF)
0003f4   a469     btfss	0x69, 0x2, 0       	BTFSS	_UIEbits, 2
0003f6   ef03     goto	0x406               	GOTO	_00138_DS_
0003f8   f002
0003fa   a468     btfss	0x68, 0x2, 0       	BTFSS	_UIRbits, 2
0003fc   ef03     goto	0x406               	GOTO	_00138_DS_
0003fe   f002
                                           ;	.line	119; usb.c	UCONbits.SUSPND = 0;
000400   926d     bcf	0x6d, 0x1, 0         	BCF	_UCONbits, 1
                                           ;	.line	120; usb.c	UIEbits.ACTIVIE = 0;
000402   9469     bcf	0x69, 0x2, 0         	BCF	_UIEbits, 2
                                           ;	.line	121; usb.c	UIRbits.ACTIVIF = 0;
000404   9468     bcf	0x68, 0x2, 0         	BCF	_UIRbits, 2
                                           _00138_DS_:
                                           ;	.line	125; usb.c	if(UIEbits.URSTIE && UIRbits.URSTIF) 
000406   a069     btfss	0x69, 0, 0         	BTFSS	_UIEbits, 0
000408   ef0b     goto	0x416               	GOTO	_00141_DS_
00040a   f002
00040c   a068     btfss	0x68, 0, 0         	BTFSS	_UIRbits, 0
00040e   ef0b     goto	0x416               	GOTO	_00141_DS_
000410   f002
                                           ;	.line	127; usb.c	reset_usb();
000412   ec6e     call	0x12dc, 0           	CALL	_reset_usb
000414   f009
                                           _00141_DS_:
                                           ;	.line	131; usb.c	if(UIEbits.IDLEIE && UIRbits.IDLEIF)
000416   a869     btfss	0x69, 0x4, 0       	BTFSS	_UIEbits, 4
000418   ef14     goto	0x428               	GOTO	_00144_DS_
00041a   f002
00041c   a868     btfss	0x68, 0x4, 0       	BTFSS	_UIRbits, 4
00041e   ef14     goto	0x428               	GOTO	_00144_DS_
000420   f002
                                           ;	.line	134; usb.c	UIEbits.ACTIVIE = 1;
000422   8469     bsf	0x69, 0x2, 0         	BSF	_UIEbits, 2
                                           ;	.line	135; usb.c	UIRbits.IDLEIF  = 0;
000424   9868     bcf	0x68, 0x4, 0         	BCF	_UIRbits, 4
                                           ;	.line	136; usb.c	UCONbits.SUSPND = 1;
000426   826d     bsf	0x6d, 0x1, 0         	BSF	_UCONbits, 1
                                           _00144_DS_:
                                           ;	.line	140; usb.c	if(UIEbits.STALLIE && UIRbits.STALLIF)
000428   aa69     btfss	0x69, 0x5, 0       	BTFSS	_UIEbits, 5
00042a   ef61     goto	0x4c2               	GOTO	_00149_DS_
00042c   f002
00042e   aa68     btfss	0x68, 0x5, 0       	BTFSS	_UIRbits, 5
000430   ef61     goto	0x4c2               	GOTO	_00149_DS_
000432   f002
                                           ;	.line	145; usb.c	if(UEP0bits.EPSTALL == 1)
000434   6a00     clrf	0, 0                	CLRF	r0x00
000436   b070     btfsc	0x70, 0, 0         	BTFSC	_UEP0bits, 0
000438   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00043a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00043c   0a01     xorlw	0x1                	XORLW	0x01
00043e   e102     bnz	0x444                	BNZ	_00180_DS_
000440   ef24     goto	0x448               	GOTO	_00181_DS_
000442   f002
                                           _00180_DS_:
000444   ef60     goto	0x4c0               	GOTO	_00147_DS_
000446   f002
                                           ; ;multiply lit val:0x03 by variable _usb_active_cfg and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00181_DS_:
000448   0100     movlb	0                  	BANKSEL	_usb_active_cfg
                                           ;	.line	147; usb.c	ep_init[GET_ACTIVE_CONFIGURATION()][0]();
00044a   519f     movf	0x9f, 0, 0x1        	MOVF	_usb_active_cfg, W, B
00044c   0d03     mullw	0x3                	MULLW	0x03
00044e   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
000450   f000
000452   cff4     movff	0xff4, 0x1         	MOVFF	PRODH, r0x01
000454   f001
000456   0100     movlb	0                  	BANKSEL	_ep_init
000458   517b     movf	0x7b, 0, 0x1        	MOVF	_ep_init, W, B
00045a   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00045c   0100     movlb	0                  	BANKSEL	(_ep_init + 1)
00045e   517c     movf	0x7c, 0, 0x1        	MOVF	(_ep_init + 1), W, B
000460   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000462   0100     movlb	0                  	BANKSEL	(_ep_init + 2)
000464   517d     movf	0x7d, 0, 0x1        	MOVF	(_ep_init + 2), W, B
000466   6a02     clrf	0x2, 0              	CLRF	r0x02
000468   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00046a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00046c   ffe9
00046e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000470   fff3
000472   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000474   ec5b     call	0x1ab6, 0           	CALL	__gptrget3
000476   f00d
000478   6e00     movwf	0, 0               	MOVWF	r0x00
00047a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00047c   f001
00047e   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000480   f002
000482   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000484   ffe9
000486   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000488   fff3
00048a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00048c   ec5b     call	0x1ab6, 0           	CALL	__gptrget3
00048e   f00d
000490   6e00     movwf	0, 0               	MOVWF	r0x00
000492   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000494   f001
000496   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000498   f002
00049a   cff2     movff	0xff2, 0xfe5       	MOVFF	INTCON, POSTDEC1
00049c   ffe5
00049e   9ef2     bcf	0xf2, 0x7, 0         	BCF	INTCON, 7
0004a0   0005     push                     	PUSH	
0004a2   0ebe     movlw	0xbe               	MOVLW	LOW(_00182_DS_)
0004a4   6efd     movwf	0xfd, 0            	MOVWF	TOSL
0004a6   0e04     movlw	0x4                	MOVLW	HIGH(_00182_DS_)
0004a8   6efe     movwf	0xfe, 0            	MOVWF	TOSH
0004aa   0e00     movlw	0                  	MOVLW	UPPER(_00182_DS_)
0004ac   6eff     movwf	0xff, 0            	MOVWF	TOSU
0004ae   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
0004b0   6ef2     movwf	0xf2, 0            	MOVWF	INTCON
0004b2   c002     movff	0x2, 0xffb         	MOVFF	r0x02, PCLATU
0004b4   fffb
0004b6   c001     movff	0x1, 0xffa         	MOVFF	r0x01, PCLATH
0004b8   fffa
0004ba   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004bc   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00182_DS_:
                                           ;	.line	148; usb.c	UEP0bits.EPSTALL = 0;
0004be   9070     bcf	0x70, 0, 0           	BCF	_UEP0bits, 0
                                           _00147_DS_:
                                           ;	.line	150; usb.c	UIRbits.STALLIF = 0;
0004c0   9a68     bcf	0x68, 0x5, 0         	BCF	_UIRbits, 5
                                           _00149_DS_:
                                           ;	.line	156; usb.c	if((GET_DEVICE_STATE() >= DEFAULT_STATE) &&
0004c2   0e03     movlw	0x3                	MOVLW	0x03
0004c4   0100     movlb	0                  	BANKSEL	_usb_device_state
0004c6   5d9e     subwf	0x9e, 0, 0x1       	SUBWF	_usb_device_state, W, B
0004c8   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0004ca   efa4     goto	0x748               	GOTO	_00163_DS_
0004cc   f003
                                           ;	.line	157; usb.c	UIEbits.TRNIE && UIRbits.TRNIF)
0004ce   a669     btfss	0x69, 0x3, 0       	BTFSS	_UIEbits, 3
0004d0   efa4     goto	0x748               	GOTO	_00163_DS_
0004d2   f003
0004d4   a668     btfss	0x68, 0x3, 0       	BTFSS	_UIRbits, 3
0004d6   efa4     goto	0x748               	GOTO	_00163_DS_
0004d8   f003
                                           ;	.line	160; usb.c	if(USTATbits.DIR == OUT)
0004da   b46c     btfsc	0x6c, 0x2, 0       	BTFSC	_USTATbits, 2
0004dc   ef43     goto	0x686               	GOTO	_00157_DS_
0004de   f003
                                           ;	.line	162; usb.c	if(EP_OUT_BD(USTATbits.ENDP).Stat.PID == SETUP_TOKEN)
0004e0   506c     movf	0x6c, 0, 0          	MOVF	_USTATbits, W
0004e2   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
0004e4   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0004e6   0b0f     andlw	0xf                	ANDLW	0x0f
0004e8   6e00     movwf	0, 0               	MOVWF	r0x00
0004ea   5000     movf	0, 0, 0             	MOVF	r0x00, W
0004ec   2400     addwf	0, 0, 0            	ADDWF	r0x00, W
0004ee   6e01     movwf	0x1, 0             	MOVWF	r0x01
                                           ; ;multiply lit val:0x04 by variable r0x01 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
0004f0   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0004f2   0d04     mullw	0x4                	MULLW	0x04
0004f4   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
0004f6   f000
0004f8   0e00     movlw	0                  	MOVLW	LOW(_ep_bdt)
0004fa   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0004fc   0e04     movlw	0x4                	MOVLW	HIGH(_ep_bdt)
0004fe   6a01     clrf	0x1, 0              	CLRF	r0x01
000500   be00     btfsc	0, 0x7, 0          	BTFSC	r0x00, 7
000502   6801     setf	0x1, 0              	SETF	r0x01
000504   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000506   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000508   ffe9
00050a   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
00050c   ffea
00050e   50ef     movf	0xef, 0, 0          	MOVF	INDF0, W
000510   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
000512   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
000514   0b0f     andlw	0xf                	ANDLW	0x0f
000516   6e00     movwf	0, 0               	MOVWF	r0x00
000518   5000     movf	0, 0, 0             	MOVF	r0x00, W
00051a   0a0d     xorlw	0xd                	XORLW	0x0d
00051c   e102     bnz	0x522                	BNZ	_00184_DS_
00051e   ef93     goto	0x526               	GOTO	_00185_DS_
000520   f002
                                           _00184_DS_:
000522   efeb     goto	0x5d6               	GOTO	_00152_DS_
000524   f002
                                           ; ;multiply lit val:0x03 by variable _usb_active_cfg and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00185_DS_:
000526   0100     movlb	0                  	BANKSEL	_usb_active_cfg
                                           ;	.line	165; usb.c	ep_setup[GET_ACTIVE_CONFIGURATION()][USTATbits.ENDP]();
000528   519f     movf	0x9f, 0, 0x1        	MOVF	_usb_active_cfg, W, B
00052a   0d03     mullw	0x3                	MULLW	0x03
00052c   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
00052e   f000
000530   cff4     movff	0xff4, 0x1         	MOVFF	PRODH, r0x01
000532   f001
000534   0100     movlb	0                  	BANKSEL	_ep_setup
000536   517e     movf	0x7e, 0, 0x1        	MOVF	_ep_setup, W, B
000538   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00053a   0100     movlb	0                  	BANKSEL	(_ep_setup + 1)
00053c   517f     movf	0x7f, 0, 0x1        	MOVF	(_ep_setup + 1), W, B
00053e   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000540   0100     movlb	0                  	BANKSEL	(_ep_setup + 2)
000542   5180     movf	0x80, 0, 0x1        	MOVF	(_ep_setup + 2), W, B
000544   6a02     clrf	0x2, 0              	CLRF	r0x02
000546   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000548   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00054a   ffe9
00054c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00054e   fff3
000550   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000552   ec5b     call	0x1ab6, 0           	CALL	__gptrget3
000554   f00d
000556   6e00     movwf	0, 0               	MOVWF	r0x00
000558   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00055a   f001
00055c   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00055e   f002
000560   506c     movf	0x6c, 0, 0          	MOVF	_USTATbits, W
000562   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
000564   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
000566   0b0f     andlw	0xf                	ANDLW	0x0f
000568   6e03     movwf	0x3, 0             	MOVWF	r0x03
00056a   6a04     clrf	0x4, 0              	CLRF	r0x04
00056c   0e00     movlw	0                  	MOVLW	0x00
00056e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000570   0e03     movlw	0x3                	MOVLW	0x03
000572   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000574   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000576   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000578   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00057a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00057c   ec5c     call	0x18b8, 0           	CALL	__mulint
00057e   f00c
000580   6e03     movwf	0x3, 0             	MOVWF	r0x03
000582   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
000584   f004
000586   0e04     movlw	0x4                	MOVLW	0x04
000588   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00058a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00058c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00058e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000590   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000592   6ae8     clrf	0xe8, 0             	CLRF	WREG
000594   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000596   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000598   ffe9
00059a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00059c   fff3
00059e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0005a0   ec5b     call	0x1ab6, 0           	CALL	__gptrget3
0005a2   f00d
0005a4   6e00     movwf	0, 0               	MOVWF	r0x00
0005a6   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0005a8   f001
0005aa   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0005ac   f002
0005ae   cff2     movff	0xff2, 0xfe5       	MOVFF	INTCON, POSTDEC1
0005b0   ffe5
0005b2   9ef2     bcf	0xf2, 0x7, 0         	BCF	INTCON, 7
0005b4   0005     push                     	PUSH	
0005b6   0ed2     movlw	0xd2               	MOVLW	LOW(_00186_DS_)
0005b8   6efd     movwf	0xfd, 0            	MOVWF	TOSL
0005ba   0e05     movlw	0x5                	MOVLW	HIGH(_00186_DS_)
0005bc   6efe     movwf	0xfe, 0            	MOVWF	TOSH
0005be   0e00     movlw	0                  	MOVLW	UPPER(_00186_DS_)
0005c0   6eff     movwf	0xff, 0            	MOVWF	TOSU
0005c2   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
0005c4   6ef2     movwf	0xf2, 0            	MOVWF	INTCON
0005c6   c002     movff	0x2, 0xffb         	MOVFF	r0x02, PCLATU
0005c8   fffb
0005ca   c001     movff	0x1, 0xffa         	MOVFF	r0x01, PCLATH
0005cc   fffa
0005ce   5000     movf	0, 0, 0             	MOVF	r0x00, W
0005d0   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00186_DS_:
0005d2   efa3     goto	0x746               	GOTO	_00158_DS_
0005d4   f003
                                           ; ;multiply lit val:0x03 by variable _usb_active_cfg and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00152_DS_:
0005d6   0100     movlb	0                  	BANKSEL	_usb_active_cfg
                                           ;	.line	170; usb.c	ep_out[GET_ACTIVE_CONFIGURATION()][USTATbits.ENDP]();
0005d8   519f     movf	0x9f, 0, 0x1        	MOVF	_usb_active_cfg, W, B
0005da   0d03     mullw	0x3                	MULLW	0x03
0005dc   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
0005de   f000
0005e0   cff4     movff	0xff4, 0x1         	MOVFF	PRODH, r0x01
0005e2   f001
0005e4   0100     movlb	0                  	BANKSEL	_ep_out
0005e6   5181     movf	0x81, 0, 0x1        	MOVF	_ep_out, W, B
0005e8   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0005ea   0100     movlb	0                  	BANKSEL	(_ep_out + 1)
0005ec   5182     movf	0x82, 0, 0x1        	MOVF	(_ep_out + 1), W, B
0005ee   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0005f0   0100     movlb	0                  	BANKSEL	(_ep_out + 2)
0005f2   5183     movf	0x83, 0, 0x1        	MOVF	(_ep_out + 2), W, B
0005f4   6a02     clrf	0x2, 0              	CLRF	r0x02
0005f6   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0005f8   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0005fa   ffe9
0005fc   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0005fe   fff3
000600   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000602   ec5b     call	0x1ab6, 0           	CALL	__gptrget3
000604   f00d
000606   6e00     movwf	0, 0               	MOVWF	r0x00
000608   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00060a   f001
00060c   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00060e   f002
000610   506c     movf	0x6c, 0, 0          	MOVF	_USTATbits, W
000612   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
000614   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
000616   0b0f     andlw	0xf                	ANDLW	0x0f
000618   6e03     movwf	0x3, 0             	MOVWF	r0x03
00061a   6a04     clrf	0x4, 0              	CLRF	r0x04
00061c   0e00     movlw	0                  	MOVLW	0x00
00061e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000620   0e03     movlw	0x3                	MOVLW	0x03
000622   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000624   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000626   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
000628   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00062a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00062c   ec5c     call	0x18b8, 0           	CALL	__mulint
00062e   f00c
000630   6e03     movwf	0x3, 0             	MOVWF	r0x03
000632   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
000634   f004
000636   0e04     movlw	0x4                	MOVLW	0x04
000638   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00063a   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00063c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00063e   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000640   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000642   6ae8     clrf	0xe8, 0             	CLRF	WREG
000644   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000646   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000648   ffe9
00064a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00064c   fff3
00064e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000650   ec5b     call	0x1ab6, 0           	CALL	__gptrget3
000652   f00d
000654   6e00     movwf	0, 0               	MOVWF	r0x00
000656   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
000658   f001
00065a   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
00065c   f002
00065e   cff2     movff	0xff2, 0xfe5       	MOVFF	INTCON, POSTDEC1
000660   ffe5
000662   9ef2     bcf	0xf2, 0x7, 0         	BCF	INTCON, 7
000664   0005     push                     	PUSH	
000666   0e82     movlw	0x82               	MOVLW	LOW(_00187_DS_)
000668   6efd     movwf	0xfd, 0            	MOVWF	TOSL
00066a   0e06     movlw	0x6                	MOVLW	HIGH(_00187_DS_)
00066c   6efe     movwf	0xfe, 0            	MOVWF	TOSH
00066e   0e00     movlw	0                  	MOVLW	UPPER(_00187_DS_)
000670   6eff     movwf	0xff, 0            	MOVWF	TOSU
000672   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000674   6ef2     movwf	0xf2, 0            	MOVWF	INTCON
000676   c002     movff	0x2, 0xffb         	MOVFF	r0x02, PCLATU
000678   fffb
00067a   c001     movff	0x1, 0xffa         	MOVFF	r0x01, PCLATH
00067c   fffa
00067e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000680   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00187_DS_:
000682   efa3     goto	0x746               	GOTO	_00158_DS_
000684   f003
                                           _00157_DS_:
                                           ;	.line	173; usb.c	else if(USTATbits.DIR == IN)
000686   6a00     clrf	0, 0                	CLRF	r0x00
000688   b46c     btfsc	0x6c, 0x2, 0       	BTFSC	_USTATbits, 2
00068a   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
00068c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00068e   0a01     xorlw	0x1                	XORLW	0x01
000690   e102     bnz	0x696                	BNZ	_00188_DS_
000692   ef4d     goto	0x69a               	GOTO	_00189_DS_
000694   f003
                                           _00188_DS_:
000696   efa3     goto	0x746               	GOTO	_00158_DS_
000698   f003
                                           ; ;multiply lit val:0x03 by variable _usb_active_cfg and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00189_DS_:
00069a   0100     movlb	0                  	BANKSEL	_usb_active_cfg
                                           ;	.line	176; usb.c	ep_in[GET_ACTIVE_CONFIGURATION()][USTATbits.ENDP]();
00069c   519f     movf	0x9f, 0, 0x1        	MOVF	_usb_active_cfg, W, B
00069e   0d03     mullw	0x3                	MULLW	0x03
0006a0   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
0006a2   f000
0006a4   cff4     movff	0xff4, 0x1         	MOVFF	PRODH, r0x01
0006a6   f001
0006a8   0100     movlb	0                  	BANKSEL	_ep_in
0006aa   5184     movf	0x84, 0, 0x1        	MOVF	_ep_in, W, B
0006ac   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0006ae   0100     movlb	0                  	BANKSEL	(_ep_in + 1)
0006b0   5185     movf	0x85, 0, 0x1        	MOVF	(_ep_in + 1), W, B
0006b2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0006b4   0100     movlb	0                  	BANKSEL	(_ep_in + 2)
0006b6   5186     movf	0x86, 0, 0x1        	MOVF	(_ep_in + 2), W, B
0006b8   6a02     clrf	0x2, 0              	CLRF	r0x02
0006ba   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0006bc   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0006be   ffe9
0006c0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0006c2   fff3
0006c4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0006c6   ec5b     call	0x1ab6, 0           	CALL	__gptrget3
0006c8   f00d
0006ca   6e00     movwf	0, 0               	MOVWF	r0x00
0006cc   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0006ce   f001
0006d0   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
0006d2   f002
0006d4   506c     movf	0x6c, 0, 0          	MOVF	_USTATbits, W
0006d6   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
0006d8   44e8     rlncf	0xe8, 0, 0         	RLNCF	WREG, W
0006da   0b0f     andlw	0xf                	ANDLW	0x0f
0006dc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0006de   6a04     clrf	0x4, 0              	CLRF	r0x04
0006e0   0e00     movlw	0                  	MOVLW	0x00
0006e2   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006e4   0e03     movlw	0x3                	MOVLW	0x03
0006e6   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006e8   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0006ea   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006ec   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0006ee   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0006f0   ec5c     call	0x18b8, 0           	CALL	__mulint
0006f2   f00c
0006f4   6e03     movwf	0x3, 0             	MOVWF	r0x03
0006f6   cff3     movff	0xff3, 0x4         	MOVFF	PRODL, r0x04
0006f8   f004
0006fa   0e04     movlw	0x4                	MOVLW	0x04
0006fc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
0006fe   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000700   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000702   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000704   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000706   6ae8     clrf	0xe8, 0             	CLRF	WREG
000708   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00070a   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00070c   ffe9
00070e   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000710   fff3
000712   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000714   ec5b     call	0x1ab6, 0           	CALL	__gptrget3
000716   f00d
000718   6e00     movwf	0, 0               	MOVWF	r0x00
00071a   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
00071c   f001
00071e   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000720   f002
000722   cff2     movff	0xff2, 0xfe5       	MOVFF	INTCON, POSTDEC1
000724   ffe5
000726   9ef2     bcf	0xf2, 0x7, 0         	BCF	INTCON, 7
000728   0005     push                     	PUSH	
00072a   0e46     movlw	0x46               	MOVLW	LOW(_00190_DS_)
00072c   6efd     movwf	0xfd, 0            	MOVWF	TOSL
00072e   0e07     movlw	0x7                	MOVLW	HIGH(_00190_DS_)
000730   6efe     movwf	0xfe, 0            	MOVWF	TOSH
000732   0e00     movlw	0                  	MOVLW	UPPER(_00190_DS_)
000734   6eff     movwf	0xff, 0            	MOVWF	TOSU
000736   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000738   6ef2     movwf	0xf2, 0            	MOVWF	INTCON
00073a   c002     movff	0x2, 0xffb         	MOVFF	r0x02, PCLATU
00073c   fffb
00073e   c001     movff	0x1, 0xffa         	MOVFF	r0x01, PCLATH
000740   fffa
000742   5000     movf	0, 0, 0             	MOVF	r0x00, W
000744   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00190_DS_:
                                           _00158_DS_:
                                           ;	.line	180; usb.c	UIRbits.TRNIF = 0;
000746   9668     bcf	0x68, 0x3, 0         	BCF	_UIRbits, 3
                                           _00163_DS_:
000748   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00074a   f004
00074c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00074e   f003
000750   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000752   f002
000754   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000756   f001
000758   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00075a   f000
00075c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00075e   ffd9
000760   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__usb_sleep	code
                                           _usb_sleep:
                                           ;	.line	97; usb.c	void usb_sleep(void)
001c04   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001c06   ffe5
001c08   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001c0a   ffd9
                                           ;	.line	101; usb.c	if(UCONbits.SUSPND)
001c0c   a26d     btfss	0x6d, 0x1, 0       	BTFSS	_UCONbits, 1
001c0e   ef0c     goto	0x1c18              	GOTO	_00132_DS_
001c10   f00e
                                           ;	.line	108; usb.c	PIE2bits.USBIE = 1; 
001c12   8aa0     bsf	0xa0, 0x5, 0         	BSF	_PIE2bits, 5
001c14   0003     sleep                    	sleep 
                                           ;	.line	110; usb.c	PIR2bits.USBIF = 0;
001c16   9aa1     bcf	0xa1, 0x5, 0         	BCF	_PIR2bits, 5
                                           _00132_DS_:
001c18   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001c1a   ffd9
001c1c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__reset_usb	code
                                           _reset_usb:
                                           ;	.line	62; usb.c	void reset_usb(void)
0012dc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0012de   ffe5
0012e0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0012e2   ffd9
0012e4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0012e6   ffe5
0012e8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0012ea   ffe5
0012ec   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0012ee   ffe5
0012f0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0012f2   ffe5
0012f4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0012f6   ffe5
0012f8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0012fa   ffe5
0012fc   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0012fe   ffe5
                                           ;	.line	67; usb.c	UIR = 0;
001300   6a68     clrf	0x68, 0             	CLRF	_UIR
                                           ;	.line	68; usb.c	UIE = 0x7b;
001302   0e7b     movlw	0x7b               	MOVLW	0x7b
001304   6e69     movwf	0x69, 0            	MOVWF	_UIE
                                           ;	.line	69; usb.c	UEIE = 0;
001306   6a6b     clrf	0x6b, 0             	CLRF	_UEIE
                                           ;	.line	70; usb.c	UADDR = 0x00;
001308   6a6e     clrf	0x6e, 0             	CLRF	_UADDR
                                           _00110_DS_:
                                           ;	.line	72; usb.c	while(UIRbits.TRNIF)
00130a   a668     btfss	0x68, 0x3, 0       	BTFSS	_UIRbits, 3
00130c   ef8b     goto	0x1316              	GOTO	_00112_DS_
00130e   f009
                                           ;	.line	74; usb.c	UIRbits.TRNIF = 0;
001310   9668     bcf	0x68, 0x3, 0         	BCF	_UIRbits, 3
001312   ef85     goto	0x130a              	GOTO	_00110_DS_
001314   f009
                                           _00112_DS_:
                                           ;	.line	78; usb.c	SET_DEVICE_STATE(DEFAULT_STATE);
001316   0e03     movlw	0x3                	MOVLW	0x03
001318   0100     movlb	0                  	BANKSEL	_usb_device_state
00131a   6f9e     movwf	0x9e, 0x1          	MOVWF	_usb_device_state, B
00131c   0100     movlb	0                  	BANKSEL	_usb_active_cfg
                                           ;	.line	81; usb.c	SET_ACTIVE_CONFIGURATION(0);
00131e   6b9f     clrf	0x9f, 0x1           	CLRF	_usb_active_cfg, B
001320   0100     movlb	0                  	BANKSEL	_usb_active_alt_setting
                                           ;	.line	82; usb.c	SET_ACTIVE_ALTERNATE_SETTING(0);
001322   6b9d     clrf	0x9d, 0x1           	CLRF	_usb_active_alt_setting, B
                                           ;	.line	84; usb.c	UEP0  = 0; UEP1  = 0; UEP2  = 0; UEP3  = 0;
001324   6a70     clrf	0x70, 0             	CLRF	_UEP0
001326   6a71     clrf	0x71, 0             	CLRF	_UEP1
001328   6a72     clrf	0x72, 0             	CLRF	_UEP2
00132a   6a73     clrf	0x73, 0             	CLRF	_UEP3
                                           ;	.line	85; usb.c	UEP4  = 0; UEP5  = 0; UEP6  = 0; UEP7  = 0;
00132c   6a74     clrf	0x74, 0             	CLRF	_UEP4
00132e   6a75     clrf	0x75, 0             	CLRF	_UEP5
001330   6a76     clrf	0x76, 0             	CLRF	_UEP6
001332   6a77     clrf	0x77, 0             	CLRF	_UEP7
                                           ;	.line	86; usb.c	UEP8  = 0; UEP9  = 0; UEP10 = 0; UEP11 = 0;
001334   6a78     clrf	0x78, 0             	CLRF	_UEP8
001336   6a79     clrf	0x79, 0             	CLRF	_UEP9
001338   6a7a     clrf	0x7a, 0             	CLRF	_UEP10
00133a   6a7b     clrf	0x7b, 0             	CLRF	_UEP11
                                           ;	.line	87; usb.c	UEP12 = 0; UEP13 = 0; UEP14 = 0; UEP15 = 0;
00133c   6a7c     clrf	0x7c, 0             	CLRF	_UEP12
00133e   6a7d     clrf	0x7d, 0             	CLRF	_UEP13
001340   6a7e     clrf	0x7e, 0             	CLRF	_UEP14
001342   6a7f     clrf	0x7f, 0             	CLRF	_UEP15
                                           ;	.line	89; usb.c	UCONbits.PKTDIS = 0;
001344   986d     bcf	0x6d, 0x4, 0         	BCF	_UCONbits, 4
                                           ;	.line	91; usb.c	for(i = 0; i < 16; i++)
001346   0e10     movlw	0x10               	MOVLW	0x10
001348   6e00     movwf	0, 0               	MOVWF	r0x00
                                           _00115_DS_:
                                           ;	.line	93; usb.c	ep_init[0][i]();
00134a   c07b     movff	0x7b, 0x1          	MOVFF	_ep_init, r0x01
00134c   f001
00134e   c07c     movff	0x7c, 0x2          	MOVFF	(_ep_init + 1), r0x02
001350   f002
001352   c07d     movff	0x7d, 0x3          	MOVFF	(_ep_init + 2), r0x03
001354   f003
001356   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
001358   ffe9
00135a   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
00135c   fff3
00135e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001360   ec5b     call	0x1ab6, 0           	CALL	__gptrget3
001362   f00d
001364   6e01     movwf	0x1, 0             	MOVWF	r0x01
001366   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
001368   f002
00136a   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
00136c   f003
00136e   0400     decf	0, 0, 0             	DECF	r0x00, W
001370   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ; ;multiply lit val:0x03 by variable r0x04 and store in r0x05
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
001372   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001374   0d03     mullw	0x3                	MULLW	0x03
001376   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
001378   f005
00137a   cff4     movff	0xff4, 0x6         	MOVFF	PRODH, r0x06
00137c   f006
00137e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001380   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
001382   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
001384   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
001386   6ae8     clrf	0xe8, 0             	CLRF	WREG
001388   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00138a   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
00138c   ffe9
00138e   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
001390   fff3
001392   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001394   ec5b     call	0x1ab6, 0           	CALL	__gptrget3
001396   f00d
001398   6e01     movwf	0x1, 0             	MOVWF	r0x01
00139a   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
00139c   f002
00139e   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
0013a0   f003
0013a2   cff2     movff	0xff2, 0xfe5       	MOVFF	INTCON, POSTDEC1
0013a4   ffe5
0013a6   9ef2     bcf	0xf2, 0x7, 0         	BCF	INTCON, 7
0013a8   0005     push                     	PUSH	
0013aa   0ec6     movlw	0xc6               	MOVLW	LOW(_00122_DS_)
0013ac   6efd     movwf	0xfd, 0            	MOVWF	TOSL
0013ae   0e13     movlw	0x13               	MOVLW	HIGH(_00122_DS_)
0013b0   6efe     movwf	0xfe, 0            	MOVWF	TOSH
0013b2   0e00     movlw	0                  	MOVLW	UPPER(_00122_DS_)
0013b4   6eff     movwf	0xff, 0            	MOVWF	TOSU
0013b6   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
0013b8   6ef2     movwf	0xf2, 0            	MOVWF	INTCON
0013ba   c003     movff	0x3, 0xffb         	MOVFF	r0x03, PCLATU
0013bc   fffb
0013be   c002     movff	0x2, 0xffa         	MOVFF	r0x02, PCLATH
0013c0   fffa
0013c2   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0013c4   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00122_DS_:
0013c6   c004     movff	0x4, 0             	MOVFF	r0x04, r0x00
0013c8   f000
                                           ;	.line	91; usb.c	for(i = 0; i < 16; i++)
0013ca   5000     movf	0, 0, 0             	MOVF	r0x00, W
0013cc   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
0013ce   efa5     goto	0x134a              	GOTO	_00115_DS_
0013d0   f009
0013d2   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0013d4   f006
0013d6   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0013d8   f005
0013da   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0013dc   f004
0013de   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0013e0   f003
0013e2   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0013e4   f002
0013e6   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0013e8   f001
0013ea   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0013ec   f000
0013ee   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0013f0   ffd9
0013f2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_usb__init_usb	code
                                           _init_usb:
                                           ;	.line	45; usb.c	void init_usb(void)
001aec   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001aee   ffe5
001af0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001af2   ffd9
                                           ;	.line	47; usb.c	UIE  = 0;
001af4   6a69     clrf	0x69, 0             	CLRF	_UIE
                                           ;	.line	48; usb.c	UCFG = 0x14;
001af6   0e14     movlw	0x14               	MOVLW	0x14
001af8   6e6f     movwf	0x6f, 0            	MOVWF	_UCFG
                                           ;	.line	49; usb.c	UCON = 0x08;
001afa   0e08     movlw	0x8                	MOVLW	0x08
001afc   6e6d     movwf	0x6d, 0            	MOVWF	_UCON
                                           _00105_DS_:
                                           ;	.line	50; usb.c	while(UCONbits.SE0);
001afe   ba6d     btfsc	0x6d, 0x5, 0       	BTFSC	_UCONbits, 5
001b00   ef7f     goto	0x1afe              	GOTO	_00105_DS_
001b02   f00d
                                           ;	.line	51; usb.c	UIR  = 0;
001b04   6a68     clrf	0x68, 0             	CLRF	_UIR
                                           ;	.line	52; usb.c	UIE  = 0x11;
001b06   0e11     movlw	0x11               	MOVLW	0x11
001b08   6e69     movwf	0x69, 0            	MOVWF	_UIE
                                           ;	.line	55; usb.c	SET_DEVICE_STATE(POWERED_STATE);
001b0a   0e02     movlw	0x2                	MOVLW	0x02
001b0c   0100     movlb	0                  	BANKSEL	_usb_device_state
001b0e   6f9e     movwf	0x9e, 0x1          	MOVWF	_usb_device_state, B
001b10   0100     movlb	0                  	BANKSEL	_usb_active_cfg
                                           ;	.line	58; usb.c	SET_ACTIVE_CONFIGURATION(0);
001b12   6b9f     clrf	0x9f, 0x1           	CLRF	_usb_active_cfg, B
001b14   0100     movlb	0                  	BANKSEL	_usb_active_alt_setting
                                           ;	.line	59; usb.c	SET_ACTIVE_ALTERNATE_SETTING(0);
001b16   6b9d     clrf	0x9d, 0x1           	CLRF	_usb_active_alt_setting, B
001b18   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001b1a   ffd9
001b1c   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1760 (0x06e0) bytes ( 1.34%)
                                           ;           	  880 (0x0370) words
                                           ; udata size:	  152 (0x0098) bytes ( 8.48%)
                                           ; access size:	   14 (0x000e) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Aug 16 2006)
                                           ; This file generated Fri Sep 15 11:04:57 2006
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4455
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _null_function
                                           	global _boot_device_descriptor
                                           	global _boot_default_cfg
                                           	global _boot_flash_cfg
                                           	global _boot_configuration_descriptor
                                           	global _str0
                                           	global _str1
                                           	global _str2
                                           	global _str3
                                           	global _str4
                                           	global _str5
                                           	global _boot_string_descriptor
                                           	global _boot_ep_init
                                           	global _boot_ep_in
                                           	global _boot_ep_out
                                           	global _boot_ep_setup
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _ep0_init
                                           	extern _ep1_init
                                           	extern _ep2_init
                                           	extern _ep0_in
                                           	extern _ep2_in
                                           	extern _ep1_out
                                           	extern _ep0_setup
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_usb_descriptors__null_function	code
                                           _null_function:
                                           ;	.line	171; usb_descriptors.c	void null_function() //__naked
001ca2   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001ca4   ffe5
001ca6   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001ca8   ffd9
                                           ;	.line	176; usb_descriptors.c	}
001caa   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001cac   ffd9
001cae   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _boot_device_descriptor:
00076c   0112     movlb	0x12               	DB	0x12, 0x01, 0x00, 0x02, 0xff, 0x00, 0xff, 0x08, 0xa5, 0xa5, 0x01, 0x00
00076e   0200     mulwf	0, 0               
000770   00ff     reset                    
000772   08ff     sublw	0xff               
000774   a5a5     btfss	0xa5, 0x2, 0x1     
000776   0001     dw	0x1  ;unknown opcode  
000778   0100     movlb	0                  	DB	0x00, 0x01, 0x01, 0x02, 0x03, 0x02
00077a   0201     mulwf	0x1, 0             
00077c   0203     mulwf	0x3, 0             
                                           ; ; Starting pCode block for Ival
                                           _boot_default_cfg:
00077e   0209     mulwf	0x9, 0             	DB	0x09, 0x02, 0x12, 0x00, 0x01, 0x01, 0x04, 0xc0, 0x00, 0x09, 0x04, 0x00
000780   0012     return	0                 
000782   0101     movlb	0x1                
000784   c004     movff	0x4, 0x900         
000786   0900
000788   0004     clrwdt                   
00078a   0000     nop                      	DB	0x00, 0x00, 0xff, 0xff, 0xff, 0x04
00078c   ffff     dw	0xffff  ;unknown opcode 
00078e   04ff     decf	0xff, 0, 0          
                                           ; ; Starting pCode block for Ival
                                           _boot_flash_cfg:
000790   0209     mulwf	0x9, 0             	DB	0x09, 0x02, 0x20, 0x00, 0x01, 0x02, 0x05, 0xc0, 0x00, 0x09, 0x04, 0x00
000792   0020     dw	0x20  ;unknown opcode 
000794   0201     mulwf	0x1, 0             
000796   c005     movff	0x5, 0x900         
000798   0900
00079a   0004     clrwdt                   
00079c   0200     mulwf	0, 0               	DB	0x00, 0x02, 0xff, 0xff, 0xff, 0x05, 0x07, 0x05, 0x01, 0x02, 0x40, 0x00
00079e   ffff     dw	0xffff  ;unknown opcode 
0007a0   05ff     decf	0xff, 0, 0x1        
0007a2   0507     decf	0x7, 0, 0x1         
0007a4   0201     mulwf	0x1, 0             
0007a6   0040     dw	0x40  ;unknown opcode 
0007a8   0700     decf	0, 0x1, 0x1         	DB	0x00, 0x07, 0x05, 0x82, 0x02, 0x40, 0x00, 0x00
0007aa   8205     bsf	0x5, 0x1, 0          
0007ac   4002     rrncf	0x2, 0, 0          
0007ae   0000     nop                      
                                           ; ; Starting pCode block for Ival
                                           _boot_configuration_descriptor:
0007b0   077e     decf	0x7e, 0x1, 0x1      	DB	LOW(_boot_default_cfg), HIGH(_boot_default_cfg), UPPER(_boot_default_cfg), LOW(_boot_flash_cfg), HIGH(_boot_flash_cfg), UPPER(_boot_flash_cfg)
0007b2   9000     bcf	0, 0, 0              
0007b4   0007     daw                      
                                           ; ; Starting pCode block for Ival
                                           _str0:
0007b6   0304     mulwf	0x4, 0x1           	DB	0x04, 0x03, 0x09, 0x04
0007b8   0409     decf	0x9, 0, 0           
                                           ; ; Starting pCode block for Ival
                                           _str1:
0007ba   031c     mulwf	0x1c, 0x1          	DB	0x1c, 0x03, 0x56, 0x00, 0x61, 0x00, 0x73, 0x00, 0x63, 0x00, 0x6f, 0x00
0007bc   0056     dw	0x56  ;unknown opcode 
0007be   0061     dw	0x61  ;unknown opcode 
0007c0   0073     dw	0x73  ;unknown opcode 
0007c2   0063     dw	0x63  ;unknown opcode 
0007c4   006f     dw	0x6f  ;unknown opcode 
0007c6   0020     dw	0x20  ;unknown opcode 	DB	0x20, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6f, 0x00, 0x6a, 0x00, 0x65, 0x00
0007c8   0050     dw	0x50  ;unknown opcode 
0007ca   0072     dw	0x72  ;unknown opcode 
0007cc   006f     dw	0x6f  ;unknown opcode 
0007ce   006a     dw	0x6a  ;unknown opcode 
0007d0   0065     dw	0x65  ;unknown opcode 
0007d2   0063     dw	0x63  ;unknown opcode 	DB	0x63, 0x00, 0x74, 0x00
0007d4   0074     dw	0x74  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _str2:
0007d6   0324     mulwf	0x24, 0x1          	DB	0x24, 0x03, 0x50, 0x00, 0x65, 0x00, 0x72, 0x00, 0x69, 0x00, 0x70, 0x00
0007d8   0050     dw	0x50  ;unknown opcode 
0007da   0065     dw	0x65  ;unknown opcode 
0007dc   0072     dw	0x72  ;unknown opcode 
0007de   0069     dw	0x69  ;unknown opcode 
0007e0   0070     dw	0x70  ;unknown opcode 
0007e2   0068     dw	0x68  ;unknown opcode 	DB	0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6c, 0x00, 0x20, 0x00
0007e4   0065     dw	0x65  ;unknown opcode 
0007e6   0072     dw	0x72  ;unknown opcode 
0007e8   0061     dw	0x61  ;unknown opcode 
0007ea   006c     dw	0x6c  ;unknown opcode 
0007ec   0020     dw	0x20  ;unknown opcode 
0007ee   006d     dw	0x6d  ;unknown opcode 	DB	0x6d, 0x00, 0x6f, 0x00, 0x64, 0x00, 0x75, 0x00, 0x6c, 0x00, 0x65, 0x00
0007f0   006f     dw	0x6f  ;unknown opcode 
0007f2   0064     dw	0x64  ;unknown opcode 
0007f4   0075     dw	0x75  ;unknown opcode 
0007f6   006c     dw	0x6c  ;unknown opcode 
0007f8   0065     dw	0x65  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _str3:
0007fa   0304     mulwf	0x4, 0x1           	DB	0x04, 0x03, 0x31, 0x00
0007fc   0031     dw	0x31  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _str4:
0007fe   0310     mulwf	0x10, 0x1          	DB	0x10, 0x03, 0x44, 0x00, 0x65, 0x00, 0x66, 0x00, 0x61, 0x00, 0x75, 0x00
000800   0044     dw	0x44  ;unknown opcode 
000802   0065     dw	0x65  ;unknown opcode 
000804   0066     dw	0x66  ;unknown opcode 
000806   0061     dw	0x61  ;unknown opcode 
000808   0075     dw	0x75  ;unknown opcode 
00080a   006c     dw	0x6c  ;unknown opcode 	DB	0x6c, 0x00, 0x74, 0x00
00080c   0074     dw	0x74  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _str5:
00080e   030c     mulwf	0xc, 0x1           	DB	0x0c, 0x03, 0x46, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x73, 0x00, 0x68, 0x00
000810   0046     dw	0x46  ;unknown opcode 
000812   006c     dw	0x6c  ;unknown opcode 
000814   0061     dw	0x61  ;unknown opcode 
000816   0073     dw	0x73  ;unknown opcode 
000818   0068     dw	0x68  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _boot_string_descriptor:
00081a   07b6     decf	0xb6, 0x1, 0x1      	DB	LOW(_str0), HIGH(_str0), UPPER(_str0), LOW(_str1), HIGH(_str1), UPPER(_str1), LOW(_str2), HIGH(_str2), UPPER(_str2), LOW(_str3), HIGH(_str3), UPPER(_str3)
00081c   ba00     btfsc	0, 0x5, 0          
00081e   0007     daw                      
000820   07d6     decf	0xd6, 0x1, 0x1      
000822   fa00     dw	0xfa00  ;unknown opcode 
000824   0007     daw                      
000826   07fe     decf	0xfe, 0x1, 0x1      	DB	LOW(_str4), HIGH(_str4), UPPER(_str4), LOW(_str5), HIGH(_str5), UPPER(_str5)
000828   0e00     movlw	0                  
00082a   0008     tblrd	*                  
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_init_cfg0:
00082c   1b1e     xorwf	0x1e, 0x1, 0x1     	DB	LOW(_ep0_init), HIGH(_ep0_init), UPPER(_ep0_init), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
00082e   a200     btfss	0, 0x1, 0          
000830   001c     dw	0x1c  ;unknown opcode 
000832   1ca2     comf	0xa2, 0, 0          
000834   a200     btfss	0, 0x1, 0          
000836   001c     dw	0x1c  ;unknown opcode 
000838   1ca2     comf	0xa2, 0, 0          	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
00083a   a200     btfss	0, 0x1, 0          
00083c   001c     dw	0x1c  ;unknown opcode 
00083e   1ca2     comf	0xa2, 0, 0          
000840   a200     btfss	0, 0x1, 0          
000842   001c     dw	0x1c  ;unknown opcode 
000844   1ca2     comf	0xa2, 0, 0          	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000846   a200     btfss	0, 0x1, 0          
000848   001c     dw	0x1c  ;unknown opcode 
00084a   1ca2     comf	0xa2, 0, 0          
00084c   a200     btfss	0, 0x1, 0          
00084e   001c     dw	0x1c  ;unknown opcode 
000850   1ca2     comf	0xa2, 0, 0          	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000852   a200     btfss	0, 0x1, 0          
000854   001c     dw	0x1c  ;unknown opcode 
000856   1ca2     comf	0xa2, 0, 0          
000858   a200     btfss	0, 0x1, 0          
00085a   001c     dw	0x1c  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_init_cfg1:
00085c   1b1e     xorwf	0x1e, 0x1, 0x1     	DB	LOW(_ep0_init), HIGH(_ep0_init), UPPER(_ep0_init), LOW(_ep1_init), HIGH(_ep1_init), UPPER(_ep1_init), LOW(_ep2_init), HIGH(_ep2_init), UPPER(_ep2_init), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
00085e   7a00     btg	0, 0x5, 0            
000860   001b     dw	0x1b  ;unknown opcode 
000862   1c1e     comf	0x1e, 0, 0          
000864   a200     btfss	0, 0x1, 0          
000866   001c     dw	0x1c  ;unknown opcode 
000868   1ca2     comf	0xa2, 0, 0          	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
00086a   a200     btfss	0, 0x1, 0          
00086c   001c     dw	0x1c  ;unknown opcode 
00086e   1ca2     comf	0xa2, 0, 0          
000870   a200     btfss	0, 0x1, 0          
000872   001c     dw	0x1c  ;unknown opcode 
000874   1ca2     comf	0xa2, 0, 0          	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000876   a200     btfss	0, 0x1, 0          
000878   001c     dw	0x1c  ;unknown opcode 
00087a   1ca2     comf	0xa2, 0, 0          
00087c   a200     btfss	0, 0x1, 0          
00087e   001c     dw	0x1c  ;unknown opcode 
000880   1ca2     comf	0xa2, 0, 0          	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000882   a200     btfss	0, 0x1, 0          
000884   001c     dw	0x1c  ;unknown opcode 
000886   1ca2     comf	0xa2, 0, 0          
000888   a200     btfss	0, 0x1, 0          
00088a   001c     dw	0x1c  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_init:
00088c   082c     sublw	0x2c               	DB	LOW(_boot_ep_init_cfg0), HIGH(_boot_ep_init_cfg0), UPPER(_boot_ep_init_cfg0), LOW(_boot_ep_init_cfg0), HIGH(_boot_ep_init_cfg0), UPPER(_boot_ep_init_cfg0), LOW(_boot_ep_init_cfg1), HIGH(_boot_ep_init_cfg1), UPPER(_boot_ep_init_cfg1)
00088e   2c00     decfsz	0, 0, 0           
000890   0008     tblrd	*                  
000892   085c     sublw	0x5c               
000894   0000     nop                      
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_in_cfg0:
000896   14dc     andwf	0xdc, 0, 0         	DB	LOW(_ep0_in), HIGH(_ep0_in), UPPER(_ep0_in), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000898   a200     btfss	0, 0x1, 0          
00089a   001c     dw	0x1c  ;unknown opcode 
00089c   1ca2     comf	0xa2, 0, 0          
00089e   a200     btfss	0, 0x1, 0          
0008a0   001c     dw	0x1c  ;unknown opcode 
0008a2   1ca2     comf	0xa2, 0, 0          	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
0008a4   a200     btfss	0, 0x1, 0          
0008a6   001c     dw	0x1c  ;unknown opcode 
0008a8   1ca2     comf	0xa2, 0, 0          
0008aa   a200     btfss	0, 0x1, 0          
0008ac   001c     dw	0x1c  ;unknown opcode 
0008ae   1ca2     comf	0xa2, 0, 0          	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
0008b0   a200     btfss	0, 0x1, 0          
0008b2   001c     dw	0x1c  ;unknown opcode 
0008b4   1ca2     comf	0xa2, 0, 0          
0008b6   a200     btfss	0, 0x1, 0          
0008b8   001c     dw	0x1c  ;unknown opcode 
0008ba   1ca2     comf	0xa2, 0, 0          	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
0008bc   a200     btfss	0, 0x1, 0          
0008be   001c     dw	0x1c  ;unknown opcode 
0008c0   1ca2     comf	0xa2, 0, 0          
0008c2   a200     btfss	0, 0x1, 0          
0008c4   001c     dw	0x1c  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_in_cfg1:
0008c6   14dc     andwf	0xdc, 0, 0         	DB	LOW(_ep0_in), HIGH(_ep0_in), UPPER(_ep0_in), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_ep2_in), HIGH(_ep2_in), UPPER(_ep2_in), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
0008c8   a200     btfss	0, 0x1, 0          
0008ca   001c     dw	0x1c  ;unknown opcode 
0008cc   15be     andwf	0xbe, 0, 0x1       
0008ce   a200     btfss	0, 0x1, 0          
0008d0   001c     dw	0x1c  ;unknown opcode 
0008d2   1ca2     comf	0xa2, 0, 0          	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
0008d4   a200     btfss	0, 0x1, 0          
0008d6   001c     dw	0x1c  ;unknown opcode 
0008d8   1ca2     comf	0xa2, 0, 0          
0008da   a200     btfss	0, 0x1, 0          
0008dc   001c     dw	0x1c  ;unknown opcode 
0008de   1ca2     comf	0xa2, 0, 0          	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
0008e0   a200     btfss	0, 0x1, 0          
0008e2   001c     dw	0x1c  ;unknown opcode 
0008e4   1ca2     comf	0xa2, 0, 0          
0008e6   a200     btfss	0, 0x1, 0          
0008e8   001c     dw	0x1c  ;unknown opcode 
0008ea   1ca2     comf	0xa2, 0, 0          	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
0008ec   a200     btfss	0, 0x1, 0          
0008ee   001c     dw	0x1c  ;unknown opcode 
0008f0   1ca2     comf	0xa2, 0, 0          
0008f2   a200     btfss	0, 0x1, 0          
0008f4   001c     dw	0x1c  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_in:
0008f6   0896     sublw	0x96               	DB	LOW(_boot_ep_in_cfg0), HIGH(_boot_ep_in_cfg0), UPPER(_boot_ep_in_cfg0), LOW(_boot_ep_in_cfg0), HIGH(_boot_ep_in_cfg0), UPPER(_boot_ep_in_cfg0), LOW(_boot_ep_in_cfg1), HIGH(_boot_ep_in_cfg1), UPPER(_boot_ep_in_cfg1)
0008f8   9600     bcf	0, 0x3, 0            
0008fa   0008     tblrd	*                  
0008fc   08c6     sublw	0xc6               
0008fe   0000     nop                      
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_out_cfg0:
000900   1b1e     xorwf	0x1e, 0x1, 0x1     	DB	LOW(_ep0_init), HIGH(_ep0_init), UPPER(_ep0_init), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000902   a200     btfss	0, 0x1, 0          
000904   001c     dw	0x1c  ;unknown opcode 
000906   1ca2     comf	0xa2, 0, 0          
000908   a200     btfss	0, 0x1, 0          
00090a   001c     dw	0x1c  ;unknown opcode 
00090c   1ca2     comf	0xa2, 0, 0          	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
00090e   a200     btfss	0, 0x1, 0          
000910   001c     dw	0x1c  ;unknown opcode 
000912   1ca2     comf	0xa2, 0, 0          
000914   a200     btfss	0, 0x1, 0          
000916   001c     dw	0x1c  ;unknown opcode 
000918   1ca2     comf	0xa2, 0, 0          	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
00091a   a200     btfss	0, 0x1, 0          
00091c   001c     dw	0x1c  ;unknown opcode 
00091e   1ca2     comf	0xa2, 0, 0          
000920   a200     btfss	0, 0x1, 0          
000922   001c     dw	0x1c  ;unknown opcode 
000924   1ca2     comf	0xa2, 0, 0          	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000926   a200     btfss	0, 0x1, 0          
000928   001c     dw	0x1c  ;unknown opcode 
00092a   1ca2     comf	0xa2, 0, 0          
00092c   a200     btfss	0, 0x1, 0          
00092e   001c     dw	0x1c  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_out_cfg1:
000930   1b1e     xorwf	0x1e, 0x1, 0x1     	DB	LOW(_ep0_init), HIGH(_ep0_init), UPPER(_ep0_init), LOW(_ep1_out), HIGH(_ep1_out), UPPER(_ep1_out), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000932   d600     bra	0x534                
000934   0009     tblrd	*+                 
000936   1ca2     comf	0xa2, 0, 0          
000938   a200     btfss	0, 0x1, 0          
00093a   001c     dw	0x1c  ;unknown opcode 
00093c   1ca2     comf	0xa2, 0, 0          	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
00093e   a200     btfss	0, 0x1, 0          
000940   001c     dw	0x1c  ;unknown opcode 
000942   1ca2     comf	0xa2, 0, 0          
000944   a200     btfss	0, 0x1, 0          
000946   001c     dw	0x1c  ;unknown opcode 
000948   1ca2     comf	0xa2, 0, 0          	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
00094a   a200     btfss	0, 0x1, 0          
00094c   001c     dw	0x1c  ;unknown opcode 
00094e   1ca2     comf	0xa2, 0, 0          
000950   a200     btfss	0, 0x1, 0          
000952   001c     dw	0x1c  ;unknown opcode 
000954   1ca2     comf	0xa2, 0, 0          	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000956   a200     btfss	0, 0x1, 0          
000958   001c     dw	0x1c  ;unknown opcode 
00095a   1ca2     comf	0xa2, 0, 0          
00095c   a200     btfss	0, 0x1, 0          
00095e   001c     dw	0x1c  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_out:
000960   0900     iorlw	0                  	DB	LOW(_boot_ep_out_cfg0), HIGH(_boot_ep_out_cfg0), UPPER(_boot_ep_out_cfg0), LOW(_boot_ep_out_cfg0), HIGH(_boot_ep_out_cfg0), UPPER(_boot_ep_out_cfg0), LOW(_boot_ep_out_cfg1), HIGH(_boot_ep_out_cfg1), UPPER(_boot_ep_out_cfg1)
000962   0000     nop                      
000964   0009     tblrd	*+                 
000966   0930     iorlw	0x30               
000968   0000     nop                      
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_setup_cfg:
00096a   100c     iorwf	0xc, 0, 0          	DB	LOW(_ep0_setup), HIGH(_ep0_setup), UPPER(_ep0_setup), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
00096c   a200     btfss	0, 0x1, 0          
00096e   001c     dw	0x1c  ;unknown opcode 
000970   1ca2     comf	0xa2, 0, 0          
000972   a200     btfss	0, 0x1, 0          
000974   001c     dw	0x1c  ;unknown opcode 
000976   1ca2     comf	0xa2, 0, 0          	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000978   a200     btfss	0, 0x1, 0          
00097a   001c     dw	0x1c  ;unknown opcode 
00097c   1ca2     comf	0xa2, 0, 0          
00097e   a200     btfss	0, 0x1, 0          
000980   001c     dw	0x1c  ;unknown opcode 
000982   1ca2     comf	0xa2, 0, 0          	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000984   a200     btfss	0, 0x1, 0          
000986   001c     dw	0x1c  ;unknown opcode 
000988   1ca2     comf	0xa2, 0, 0          
00098a   a200     btfss	0, 0x1, 0          
00098c   001c     dw	0x1c  ;unknown opcode 
00098e   1ca2     comf	0xa2, 0, 0          	DB	LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function), LOW(_null_function), HIGH(_null_function), UPPER(_null_function)
000990   a200     btfss	0, 0x1, 0          
000992   001c     dw	0x1c  ;unknown opcode 
000994   1ca2     comf	0xa2, 0, 0          
000996   a200     btfss	0, 0x1, 0          
000998   001c     dw	0x1c  ;unknown opcode 
                                           ; ; Starting pCode block for Ival
                                           _boot_ep_setup:
00099a   096a     iorlw	0x6a               	DB	LOW(_boot_ep_setup_cfg), HIGH(_boot_ep_setup_cfg), UPPER(_boot_ep_setup_cfg), LOW(_boot_ep_setup_cfg), HIGH(_boot_ep_setup_cfg), UPPER(_boot_ep_setup_cfg), LOW(_boot_ep_setup_cfg), HIGH(_boot_ep_setup_cfg), UPPER(_boot_ep_setup_cfg)
00099c   6a00     clrf	0, 0                
00099e   0009     tblrd	*+                 
0009a0   096a     iorlw	0x6a               
0009a2   0000     nop                      
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  122 (0x007a) bytes ( 0.09%)
                                           ;           	   61 (0x003d) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Aug 16 2006)
                                           ; This file generated Fri Sep 15 11:04:57 2006
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4455
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _ep0_init
                                           	global _ep0_in
                                           	global _ep0_setup
                                           	global _SetupBuffer
                                           	global _InBuffer
                                           	global _ep0_usb_std_request
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrget1
                                           	extern __gptrget3
                                           	extern __gptrget2
                                           	extern _ep_bdt
                                           	extern _usb_device_state
                                           	extern _usb_active_cfg
                                           	extern _usb_active_alt_setting
                                           	extern _device_descriptor
                                           	extern _configuration_descriptor
                                           	extern _string_descriptor
                                           	extern _ep_init
                                           	extern _ep_in
                                           	extern _ep_out
                                           	extern _ep_setup
                                           	extern _SPPDATAbits
                                           	extern _SPPCFGbits
                                           	extern _SPPEPSbits
                                           	extern _SPPCONbits
                                           	extern _UFRMLbits
                                           	extern _UFRMHbits
                                           	extern _UIRbits
                                           	extern _UIEbits
                                           	extern _UEIRbits
                                           	extern _UEIEbits
                                           	extern _USTATbits
                                           	extern _UCONbits
                                           	extern _UADDRbits
                                           	extern _UCFGbits
                                           	extern _UEP0bits
                                           	extern _UEP1bits
                                           	extern _UEP2bits
                                           	extern _UEP3bits
                                           	extern _UEP4bits
                                           	extern _UEP5bits
                                           	extern _UEP6bits
                                           	extern _UEP7bits
                                           	extern _UEP8bits
                                           	extern _UEP9bits
                                           	extern _UEP10bits
                                           	extern _UEP11bits
                                           	extern _UEP12bits
                                           	extern _UEP13bits
                                           	extern _UEP14bits
                                           	extern _UEP15bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _SPPDATA
                                           	extern _SPPCFG
                                           	extern _SPPEPS
                                           	extern _SPPCON
                                           	extern _UFRML
                                           	extern _UFRMH
                                           	extern _UIR
                                           	extern _UIE
                                           	extern _UEIR
                                           	extern _UEIE
                                           	extern _USTAT
                                           	extern _UCON
                                           	extern _UADDR
                                           	extern _UCFG
                                           	extern _UEP0
                                           	extern _UEP1
                                           	extern _UEP2
                                           	extern _UEP3
                                           	extern _UEP4
                                           	extern _UEP5
                                           	extern _UEP6
                                           	extern _UEP7
                                           	extern _UEP8
                                           	extern _UEP9
                                           	extern _UEP10
                                           	extern _UEP11
                                           	extern _UEP12
                                           	extern _UEP13
                                           	extern _UEP14
                                           	extern _UEP15
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _ECCP1DEL
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _ECCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _fill_in_buffer
                                           	extern _boot_device_descriptor
                                           	extern _boot_configuration_descriptor
                                           	extern _boot_string_descriptor
                                           	extern _str0
                                           	extern _str1
                                           	extern _str2
                                           	extern _str3
                                           	extern _boot_ep_init
                                           	extern _boot_ep_in
                                           	extern _boot_ep_out
                                           	extern _boot_ep_setup
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           INTCON	equ	0xff2
                                           WREG	equ	0xfe8
                                           TOSL	equ	0xffd
                                           TOSH	equ	0xffe
                                           TOSU	equ	0xfff
                                           FSR0L	equ	0xfe9
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTINC0	equ	0xfee
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           PRODH	equ	0xff4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           
                                           udata_ep0_0	udata
                                           _ep0_state	res	1
                                           
                                           udata_ep0_1	udata
                                           _num_bytes_to_be_send	res	2
                                           
                                           udata_ep0_2	udata
                                           _sourceData	res	3
                                           
                                           udata_ep0_3	udata
                                           _ep0_usb_std_request_unknown_request_1_1	res	1
                                           
                                           
                                           ustat_ep0_00	udata	0X0500
                                           _SetupBuffer	res	8
                                           _InBuffer	res	8
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ep0__ep0_setup	code
                                           _ep0_setup:
                                           ;	.line	212; ep0.c	void ep0_setup(void)
00100c   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00100e   ffe5
001010   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001012   ffd9
001014   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001016   ffe5
001018   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
00101a   ffe5
00101c   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00101e   ffe5
001020   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
001022   ffe5
001024   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
001026   ffe5
001028   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
00102a   ffe5
00102c   0100     movlb	0                  	BANKSEL	_ep0_state
                                           ;	.line	216; ep0.c	ep0_state = WAIT_SETUP;
00102e   6ba0     clrf	0xa0, 0x1           	CLRF	_ep0_state, B
001030   0100     movlb	0                  	BANKSEL	_num_bytes_to_be_send
                                           ;	.line	217; ep0.c	num_bytes_to_be_send = 0;
001032   6b8d     clrf	0x8d, 0x1           	CLRF	_num_bytes_to_be_send, B
001034   0100     movlb	0                  	BANKSEL	(_num_bytes_to_be_send + 1)
001036   6b8e     clrf	0x8e, 0x1           	CLRF	(_num_bytes_to_be_send + 1), B
                                           ;	.line	219; ep0.c	if(ep0_usb_std_request())
001038   ec15     call	0x2a, 0             	CALL	_ep0_usb_std_request
00103a   f000
00103c   6e00     movwf	0, 0               	MOVWF	r0x00
00103e   5000     movf	0, 0, 0             	MOVF	r0x00, W
001040   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
001042   ef9e     goto	0x113c              	GOTO	_00216_DS_
001044   f008
                                           ;	.line	221; ep0.c	UCONbits.PKTDIS = 0;
001046   986d     bcf	0x6d, 0x4, 0         	BCF	_UCONbits, 4
                                           ;	.line	222; ep0.c	if(SetupBuffer.data_transfer_direction == DEVICE_TO_HOST)
001048   6a00     clrf	0, 0                	CLRF	r0x00
00104a   0105     movlb	0x5                	BANKSEL	_SetupBuffer
00104c   bf00     btfsc	0, 0x7, 0x1        	BTFSC	_SetupBuffer, 7, B
00104e   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001050   5000     movf	0, 0, 0             	MOVF	r0x00, W
001052   0a01     xorlw	0x1                	XORLW	0x01
001054   e102     bnz	0x105a               	BNZ	_00223_DS_
001056   ef2f     goto	0x105e              	GOTO	_00224_DS_
001058   f008
                                           _00223_DS_:
00105a   ef84     goto	0x1108              	GOTO	_00213_DS_
00105c   f008
                                           _00224_DS_:
                                           ;	.line	224; ep0.c	ep0_state = WAIT_IN;
00105e   0e01     movlw	0x1                	MOVLW	0x01
001060   0100     movlb	0                  	BANKSEL	_ep0_state
001062   6fa0     movwf	0xa0, 0x1          	MOVWF	_ep0_state, B
                                           ;	.line	226; ep0.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
001064   0e08     movlw	0x8                	MOVLW	0x08
001066   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 1)
001068   6f01     movwf	0x1, 0x1           	MOVWF	(_ep_bdt + 1), B
00106a   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 2)
                                           ;	.line	227; ep0.c	EP_OUT_BD(0).ADR = (uchar __data *)&SetupBuffer;            
00106c   6b02     clrf	0x2, 0x1            	CLRF	(_ep_bdt + 2), B
00106e   0e05     movlw	0x5                	MOVLW	0x05
001070   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 3)
001072   6f03     movwf	0x3, 0x1           	MOVWF	(_ep_bdt + 3), B
                                           ;	.line	228; ep0.c	EP_OUT_BD(0).Stat.uc = BDS_USIE;
001074   0e80     movlw	0x80               	MOVLW	0x80
001076   0104     movlb	0x4                	BANKSEL	_ep_bdt
001078   6f00     movwf	0, 0x1             	MOVWF	_ep_bdt, B
                                           ;	.line	230; ep0.c	EP_IN_BD(0).ADR = (uchar __data *)InBuffer;
00107a   0e08     movlw	0x8                	MOVLW	LOW(_InBuffer)
00107c   6e00     movwf	0, 0               	MOVWF	r0x00
00107e   0e05     movlw	0x5                	MOVLW	HIGH(_InBuffer)
001080   6e01     movwf	0x1, 0             	MOVWF	r0x01
001082   5000     movf	0, 0, 0             	MOVF	r0x00, W
001084   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 6)
001086   6f06     movwf	0x6, 0x1           	MOVWF	(_ep_bdt + 6), B
001088   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00108a   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 7)
00108c   6f07     movwf	0x7, 0x1           	MOVWF	(_ep_bdt + 7), B
                                           ;	.line	231; ep0.c	if(SetupBuffer.wLength < num_bytes_to_be_send)
00108e   ee05     lfsr	0, 0x506            	LFSR	0x00, (_SetupBuffer + 6)
001090   f006
001092   cfee     movff	0xfee, 0           	MOVFF	POSTINC0, r0x00
001094   f000
001096   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
001098   f001
00109a   0100     movlb	0                  	BANKSEL	(_num_bytes_to_be_send + 1)
00109c   518e     movf	0x8e, 0, 0x1        	MOVF	(_num_bytes_to_be_send + 1), W, B
00109e   5c01     subwf	0x1, 0, 0          	SUBWF	r0x01, W
0010a0   e103     bnz	0x10a8               	BNZ	_00225_DS_
0010a2   0100     movlb	0                  	BANKSEL	_num_bytes_to_be_send
0010a4   518d     movf	0x8d, 0, 0x1        	MOVF	_num_bytes_to_be_send, W, B
0010a6   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
                                           _00225_DS_:
0010a8   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
0010aa   ef5d     goto	0x10ba              	GOTO	_00211_DS_
0010ac   f008
                                           ;	.line	233; ep0.c	num_bytes_to_be_send = SetupBuffer.wLength;
0010ae   ee05     lfsr	0, 0x506            	LFSR	0x00, (_SetupBuffer + 6)
0010b0   f006
0010b2   cfee     movff	0xfee, 0x8d        	MOVFF	POSTINC0, _num_bytes_to_be_send
0010b4   f08d
0010b6   cfef     movff	0xfef, 0x8e        	MOVFF	INDF0, (_num_bytes_to_be_send + 1)
0010b8   f08e
                                           _00211_DS_:
                                           ;	.line	235; ep0.c	fill_in_buffer(0, &sourceData, EP0_BUFFER_SIZE, &num_bytes_to_be_send);
0010ba   0e00     movlw	0                  	MOVLW	HIGH(_sourceData)
0010bc   6e01     movwf	0x1, 0             	MOVWF	r0x01
0010be   0e87     movlw	0x87               	MOVLW	LOW(_sourceData)
0010c0   6e00     movwf	0, 0               	MOVWF	r0x00
0010c2   0e80     movlw	0x80               	MOVLW	0x80
0010c4   6e02     movwf	0x2, 0             	MOVWF	r0x02
0010c6   0e00     movlw	0                  	MOVLW	HIGH(_num_bytes_to_be_send)
0010c8   6e04     movwf	0x4, 0             	MOVWF	r0x04
0010ca   0e8d     movlw	0x8d               	MOVLW	LOW(_num_bytes_to_be_send)
0010cc   6e03     movwf	0x3, 0             	MOVWF	r0x03
0010ce   0e80     movlw	0x80               	MOVLW	0x80
0010d0   6e05     movwf	0x5, 0             	MOVWF	r0x05
0010d2   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
0010d4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010d6   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
0010d8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010da   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
0010dc   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010de   0e00     movlw	0                  	MOVLW	0x00
0010e0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010e2   0e08     movlw	0x8                	MOVLW	0x08
0010e4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010e6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0010e8   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ea   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0010ec   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010ee   5000     movf	0, 0, 0             	MOVF	r0x00, W
0010f0   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010f2   0e00     movlw	0                  	MOVLW	0x00
0010f4   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
0010f6   ec20     call	0xc40, 0            	CALL	_fill_in_buffer
0010f8   f006
0010fa   0e09     movlw	0x9                	MOVLW	0x09
0010fc   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
                                           ;	.line	236; ep0.c	EP_IN_BD(0).Stat.uc = BDS_USIE | BDS_DAT1 | BDS_DTSEN;
0010fe   0ec8     movlw	0xc8               	MOVLW	0xc8
001100   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 4)
001102   6f04     movwf	0x4, 0x1           	MOVWF	(_ep_bdt + 4), B
001104   efad     goto	0x115a              	GOTO	_00218_DS_
001106   f008
                                           _00213_DS_:
                                           ;	.line	241; ep0.c	ep0_state = WAIT_OUT;
001108   0e02     movlw	0x2                	MOVLW	0x02
00110a   0100     movlb	0                  	BANKSEL	_ep0_state
00110c   6fa0     movwf	0xa0, 0x1          	MOVWF	_ep0_state, B
                                           ;	.line	243; ep0.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
00110e   0e08     movlw	0x8                	MOVLW	0x08
001110   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 1)
001112   6f01     movwf	0x1, 0x1           	MOVWF	(_ep_bdt + 1), B
                                           ;	.line	244; ep0.c	EP_OUT_BD(0).ADR = (uchar __data *)InBuffer;
001114   0e08     movlw	0x8                	MOVLW	LOW(_InBuffer)
001116   6e00     movwf	0, 0               	MOVWF	r0x00
001118   0e05     movlw	0x5                	MOVLW	HIGH(_InBuffer)
00111a   6e01     movwf	0x1, 0             	MOVWF	r0x01
00111c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00111e   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 2)
001120   6f02     movwf	0x2, 0x1           	MOVWF	(_ep_bdt + 2), B
001122   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001124   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 3)
001126   6f03     movwf	0x3, 0x1           	MOVWF	(_ep_bdt + 3), B
                                           ;	.line	245; ep0.c	EP_OUT_BD(0).Stat.uc = BDS_USIE | BDS_DAT1 | BDS_DTSEN;
001128   0ec8     movlw	0xc8               	MOVLW	0xc8
00112a   0104     movlb	0x4                	BANKSEL	_ep_bdt
00112c   6f00     movwf	0, 0x1             	MOVWF	_ep_bdt, B
00112e   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 5)
                                           ;	.line	247; ep0.c	EP_IN_BD(0).Cnt = 0;
001130   6b05     clrf	0x5, 0x1            	CLRF	(_ep_bdt + 5), B
                                           ;	.line	248; ep0.c	EP_IN_BD(0).Stat.uc = BDS_USIE | BDS_DAT1 | BDS_DTSEN;
001132   0ec8     movlw	0xc8               	MOVLW	0xc8
001134   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 4)
001136   6f04     movwf	0x4, 0x1           	MOVWF	(_ep_bdt + 4), B
001138   efad     goto	0x115a              	GOTO	_00218_DS_
00113a   f008
                                           _00216_DS_:
                                           ;	.line	254; ep0.c	UCONbits.PKTDIS = 0;
00113c   986d     bcf	0x6d, 0x4, 0         	BCF	_UCONbits, 4
                                           ;	.line	255; ep0.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
00113e   0e08     movlw	0x8                	MOVLW	0x08
001140   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 1)
001142   6f01     movwf	0x1, 0x1           	MOVWF	(_ep_bdt + 1), B
001144   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 2)
                                           ;	.line	256; ep0.c	EP_OUT_BD(0).ADR = (uchar __data *)&SetupBuffer;
001146   6b02     clrf	0x2, 0x1            	CLRF	(_ep_bdt + 2), B
001148   0e05     movlw	0x5                	MOVLW	0x05
00114a   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 3)
00114c   6f03     movwf	0x3, 0x1           	MOVWF	(_ep_bdt + 3), B
                                           ;	.line	257; ep0.c	EP_OUT_BD(0).Stat.uc = BDS_USIE | BDS_BSTALL;
00114e   0e84     movlw	0x84               	MOVLW	0x84
001150   0104     movlb	0x4                	BANKSEL	_ep_bdt
001152   6f00     movwf	0, 0x1             	MOVWF	_ep_bdt, B
                                           ;	.line	259; ep0.c	EP_IN_BD(0).Stat.uc  = BDS_USIE | BDS_BSTALL;
001154   0e84     movlw	0x84               	MOVLW	0x84
001156   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 4)
001158   6f04     movwf	0x4, 0x1           	MOVWF	(_ep_bdt + 4), B
                                           _00218_DS_:
00115a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00115c   f005
00115e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001160   f004
001162   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001164   f003
001166   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001168   f002
00116a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00116c   f001
00116e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001170   f000
001172   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001174   ffd9
001176   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ep0__ep0_in	code
                                           _ep0_in:
                                           ;	.line	176; ep0.c	void ep0_in(void)
0014dc   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0014de   ffe5
0014e0   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0014e2   ffd9
0014e4   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0014e6   ffe5
0014e8   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0014ea   ffe5
0014ec   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0014ee   ffe5
0014f0   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0014f2   ffe5
0014f4   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0014f6   ffe5
0014f8   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0014fa   ffe5
0014fc   0100     movlb	0                  	BANKSEL	_usb_device_state
                                           ;	.line	179; ep0.c	if(GET_DEVICE_STATE() == ADDRESS_PENDING_STATE)
0014fe   519e     movf	0x9e, 0, 0x1        	MOVF	_usb_device_state, W, B
001500   0a04     xorlw	0x4                	XORLW	0x04
001502   e102     bnz	0x1508               	BNZ	_00200_DS_
001504   ef86     goto	0x150c              	GOTO	_00201_DS_
001506   f00a
                                           _00200_DS_:
001508   ef96     goto	0x152c              	GOTO	_00187_DS_
00150a   f00a
                                           _00201_DS_:
                                           ;	.line	181; ep0.c	UADDR = SetupBuffer.bAddress;
00150c   ee05     lfsr	0, 0x502            	LFSR	0x00, (_SetupBuffer + 2)
00150e   f002
001510   cfef     movff	0xfef, 0xf6e       	MOVFF	INDF0, _UADDR
001512   ff6e
                                           ;	.line	182; ep0.c	if(UADDR != 0)
001514   506e     movf	0x6e, 0, 0          	MOVF	_UADDR, W
001516   e102     bnz	0x151c               	BNZ	_00203_DS_
001518   ef93     goto	0x1526              	GOTO	_00184_DS_
00151a   f00a
                                           _00203_DS_:
                                           ;	.line	184; ep0.c	SET_DEVICE_STATE(ADDRESS_STATE);
00151c   0e05     movlw	0x5                	MOVLW	0x05
00151e   0100     movlb	0                  	BANKSEL	_usb_device_state
001520   6f9e     movwf	0x9e, 0x1          	MOVWF	_usb_device_state, B
001522   ef96     goto	0x152c              	GOTO	_00187_DS_
001524   f00a
                                           _00184_DS_:
                                           ;	.line	188; ep0.c	SET_DEVICE_STATE(DEFAULT_STATE);
001526   0e03     movlw	0x3                	MOVLW	0x03
001528   0100     movlb	0                  	BANKSEL	_usb_device_state
00152a   6f9e     movwf	0x9e, 0x1          	MOVWF	_usb_device_state, B
                                           _00187_DS_:
00152c   0100     movlb	0                  	BANKSEL	_ep0_state
                                           ;	.line	192; ep0.c	if(ep0_state == WAIT_IN)
00152e   51a0     movf	0xa0, 0, 0x1        	MOVF	_ep0_state, W, B
001530   0a01     xorlw	0x1                	XORLW	0x01
001532   e102     bnz	0x1538               	BNZ	_00204_DS_
001534   ef9e     goto	0x153c              	GOTO	_00205_DS_
001536   f00a
                                           _00204_DS_:
001538   efce     goto	0x159c              	GOTO	_00192_DS_
00153a   f00a
                                           _00205_DS_:
                                           ;	.line	194; ep0.c	fill_in_buffer(0, &sourceData, EP0_BUFFER_SIZE, &num_bytes_to_be_send);
00153c   0e00     movlw	0                  	MOVLW	HIGH(_sourceData)
00153e   6e01     movwf	0x1, 0             	MOVWF	r0x01
001540   0e87     movlw	0x87               	MOVLW	LOW(_sourceData)
001542   6e00     movwf	0, 0               	MOVWF	r0x00
001544   0e80     movlw	0x80               	MOVLW	0x80
001546   6e02     movwf	0x2, 0             	MOVWF	r0x02
001548   0e00     movlw	0                  	MOVLW	HIGH(_num_bytes_to_be_send)
00154a   6e04     movwf	0x4, 0             	MOVWF	r0x04
00154c   0e8d     movlw	0x8d               	MOVLW	LOW(_num_bytes_to_be_send)
00154e   6e03     movwf	0x3, 0             	MOVWF	r0x03
001550   0e80     movlw	0x80               	MOVLW	0x80
001552   6e05     movwf	0x5, 0             	MOVWF	r0x05
001554   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001556   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001558   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00155a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00155c   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00155e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001560   0e00     movlw	0                  	MOVLW	0x00
001562   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001564   0e08     movlw	0x8                	MOVLW	0x08
001566   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001568   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00156a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00156c   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00156e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001570   5000     movf	0, 0, 0             	MOVF	r0x00, W
001572   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001574   0e00     movlw	0                  	MOVLW	0x00
001576   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001578   ec20     call	0xc40, 0            	CALL	_fill_in_buffer
00157a   f006
00157c   0e09     movlw	0x9                	MOVLW	0x09
00157e   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001580   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 4)
                                           ;	.line	196; ep0.c	if(EP_IN_BD(0).Stat.DTS == 0)
001582   bd04     btfsc	0x4, 0x6, 0x1      	BTFSC	(_ep_bdt + 4), 6, B
001584   efc9     goto	0x1592              	GOTO	_00189_DS_
001586   f00a
                                           ;	.line	198; ep0.c	EP_IN_BD(0).Stat.uc = BDS_USIE | BDS_DAT1 | BDS_DTSEN;
001588   0ec8     movlw	0xc8               	MOVLW	0xc8
00158a   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 4)
00158c   6f04     movwf	0x4, 0x1           	MOVWF	(_ep_bdt + 4), B
00158e   efd0     goto	0x15a0              	GOTO	_00194_DS_
001590   f00a
                                           _00189_DS_:
                                           ;	.line	202; ep0.c	EP_IN_BD(0).Stat.uc = BDS_USIE | BDS_DAT0 | BDS_DTSEN;
001592   0e88     movlw	0x88               	MOVLW	0x88
001594   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 4)
001596   6f04     movwf	0x4, 0x1           	MOVWF	(_ep_bdt + 4), B
001598   efd0     goto	0x15a0              	GOTO	_00194_DS_
00159a   f00a
                                           _00192_DS_:
                                           ;	.line	207; ep0.c	ep0_init();
00159c   ec8f     call	0x1b1e, 0           	CALL	_ep0_init
00159e   f00d
                                           _00194_DS_:
0015a0   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0015a2   f005
0015a4   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0015a6   f004
0015a8   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0015aa   f003
0015ac   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0015ae   f002
0015b0   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0015b2   f001
0015b4   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0015b6   f000
0015b8   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0015ba   ffd9
0015bc   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ep0__ep0_init	code
                                           _ep0_init:
                                           ;	.line	166; ep0.c	void ep0_init(void)
001b1e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001b20   ffe5
001b22   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001b24   ffd9
001b26   0100     movlb	0                  	BANKSEL	_ep0_state
                                           ;	.line	168; ep0.c	ep0_state = WAIT_SETUP;
001b28   6ba0     clrf	0xa0, 0x1           	CLRF	_ep0_state, B
                                           ;	.line	169; ep0.c	EP_OUT_BD(0).Cnt = EP0_BUFFER_SIZE;
001b2a   0e08     movlw	0x8                	MOVLW	0x08
001b2c   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 1)
001b2e   6f01     movwf	0x1, 0x1           	MOVWF	(_ep_bdt + 1), B
001b30   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 2)
                                           ;	.line	170; ep0.c	EP_OUT_BD(0).ADR = (uchar __data *)&SetupBuffer;
001b32   6b02     clrf	0x2, 0x1            	CLRF	(_ep_bdt + 2), B
001b34   0e05     movlw	0x5                	MOVLW	0x05
001b36   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 3)
001b38   6f03     movwf	0x3, 0x1           	MOVWF	(_ep_bdt + 3), B
                                           ;	.line	171; ep0.c	EP_OUT_BD(0).Stat.uc = BDS_USIE | BDS_DAT0 | BDS_DTSEN;
001b3a   0e88     movlw	0x88               	MOVLW	0x88
001b3c   0104     movlb	0x4                	BANKSEL	_ep_bdt
001b3e   6f00     movwf	0, 0x1             	MOVWF	_ep_bdt, B
001b40   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 4)
                                           ;	.line	172; ep0.c	EP_IN_BD(0).Stat.uc = BDS_UCPU;
001b42   6b04     clrf	0x4, 0x1            	CLRF	(_ep_bdt + 4), B
                                           ;	.line	173; ep0.c	UEP0 = EPINEN_EN | EPOUTEN_EN | EPHSHK_EN;
001b44   0e16     movlw	0x16               	MOVLW	0x16
001b46   6e70     movwf	0x70, 0            	MOVWF	_UEP0
001b48   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001b4a   ffd9
001b4c   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ep0__ep0_usb_std_request	code
                                           _ep0_usb_std_request:
                                           ;	.line	45; ep0.c	uchar ep0_usb_std_request(void)
00002a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00002c   ffe5
00002e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
000030   ffd9
000032   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
000034   ffe5
000036   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
000038   ffe5
00003a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
00003c   ffe5
00003e   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
000040   ffe5
000042   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
000044   ffe5
000046   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000048   ffe5
00004a   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
00004c   ffe5
00004e   0100     movlb	0                  	BANKSEL	_ep0_usb_std_request_unknown_request_1_1
                                           ;	.line	50; ep0.c	unknown_request = FALSE;
000050   6ba1     clrf	0xa1, 0x1           	CLRF	_ep0_usb_std_request_unknown_request_1_1, B
000052   0105     movlb	0x5                	BANKSEL	_SetupBuffer
                                           ;	.line	52; ep0.c	if(SetupBuffer.request_type != STANDARD) 
000054   5100     movf	0, 0, 0x1           	MOVF	_SetupBuffer, W, B
000056   38e8     swapf	0xe8, 0, 0         	SWAPF	WREG, W
000058   40e8     rrncf	0xe8, 0, 0         	RRNCF	WREG, W
00005a   0b03     andlw	0x3                	ANDLW	0x03
00005c   6e00     movwf	0, 0               	MOVWF	r0x00
00005e   5000     movf	0, 0, 0             	MOVF	r0x00, W
000060   e102     bnz	0x66                 	BNZ	_00151_DS_
000062   ef36     goto	0x6c                	GOTO	_00106_DS_
000064   f000
                                           _00151_DS_:
                                           ;	.line	54; ep0.c	return FALSE;
000066   6ae8     clrf	0xe8, 0             	CLRF	WREG
000068   efdb     goto	0x3b6               	GOTO	_00132_DS_
00006a   f001
                                           _00106_DS_:
                                           ;	.line	57; ep0.c	switch(SetupBuffer.bRequest)
00006c   ee05     lfsr	0, 0x501            	LFSR	0x00, (_SetupBuffer + 1)
00006e   f001
000070   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
000072   f000
000074   5000     movf	0, 0, 0             	MOVF	r0x00, W
000076   e102     bnz	0x7c                 	BNZ	_00153_DS_
000078   efd3     goto	0x3a6               	GOTO	_00128_DS_
00007a   f001
                                           _00153_DS_:
00007c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00007e   0a01     xorlw	0x1                	XORLW	0x01
000080   e102     bnz	0x86                 	BNZ	_00155_DS_
000082   efd3     goto	0x3a6               	GOTO	_00128_DS_
000084   f001
                                           _00155_DS_:
000086   5000     movf	0, 0, 0             	MOVF	r0x00, W
000088   0a03     xorlw	0x3                	XORLW	0x03
00008a   e102     bnz	0x90                 	BNZ	_00157_DS_
00008c   efd3     goto	0x3a6               	GOTO	_00128_DS_
00008e   f001
                                           _00157_DS_:
000090   5000     movf	0, 0, 0             	MOVF	r0x00, W
000092   0a05     xorlw	0x5                	XORLW	0x05
000094   e102     bnz	0x9a                 	BNZ	_00159_DS_
000096   ef36     goto	0x26c               	GOTO	_00117_DS_
000098   f001
                                           _00159_DS_:
00009a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00009c   0a06     xorlw	0x6                	XORLW	0x06
00009e   e102     bnz	0xa4                 	BNZ	_00161_DS_
0000a0   ef78     goto	0xf0                	GOTO	_00109_DS_
0000a2   f000
                                           _00161_DS_:
0000a4   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000a6   0a08     xorlw	0x8                	XORLW	0x08
0000a8   e102     bnz	0xae                 	BNZ	_00163_DS_
0000aa   ef68     goto	0xd0                	GOTO	_00108_DS_
0000ac   f000
                                           _00163_DS_:
0000ae   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000b0   0a09     xorlw	0x9                	XORLW	0x09
0000b2   e102     bnz	0xb8                 	BNZ	_00165_DS_
0000b4   ef3b     goto	0x276               	GOTO	_00118_DS_
0000b6   f001
                                           _00165_DS_:
0000b8   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000ba   0a0a     xorlw	0xa                	XORLW	0x0a
0000bc   e102     bnz	0xc2                 	BNZ	_00167_DS_
0000be   efd3     goto	0x3a6               	GOTO	_00128_DS_
0000c0   f001
                                           _00167_DS_:
0000c2   5000     movf	0, 0, 0             	MOVF	r0x00, W
0000c4   0a0b     xorlw	0xb                	XORLW	0x0b
0000c6   e102     bnz	0xcc                 	BNZ	_00169_DS_
0000c8   efd3     goto	0x3a6               	GOTO	_00128_DS_
0000ca   f001
                                           _00169_DS_:
0000cc   efd0     goto	0x3a0               	GOTO	_00127_DS_
0000ce   f001
                                           _00108_DS_:
                                           ;	.line	65; ep0.c	sourceData = &GET_ACTIVE_CONFIGURATION();
0000d0   0e00     movlw	0                  	MOVLW	HIGH(_usb_active_cfg)
0000d2   0100     movlb	0                  	BANKSEL	(_sourceData + 1)
0000d4   6f88     movwf	0x88, 0x1          	MOVWF	(_sourceData + 1), B
0000d6   0e9f     movlw	0x9f               	MOVLW	LOW(_usb_active_cfg)
0000d8   0100     movlb	0                  	BANKSEL	_sourceData
0000da   6f87     movwf	0x87, 0x1          	MOVWF	_sourceData, B
0000dc   0e80     movlw	0x80               	MOVLW	0x80
0000de   0100     movlb	0                  	BANKSEL	(_sourceData + 2)
0000e0   6f89     movwf	0x89, 0x1          	MOVWF	(_sourceData + 2), B
                                           ;	.line	66; ep0.c	num_bytes_to_be_send = 1;
0000e2   0e01     movlw	0x1                	MOVLW	0x01
0000e4   0100     movlb	0                  	BANKSEL	_num_bytes_to_be_send
0000e6   6f8d     movwf	0x8d, 0x1          	MOVWF	_num_bytes_to_be_send, B
0000e8   0100     movlb	0                  	BANKSEL	(_num_bytes_to_be_send + 1)
0000ea   6b8e     clrf	0x8e, 0x1           	CLRF	(_num_bytes_to_be_send + 1), B
                                           ;	.line	67; ep0.c	break;
0000ec   efd3     goto	0x3a6               	GOTO	_00128_DS_
0000ee   f001
                                           _00109_DS_:
                                           ;	.line	70; ep0.c	switch(SetupBuffer.bDescType)
0000f0   ee05     lfsr	0, 0x503            	LFSR	0x00, (_SetupBuffer + 3)
0000f2   f003
0000f4   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
0000f6   f000
0000f8   0e01     movlw	0x1                	MOVLW	0x01
0000fa   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
0000fc   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0000fe   ef31     goto	0x262               	GOTO	_00113_DS_
000100   f001
000102   0e04     movlw	0x4                	MOVLW	0x04
000104   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
000106   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000108   ef31     goto	0x262               	GOTO	_00113_DS_
00010a   f001
00010c   0600     decf	0, 0x1, 0           	DECF	r0x00, F
00010e   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
000110   ffe5
000112   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000114   ffe5
000116   6a08     clrf	0x8, 0              	CLRF	r0x08
000118   3400     rlcf	0, 0, 0             	RLCF	r0x00, W
00011a   3608     rlcf	0x8, 0x1, 0         	RLCF	r0x08, F
00011c   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
00011e   3608     rlcf	0x8, 0x1, 0         	RLCF	r0x08, F
000120   0bfc     andlw	0xfc               	ANDLW	0xfc
000122   6e07     movwf	0x7, 0             	MOVWF	r0x07
000124   0e00     movlw	0                  	MOVLW	UPPER(_00172_DS_)
000126   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
000128   0e01     movlw	0x1                	MOVLW	HIGH(_00172_DS_)
00012a   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
00012c   0e44     movlw	0x44               	MOVLW	LOW(_00172_DS_)
00012e   2607     addwf	0x7, 0x1, 0        	ADDWF	r0x07, F
000130   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000132   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
000134   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000136   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
000138   5007     movf	0x7, 0, 0           	MOVF	r0x07, W
00013a   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
00013c   f008
00013e   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000140   f007
000142   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00172_DS_:
000144   efa8     goto	0x150               	GOTO	_00110_DS_
000146   f000
000148   efc2     goto	0x184               	GOTO	_00111_DS_
00014a   f000
00014c   effc     goto	0x1f8               	GOTO	_00112_DS_
00014e   f000
                                           _00110_DS_:
                                           ;	.line	75; ep0.c	sourceData = (uchar *) device_descriptor;
000150   c072     movff	0x72, 0x87         	MOVFF	_device_descriptor, _sourceData
000152   f087
000154   c073     movff	0x73, 0x88         	MOVFF	(_device_descriptor + 1), (_sourceData + 1)
000156   f088
000158   c074     movff	0x74, 0x89         	MOVFF	(_device_descriptor + 2), (_sourceData + 2)
00015a   f089
                                           ;	.line	76; ep0.c	num_bytes_to_be_send = device_descriptor->bLength;
00015c   c072     movff	0x72, 0            	MOVFF	_device_descriptor, r0x00
00015e   f000
000160   c073     movff	0x73, 0x1          	MOVFF	(_device_descriptor + 1), r0x01
000162   f001
000164   c074     movff	0x74, 0x2          	MOVFF	(_device_descriptor + 2), r0x02
000166   f002
000168   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
00016a   ffe9
00016c   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00016e   fff3
000170   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000172   ece3     call	0x1bc6, 0           	CALL	__gptrget1
000174   f00d
000176   6e00     movwf	0, 0               	MOVWF	r0x00
000178   c000     movff	0, 0x8d            	MOVFF	r0x00, _num_bytes_to_be_send
00017a   f08d
00017c   0100     movlb	0                  	BANKSEL	(_num_bytes_to_be_send + 1)
00017e   6b8e     clrf	0x8e, 0x1           	CLRF	(_num_bytes_to_be_send + 1), B
                                           ;	.line	77; ep0.c	break;
000180   efd3     goto	0x3a6               	GOTO	_00128_DS_
000182   f001
                                           _00111_DS_:
                                           ;	.line	80; ep0.c	sourceData = configuration_descriptor[SetupBuffer.bDescIndex];
000184   ee05     lfsr	0, 0x502            	LFSR	0x00, (_SetupBuffer + 2)
000186   f002
000188   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
00018a   f000
                                           ; ;multiply lit val:0x03 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
00018c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00018e   0d03     mullw	0x3                	MULLW	0x03
000190   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
000192   f000
000194   cff4     movff	0xff4, 0x1         	MOVFF	PRODH, r0x01
000196   f001
000198   0100     movlb	0                  	BANKSEL	_configuration_descriptor
00019a   5175     movf	0x75, 0, 0x1        	MOVF	_configuration_descriptor, W, B
00019c   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
00019e   0100     movlb	0                  	BANKSEL	(_configuration_descriptor + 1)
0001a0   5176     movf	0x76, 0, 0x1        	MOVF	(_configuration_descriptor + 1), W, B
0001a2   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0001a4   0100     movlb	0                  	BANKSEL	(_configuration_descriptor + 2)
0001a6   5177     movf	0x77, 0, 0x1        	MOVF	(_configuration_descriptor + 2), W, B
0001a8   6a02     clrf	0x2, 0              	CLRF	r0x02
0001aa   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0001ac   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0001ae   ffe9
0001b0   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0001b2   fff3
0001b4   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001b6   ec5b     call	0x1ab6, 0           	CALL	__gptrget3
0001b8   f00d
0001ba   0100     movlb	0                  	BANKSEL	_sourceData
0001bc   6f87     movwf	0x87, 0x1          	MOVWF	_sourceData, B
0001be   cff3     movff	0xff3, 0x88        	MOVFF	PRODL, (_sourceData + 1)
0001c0   f088
0001c2   cff4     movff	0xff4, 0x89        	MOVFF	PRODH, (_sourceData + 2)
0001c4   f089
                                           ;	.line	81; ep0.c	num_bytes_to_be_send = ((USB_Configuration_Descriptor*)sourceData)->wTotalLength;
0001c6   c087     movff	0x87, 0            	MOVFF	_sourceData, r0x00
0001c8   f000
0001ca   c088     movff	0x88, 0x1          	MOVFF	(_sourceData + 1), r0x01
0001cc   f001
0001ce   c089     movff	0x89, 0x2          	MOVFF	(_sourceData + 2), r0x02
0001d0   f002
0001d2   0e02     movlw	0x2                	MOVLW	0x02
0001d4   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
0001d6   0e00     movlw	0                  	MOVLW	0x00
0001d8   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
0001da   0e00     movlw	0                  	MOVLW	0x00
0001dc   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
0001de   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
0001e0   ffe9
0001e2   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
0001e4   fff3
0001e6   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
0001e8   eca7     call	0x1b4e, 0           	CALL	__gptrget2
0001ea   f00d
0001ec   0100     movlb	0                  	BANKSEL	_num_bytes_to_be_send
0001ee   6f8d     movwf	0x8d, 0x1          	MOVWF	_num_bytes_to_be_send, B
0001f0   cff3     movff	0xff3, 0x8e        	MOVFF	PRODL, (_num_bytes_to_be_send + 1)
0001f2   f08e
                                           ;	.line	82; ep0.c	break;
0001f4   efd3     goto	0x3a6               	GOTO	_00128_DS_
0001f6   f001
                                           _00112_DS_:
                                           ;	.line	85; ep0.c	sourceData = string_descriptor[SetupBuffer.bDescIndex];
0001f8   ee05     lfsr	0, 0x502            	LFSR	0x00, (_SetupBuffer + 2)
0001fa   f002
0001fc   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
0001fe   f000
                                           ; ;multiply lit val:0x03 by variable r0x00 and store in r0x00
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
000200   5000     movf	0, 0, 0             	MOVF	r0x00, W
000202   0d03     mullw	0x3                	MULLW	0x03
000204   cff3     movff	0xff3, 0           	MOVFF	PRODL, r0x00
000206   f000
000208   cff4     movff	0xff4, 0x1         	MOVFF	PRODH, r0x01
00020a   f001
00020c   0100     movlb	0                  	BANKSEL	_string_descriptor
00020e   5178     movf	0x78, 0, 0x1        	MOVF	_string_descriptor, W, B
000210   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000212   0100     movlb	0                  	BANKSEL	(_string_descriptor + 1)
000214   5179     movf	0x79, 0, 0x1        	MOVF	(_string_descriptor + 1), W, B
000216   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
000218   0100     movlb	0                  	BANKSEL	(_string_descriptor + 2)
00021a   517a     movf	0x7a, 0, 0x1        	MOVF	(_string_descriptor + 2), W, B
00021c   6a02     clrf	0x2, 0              	CLRF	r0x02
00021e   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000220   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000222   ffe9
000224   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000226   fff3
000228   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00022a   ec5b     call	0x1ab6, 0           	CALL	__gptrget3
00022c   f00d
00022e   0100     movlb	0                  	BANKSEL	_sourceData
000230   6f87     movwf	0x87, 0x1          	MOVWF	_sourceData, B
000232   cff3     movff	0xff3, 0x88        	MOVFF	PRODL, (_sourceData + 1)
000234   f088
000236   cff4     movff	0xff4, 0x89        	MOVFF	PRODH, (_sourceData + 2)
000238   f089
                                           ;	.line	86; ep0.c	num_bytes_to_be_send = sourceData[0];
00023a   c087     movff	0x87, 0            	MOVFF	_sourceData, r0x00
00023c   f000
00023e   c088     movff	0x88, 0x1          	MOVFF	(_sourceData + 1), r0x01
000240   f001
000242   c089     movff	0x89, 0x2          	MOVFF	(_sourceData + 2), r0x02
000244   f002
000246   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000248   ffe9
00024a   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
00024c   fff3
00024e   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000250   ece3     call	0x1bc6, 0           	CALL	__gptrget1
000252   f00d
000254   6e00     movwf	0, 0               	MOVWF	r0x00
000256   c000     movff	0, 0x8d            	MOVFF	r0x00, _num_bytes_to_be_send
000258   f08d
00025a   0100     movlb	0                  	BANKSEL	(_num_bytes_to_be_send + 1)
00025c   6b8e     clrf	0x8e, 0x1           	CLRF	(_num_bytes_to_be_send + 1), B
                                           ;	.line	87; ep0.c	break;
00025e   efd3     goto	0x3a6               	GOTO	_00128_DS_
000260   f001
                                           _00113_DS_:
                                           ;	.line	91; ep0.c	unknown_request = TRUE;
000262   0e01     movlw	0x1                	MOVLW	0x01
000264   0100     movlb	0                  	BANKSEL	_ep0_usb_std_request_unknown_request_1_1
000266   6fa1     movwf	0xa1, 0x1          	MOVWF	_ep0_usb_std_request_unknown_request_1_1, B
                                           ;	.line	94; ep0.c	break;
000268   efd3     goto	0x3a6               	GOTO	_00128_DS_
00026a   f001
                                           _00117_DS_:
                                           ;	.line	105; ep0.c	SET_DEVICE_STATE(ADDRESS_PENDING_STATE);
00026c   0e04     movlw	0x4                	MOVLW	0x04
00026e   0100     movlb	0                  	BANKSEL	_usb_device_state
000270   6f9e     movwf	0x9e, 0x1          	MOVWF	_usb_device_state, B
                                           ;	.line	106; ep0.c	break;
000272   efd3     goto	0x3a6               	GOTO	_00128_DS_
000274   f001
                                           _00118_DS_:
                                           ;	.line	110; ep0.c	if(device_descriptor->bNumConfigurations >= SetupBuffer.bConfigurationValue)
000276   c072     movff	0x72, 0            	MOVFF	_device_descriptor, r0x00
000278   f000
00027a   c073     movff	0x73, 0x1          	MOVFF	(_device_descriptor + 1), r0x01
00027c   f001
00027e   c074     movff	0x74, 0x2          	MOVFF	(_device_descriptor + 2), r0x02
000280   f002
000282   0e11     movlw	0x11               	MOVLW	0x11
000284   2600     addwf	0, 0x1, 0          	ADDWF	r0x00, F
000286   0e00     movlw	0                  	MOVLW	0x00
000288   2201     addwfc	0x1, 0x1, 0       	ADDWFC	r0x01, F
00028a   0e00     movlw	0                  	MOVLW	0x00
00028c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00028e   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
000290   ffe9
000292   c001     movff	0x1, 0xff3         	MOVFF	r0x01, PRODL
000294   fff3
000296   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
000298   ece3     call	0x1bc6, 0           	CALL	__gptrget1
00029a   f00d
00029c   6e00     movwf	0, 0               	MOVWF	r0x00
00029e   ee05     lfsr	0, 0x502            	LFSR	0x00, (_SetupBuffer + 2)
0002a0   f002
0002a2   cfef     movff	0xfef, 0x1         	MOVFF	INDF0, r0x01
0002a4   f001
0002a6   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
0002a8   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
0002aa   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
0002ac   efcb     goto	0x396               	GOTO	_00123_DS_
0002ae   f001
                                           ;	.line	112; ep0.c	SET_ACTIVE_CONFIGURATION(SetupBuffer.bConfigurationValue);
0002b0   ee05     lfsr	0, 0x502            	LFSR	0x00, (_SetupBuffer + 2)
0002b2   f002
0002b4   cfef     movff	0xfef, 0x9f        	MOVFF	INDF0, _usb_active_cfg
0002b6   f09f
                                           ;	.line	116; ep0.c	UEP1  = 0; UEP2  = 0; UEP3  = 0; UEP4  = 0;
0002b8   6a71     clrf	0x71, 0             	CLRF	_UEP1
0002ba   6a72     clrf	0x72, 0             	CLRF	_UEP2
0002bc   6a73     clrf	0x73, 0             	CLRF	_UEP3
0002be   6a74     clrf	0x74, 0             	CLRF	_UEP4
                                           ;	.line	117; ep0.c	UEP5  = 0; UEP6  = 0; UEP7  = 0; UEP8  = 0;
0002c0   6a75     clrf	0x75, 0             	CLRF	_UEP5
0002c2   6a76     clrf	0x76, 0             	CLRF	_UEP6
0002c4   6a77     clrf	0x77, 0             	CLRF	_UEP7
0002c6   6a78     clrf	0x78, 0             	CLRF	_UEP8
                                           ;	.line	118; ep0.c	UEP9  = 0; UEP10 = 0; UEP11 = 0; UEP12 = 0;
0002c8   6a79     clrf	0x79, 0             	CLRF	_UEP9
0002ca   6a7a     clrf	0x7a, 0             	CLRF	_UEP10
0002cc   6a7b     clrf	0x7b, 0             	CLRF	_UEP11
0002ce   6a7c     clrf	0x7c, 0             	CLRF	_UEP12
                                           ;	.line	119; ep0.c	UEP13 = 0; UEP14 = 0; UEP15 = 0;
0002d0   6a7d     clrf	0x7d, 0             	CLRF	_UEP13
0002d2   6a7e     clrf	0x7e, 0             	CLRF	_UEP14
0002d4   6a7f     clrf	0x7f, 0             	CLRF	_UEP15
0002d6   0100     movlb	0                  	BANKSEL	_usb_active_cfg
                                           ;	.line	122; ep0.c	if(GET_ACTIVE_CONFIGURATION() == 0)
0002d8   519f     movf	0x9f, 0, 0x1        	MOVF	_usb_active_cfg, W, B
0002da   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
0002dc   ef75     goto	0x2ea               	GOTO	_00120_DS_
0002de   f001
                                           ;	.line	124; ep0.c	SET_DEVICE_STATE(ADDRESS_STATE);
0002e0   0e05     movlw	0x5                	MOVLW	0x05
0002e2   0100     movlb	0                  	BANKSEL	_usb_device_state
0002e4   6f9e     movwf	0x9e, 0x1          	MOVWF	_usb_device_state, B
0002e6   efd3     goto	0x3a6               	GOTO	_00128_DS_
0002e8   f001
                                           _00120_DS_:
                                           ;	.line	130; ep0.c	SET_DEVICE_STATE(CONFIGURED_STATE);
0002ea   0e06     movlw	0x6                	MOVLW	0x06
0002ec   0100     movlb	0                  	BANKSEL	_usb_device_state
0002ee   6f9e     movwf	0x9e, 0x1          	MOVWF	_usb_device_state, B
                                           ;	.line	133; ep0.c	for(i = 1; i < 16; i++)
0002f0   0e0f     movlw	0xf                	MOVLW	0x0f
0002f2   6e00     movwf	0, 0               	MOVWF	r0x00
                                           ; ;multiply lit val:0x03 by variable _usb_active_cfg and store in r0x01
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
                                           _00131_DS_:
0002f4   0100     movlb	0                  	BANKSEL	_usb_active_cfg
                                           ;	.line	135; ep0.c	ep_init[GET_ACTIVE_CONFIGURATION()][i]();
0002f6   519f     movf	0x9f, 0, 0x1        	MOVF	_usb_active_cfg, W, B
0002f8   0d03     mullw	0x3                	MULLW	0x03
0002fa   cff3     movff	0xff3, 0x1         	MOVFF	PRODL, r0x01
0002fc   f001
0002fe   cff4     movff	0xff4, 0x2         	MOVFF	PRODH, r0x02
000300   f002
000302   0100     movlb	0                  	BANKSEL	_ep_init
000304   517b     movf	0x7b, 0, 0x1        	MOVF	_ep_init, W, B
000306   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000308   0100     movlb	0                  	BANKSEL	(_ep_init + 1)
00030a   517c     movf	0x7c, 0, 0x1        	MOVF	(_ep_init + 1), W, B
00030c   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
00030e   0100     movlb	0                  	BANKSEL	(_ep_init + 2)
000310   517d     movf	0x7d, 0, 0x1        	MOVF	(_ep_init + 2), W, B
000312   6a03     clrf	0x3, 0              	CLRF	r0x03
000314   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000316   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000318   ffe9
00031a   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
00031c   fff3
00031e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000320   ec5b     call	0x1ab6, 0           	CALL	__gptrget3
000322   f00d
000324   6e01     movwf	0x1, 0             	MOVWF	r0x01
000326   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
000328   f002
00032a   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
00032c   f003
00032e   0400     decf	0, 0, 0             	DECF	r0x00, W
000330   6e04     movwf	0x4, 0             	MOVWF	r0x04
                                           ; ;multiply lit val:0x03 by variable r0x04 and store in r0x05
                                           ; ;Unrolled 8 X 8 multiplication
                                           ; ;FIXME: the function does not support result==WREG
000332   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
000334   0d03     mullw	0x3                	MULLW	0x03
000336   cff3     movff	0xff3, 0x5         	MOVFF	PRODL, r0x05
000338   f005
00033a   cff4     movff	0xff4, 0x6         	MOVFF	PRODH, r0x06
00033c   f006
00033e   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
000340   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000342   5006     movf	0x6, 0, 0           	MOVF	r0x06, W
000344   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000346   6ae8     clrf	0xe8, 0             	CLRF	WREG
000348   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
00034a   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
00034c   ffe9
00034e   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
000350   fff3
000352   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000354   ec5b     call	0x1ab6, 0           	CALL	__gptrget3
000356   f00d
000358   6e01     movwf	0x1, 0             	MOVWF	r0x01
00035a   cff3     movff	0xff3, 0x2         	MOVFF	PRODL, r0x02
00035c   f002
00035e   cff4     movff	0xff4, 0x3         	MOVFF	PRODH, r0x03
000360   f003
000362   cff2     movff	0xff2, 0xfe5       	MOVFF	INTCON, POSTDEC1
000364   ffe5
000366   9ef2     bcf	0xf2, 0x7, 0         	BCF	INTCON, 7
000368   0005     push                     	PUSH	
00036a   0e86     movlw	0x86               	MOVLW	LOW(_00174_DS_)
00036c   6efd     movwf	0xfd, 0            	MOVWF	TOSL
00036e   0e03     movlw	0x3                	MOVLW	HIGH(_00174_DS_)
000370   6efe     movwf	0xfe, 0            	MOVWF	TOSH
000372   0e00     movlw	0                  	MOVLW	UPPER(_00174_DS_)
000374   6eff     movwf	0xff, 0            	MOVWF	TOSU
000376   50e4     movf	0xe4, 0, 0          	MOVF	PREINC1, W
000378   6ef2     movwf	0xf2, 0            	MOVWF	INTCON
00037a   c003     movff	0x3, 0xffb         	MOVFF	r0x03, PCLATU
00037c   fffb
00037e   c002     movff	0x2, 0xffa         	MOVFF	r0x02, PCLATH
000380   fffa
000382   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
000384   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00174_DS_:
000386   c004     movff	0x4, 0             	MOVFF	r0x04, r0x00
000388   f000
                                           ;	.line	133; ep0.c	for(i = 1; i < 16; i++)
00038a   5000     movf	0, 0, 0             	MOVF	r0x00, W
00038c   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
00038e   ef7a     goto	0x2f4               	GOTO	_00131_DS_
000390   f001
000392   efd3     goto	0x3a6               	GOTO	_00128_DS_
000394   f001
                                           _00123_DS_:
                                           ;	.line	143; ep0.c	unknown_request = TRUE;
000396   0e01     movlw	0x1                	MOVLW	0x01
000398   0100     movlb	0                  	BANKSEL	_ep0_usb_std_request_unknown_request_1_1
00039a   6fa1     movwf	0xa1, 0x1          	MOVWF	_ep0_usb_std_request_unknown_request_1_1, B
                                           ;	.line	146; ep0.c	break;
00039c   efd3     goto	0x3a6               	GOTO	_00128_DS_
00039e   f001
                                           _00127_DS_:
                                           ;	.line	159; ep0.c	unknown_request = TRUE;
0003a0   0e01     movlw	0x1                	MOVLW	0x01
0003a2   0100     movlb	0                  	BANKSEL	_ep0_usb_std_request_unknown_request_1_1
0003a4   6fa1     movwf	0xa1, 0x1          	MOVWF	_ep0_usb_std_request_unknown_request_1_1, B
                                           _00128_DS_:
0003a6   0100     movlb	0                  	BANKSEL	_ep0_usb_std_request_unknown_request_1_1
                                           ;	.line	162; ep0.c	return !unknown_request;
0003a8   51a1     movf	0xa1, 0, 0x1        	MOVF	_ep0_usb_std_request_unknown_request_1_1, W, B
0003aa   80d8     bsf	0xd8, 0, 0           	BSF	STATUS, 0
0003ac   66e8     tstfsz	0xe8, 0           	TSTFSZ	WREG
0003ae   90d8     bcf	0xd8, 0, 0           	BCF	STATUS, 0
0003b0   6a00     clrf	0, 0                	CLRF	r0x00
0003b2   3600     rlcf	0, 0x1, 0           	RLCF	r0x00, F
0003b4   5000     movf	0, 0, 0             	MOVF	r0x00, W
                                           _00132_DS_:
0003b6   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
0003b8   f006
0003ba   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
0003bc   f005
0003be   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
0003c0   f004
0003c2   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
0003c4   f003
0003c6   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
0003c8   f002
0003ca   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
0003cc   f001
0003ce   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
0003d0   f000
0003d2   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
0003d4   ffd9
0003d6   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	 1580 (0x062c) bytes ( 1.21%)
                                           ;           	  790 (0x0316) words
                                           ; udata size:	   23 (0x0017) bytes ( 1.28%)
                                           ; access size:	    9 (0x0009) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Aug 16 2006)
                                           ; This file generated Fri Sep 15 11:39:29 2006
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4455
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _ep1_init
                                           	global _ep1_out
                                           	global _ep1_OutBuffer
                                           	global _id_msg
                                           	global _ack
                                           	global _nack
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern __gptrput1
                                           	extern _ep_bdt
                                           	extern _usb_device_state
                                           	extern _usb_active_cfg
                                           	extern _usb_active_alt_setting
                                           	extern _device_descriptor
                                           	extern _configuration_descriptor
                                           	extern _string_descriptor
                                           	extern _ep_init
                                           	extern _ep_in
                                           	extern _ep_out
                                           	extern _ep_setup
                                           	extern _ep2_num_bytes_to_send
                                           	extern _ep2_source_data
                                           	extern _SPPDATAbits
                                           	extern _SPPCFGbits
                                           	extern _SPPEPSbits
                                           	extern _SPPCONbits
                                           	extern _UFRMLbits
                                           	extern _UFRMHbits
                                           	extern _UIRbits
                                           	extern _UIEbits
                                           	extern _UEIRbits
                                           	extern _UEIEbits
                                           	extern _USTATbits
                                           	extern _UCONbits
                                           	extern _UADDRbits
                                           	extern _UCFGbits
                                           	extern _UEP0bits
                                           	extern _UEP1bits
                                           	extern _UEP2bits
                                           	extern _UEP3bits
                                           	extern _UEP4bits
                                           	extern _UEP5bits
                                           	extern _UEP6bits
                                           	extern _UEP7bits
                                           	extern _UEP8bits
                                           	extern _UEP9bits
                                           	extern _UEP10bits
                                           	extern _UEP11bits
                                           	extern _UEP12bits
                                           	extern _UEP13bits
                                           	extern _UEP14bits
                                           	extern _UEP15bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _adc_cfg
                                           	extern _adc_int_nr
                                           	extern _adc_flags
                                           	extern _SPPDATA
                                           	extern _SPPCFG
                                           	extern _SPPEPS
                                           	extern _SPPCON
                                           	extern _UFRML
                                           	extern _UFRMH
                                           	extern _UIR
                                           	extern _UIE
                                           	extern _UEIR
                                           	extern _UEIE
                                           	extern _USTAT
                                           	extern _UCON
                                           	extern _UADDR
                                           	extern _UCFG
                                           	extern _UEP0
                                           	extern _UEP1
                                           	extern _UEP2
                                           	extern _UEP3
                                           	extern _UEP4
                                           	extern _UEP5
                                           	extern _UEP6
                                           	extern _UEP7
                                           	extern _UEP8
                                           	extern _UEP9
                                           	extern _UEP10
                                           	extern _UEP11
                                           	extern _UEP12
                                           	extern _UEP13
                                           	extern _UEP14
                                           	extern _UEP15
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _ECCP1DEL
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _ECCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _prepare_ep2_in
                                           	extern _adc_start
                                           	extern _adc_init
                                           	extern _adc_stop
                                           	extern _boot_device_descriptor
                                           	extern _boot_configuration_descriptor
                                           	extern _boot_string_descriptor
                                           	extern _str0
                                           	extern _str1
                                           	extern _str2
                                           	extern _str3
                                           	extern _boot_ep_init
                                           	extern _boot_ep_in
                                           	extern _boot_ep_out
                                           	extern _boot_ep_setup
                                           	extern _section_descriptor
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           PCL	equ	0xff9
                                           PCLATH	equ	0xffa
                                           PCLATU	equ	0xffb
                                           WREG	equ	0xfe8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PRODL	equ	0xff3
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           r0x06	res	1
                                           r0x07	res	1
                                           r0x08	res	1
                                           r0x09	res	1
                                           
                                           udata_ep1_0	udata
                                           iTemp0	res	1
                                           
                                           udata_ep1_1	udata
                                           iTemp13	res	1
                                           
                                           
                                           ustat_ep1_00	udata	0X0510
                                           _ep1_OutBuffer	res	64
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ep1__ep1_out	code
                                           _ep1_out:
                                           ;	.line	49; ep1.c	void ep1_out(void)
0009d6   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0009d8   ffe5
0009da   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0009dc   ffd9
0009de   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0009e0   ffe5
0009e2   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0009e4   ffe5
0009e6   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0009e8   ffe5
0009ea   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0009ec   ffe5
0009ee   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0009f0   ffe5
0009f2   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0009f4   ffe5
0009f6   c006     movff	0x6, 0xfe5         	MOVFF	r0x06, POSTDEC1
0009f8   ffe5
0009fa   c007     movff	0x7, 0xfe5         	MOVFF	r0x07, POSTDEC1
0009fc   ffe5
                                           ;	.line	52; ep1.c	if(EP_OUT_BD(1).Cnt >= 1)
0009fe   c409     movff	0x409, 0xa3        	MOVFF	(_ep_bdt + 9), (iTemp0 + 1)
000a00   f0a3
000a02   0e01     movlw	0x1                	MOVLW	0x01
000a04   0100     movlb	0                  	BANKSEL	(iTemp0 + 1)
000a06   5da3     subwf	0xa3, 0, 0x1       	SUBWF	(iTemp0 + 1), W, B
000a08   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000a0a   ef01     goto	0xc02               	GOTO	_00130_DS_
000a0c   f006
                                           ;	.line	54; ep1.c	switch(ep1_OutBuffer[0])
000a0e   ee05     lfsr	0, 0x510            	LFSR	0x00, _ep1_OutBuffer
000a10   f010
000a12   cfef     movff	0xfef, 0           	MOVFF	INDF0, r0x00
000a14   f000
000a16   0e06     movlw	0x6                	MOVLW	0x06
000a18   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
000a1a   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000a1c   ef01     goto	0xc02               	GOTO	_00130_DS_
000a1e   f006
000a20   c008     movff	0x8, 0xfe5         	MOVFF	r0x08, POSTDEC1
000a22   ffe5
000a24   c009     movff	0x9, 0xfe5         	MOVFF	r0x09, POSTDEC1
000a26   ffe5
000a28   6a09     clrf	0x9, 0              	CLRF	r0x09
000a2a   3400     rlcf	0, 0, 0             	RLCF	r0x00, W
000a2c   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
000a2e   34e8     rlcf	0xe8, 0, 0          	RLCF	WREG, W
000a30   3609     rlcf	0x9, 0x1, 0         	RLCF	r0x09, F
000a32   0bfc     andlw	0xfc               	ANDLW	0xfc
000a34   6e08     movwf	0x8, 0             	MOVWF	r0x08
000a36   0e00     movlw	0                  	MOVLW	UPPER(_00147_DS_)
000a38   6efb     movwf	0xfb, 0            	MOVWF	PCLATU
000a3a   0e0a     movlw	0xa                	MOVLW	HIGH(_00147_DS_)
000a3c   6efa     movwf	0xfa, 0            	MOVWF	PCLATH
000a3e   0e56     movlw	0x56               	MOVLW	LOW(_00147_DS_)
000a40   2608     addwf	0x8, 0x1, 0        	ADDWF	r0x08, F
000a42   5009     movf	0x9, 0, 0           	MOVF	r0x09, W
000a44   22fa     addwfc	0xfa, 0x1, 0      	ADDWFC	PCLATH, F
000a46   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000a48   2afb     incf	0xfb, 0x1, 0        	INCF	PCLATU, F
000a4a   5008     movf	0x8, 0, 0           	MOVF	r0x08, W
000a4c   cfe4     movff	0xfe4, 0x9         	MOVFF	PREINC1, r0x09
000a4e   f009
000a50   cfe4     movff	0xfe4, 0x8         	MOVFF	PREINC1, r0x08
000a52   f008
000a54   6ef9     movwf	0xf9, 0            	MOVWF	PCL
                                           _00147_DS_:
000a56   ef37     goto	0xa6e               	GOTO	_00109_DS_
000a58   f005
000a5a   ef49     goto	0xa92               	GOTO	_00110_DS_
000a5c   f005
000a5e   ef9c     goto	0xb38               	GOTO	_00115_DS_
000a60   f005
000a62   efb6     goto	0xb6c               	GOTO	_00119_DS_
000a64   f005
000a66   efca     goto	0xb94               	GOTO	_00120_DS_
000a68   f005
000a6a   efde     goto	0xbbc               	GOTO	_00121_DS_
000a6c   f005
                                           _00109_DS_:
                                           ;	.line	59; ep1.c	ep2_num_bytes_to_send = sizeof(id_msg);
000a6e   0e11     movlw	0x11               	MOVLW	0x11
000a70   0100     movlb	0                  	BANKSEL	_ep2_num_bytes_to_send
000a72   6f8f     movwf	0x8f, 0x1          	MOVWF	_ep2_num_bytes_to_send, B
000a74   0100     movlb	0                  	BANKSEL	(_ep2_num_bytes_to_send + 1)
000a76   6b90     clrf	0x90, 0x1           	CLRF	(_ep2_num_bytes_to_send + 1), B
                                           ;	.line	60; ep1.c	ep2_source_data = (uchar __code *) id_msg;
000a78   0ea4     movlw	0xa4               	MOVLW	LOW(_id_msg)
000a7a   0100     movlb	0                  	BANKSEL	_ep2_source_data
000a7c   6f8a     movwf	0x8a, 0x1          	MOVWF	_ep2_source_data, B
000a7e   0e09     movlw	0x9                	MOVLW	HIGH(_id_msg)
000a80   0100     movlb	0                  	BANKSEL	(_ep2_source_data + 1)
000a82   6f8b     movwf	0x8b, 0x1          	MOVWF	(_ep2_source_data + 1), B
000a84   0e00     movlw	0                  	MOVLW	UPPER(_id_msg)
000a86   0100     movlb	0                  	BANKSEL	(_ep2_source_data + 2)
000a88   6f8c     movwf	0x8c, 0x1          	MOVWF	(_ep2_source_data + 2), B
                                           ;	.line	61; ep1.c	prepare_ep2_in();
000a8a   ec4c     call	0x1698, 0           	CALL	_prepare_ep2_in
000a8c   f00b
                                           ;	.line	62; ep1.c	break;
000a8e   eff0     goto	0xbe0               	GOTO	_00123_DS_
000a90   f005
                                           _00110_DS_:
                                           ;	.line	65; ep1.c	if(EP_OUT_BD(1).Cnt < ADC_CONF_SIZE+1) {
000a92   c409     movff	0x409, 0xa4        	MOVFF	(_ep_bdt + 9), (iTemp13 + 1)
000a94   f0a4
000a96   0e0c     movlw	0xc                	MOVLW	0x0c
000a98   0100     movlb	0                  	BANKSEL	(iTemp13 + 1)
000a9a   5da4     subwf	0xa4, 0, 0x1       	SUBWF	(iTemp13 + 1), W, B
000a9c   a0d8     btfss	0xd8, 0, 0         	BTFSS	STATUS, 0
000a9e   ef01     goto	0xc02               	GOTO	_00130_DS_
000aa0   f006
                                           ;	.line	68; ep1.c	if(adc_flags.adc_sampling == 1) {
000aa2   6a00     clrf	0, 0                	CLRF	r0x00
000aa4   0100     movlb	0                  	BANKSEL	_adc_flags
000aa6   b16d     btfsc	0x6d, 0, 0x1       	BTFSC	_adc_flags, 0, B
000aa8   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
000aaa   5000     movf	0, 0, 0             	MOVF	r0x00, W
000aac   0a01     xorlw	0x1                	XORLW	0x01
000aae   e102     bnz	0xab4                	BNZ	_00150_DS_
000ab0   ef01     goto	0xc02               	GOTO	_00130_DS_
000ab2   f006
                                           _00150_DS_:
                                           ;	.line	72; ep1.c	for(j=0;j<sizeof(adc_cfg);j++) {
000ab4   6a00     clrf	0, 0                	CLRF	r0x00
                                           _00131_DS_:
000ab6   0e0b     movlw	0xb                	MOVLW	0x0b
000ab8   5c00     subwf	0, 0, 0            	SUBWF	r0x00, W
000aba   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
000abc   ef8a     goto	0xb14               	GOTO	_00134_DS_
000abe   f005
                                           ;	.line	73; ep1.c	*(((uchar *) &adc_cfg)+j) = ep1_OutBuffer[j+1];
000ac0   0e00     movlw	0                  	MOVLW	HIGH(_adc_cfg)
000ac2   6e02     movwf	0x2, 0             	MOVWF	r0x02
000ac4   0e60     movlw	0x60               	MOVLW	LOW(_adc_cfg)
000ac6   6e01     movwf	0x1, 0             	MOVWF	r0x01
000ac8   0e80     movlw	0x80               	MOVLW	0x80
000aca   6e03     movwf	0x3, 0             	MOVWF	r0x03
000acc   5000     movf	0, 0, 0             	MOVF	r0x00, W
000ace   2601     addwf	0x1, 0x1, 0        	ADDWF	r0x01, F
000ad0   6ae8     clrf	0xe8, 0             	CLRF	WREG
000ad2   2202     addwfc	0x2, 0x1, 0       	ADDWFC	r0x02, F
000ad4   6ae8     clrf	0xe8, 0             	CLRF	WREG
000ad6   2203     addwfc	0x3, 0x1, 0       	ADDWFC	r0x03, F
000ad8   2800     incf	0, 0, 0             	INCF	r0x00, W
000ada   6e04     movwf	0x4, 0             	MOVWF	r0x04
000adc   0e10     movlw	0x10               	MOVLW	LOW(_ep1_OutBuffer)
000ade   2404     addwf	0x4, 0, 0          	ADDWF	r0x04, W
000ae0   6e05     movwf	0x5, 0             	MOVWF	r0x05
000ae2   6a06     clrf	0x6, 0              	CLRF	r0x06
000ae4   0e05     movlw	0x5                	MOVLW	HIGH(_ep1_OutBuffer)
000ae6   2206     addwfc	0x6, 0x1, 0       	ADDWFC	r0x06, F
000ae8   6a07     clrf	0x7, 0              	CLRF	r0x07
000aea   0e00     movlw	0                  	MOVLW	UPPER(_ep1_OutBuffer)
000aec   2207     addwfc	0x7, 0x1, 0       	ADDWFC	r0x07, F
000aee   c005     movff	0x5, 0xfe9         	MOVFF	r0x05, FSR0L
000af0   ffe9
000af2   c006     movff	0x6, 0xfea         	MOVFF	r0x06, FSR0H
000af4   ffea
000af6   cfef     movff	0xfef, 0x5         	MOVFF	INDF0, r0x05
000af8   f005
000afa   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
000afc   ffe5
000afe   c001     movff	0x1, 0xfe9         	MOVFF	r0x01, FSR0L
000b00   ffe9
000b02   c002     movff	0x2, 0xff3         	MOVFF	r0x02, PRODL
000b04   fff3
000b06   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
000b08   ec47     call	0x1c8e, 0           	CALL	__gptrput1
000b0a   f00e
                                           ;	.line	72; ep1.c	for(j=0;j<sizeof(adc_cfg);j++) {
000b0c   c004     movff	0x4, 0             	MOVFF	r0x04, r0x00
000b0e   f000
000b10   ef5b     goto	0xab6               	GOTO	_00131_DS_
000b12   f005
                                           _00134_DS_:
                                           ;	.line	75; ep1.c	ep2_num_bytes_to_send = sizeof(ack);
000b14   0e03     movlw	0x3                	MOVLW	0x03
000b16   0100     movlb	0                  	BANKSEL	_ep2_num_bytes_to_send
000b18   6f8f     movwf	0x8f, 0x1          	MOVWF	_ep2_num_bytes_to_send, B
000b1a   0100     movlb	0                  	BANKSEL	(_ep2_num_bytes_to_send + 1)
000b1c   6b90     clrf	0x90, 0x1           	CLRF	(_ep2_num_bytes_to_send + 1), B
                                           ;	.line	76; ep1.c	ep2_source_data = (uchar __code *) ack;
000b1e   0eb6     movlw	0xb6               	MOVLW	LOW(_ack)
000b20   0100     movlb	0                  	BANKSEL	_ep2_source_data
000b22   6f8a     movwf	0x8a, 0x1          	MOVWF	_ep2_source_data, B
000b24   0e09     movlw	0x9                	MOVLW	HIGH(_ack)
000b26   0100     movlb	0                  	BANKSEL	(_ep2_source_data + 1)
000b28   6f8b     movwf	0x8b, 0x1          	MOVWF	(_ep2_source_data + 1), B
000b2a   0e00     movlw	0                  	MOVLW	UPPER(_ack)
000b2c   0100     movlb	0                  	BANKSEL	(_ep2_source_data + 2)
000b2e   6f8c     movwf	0x8c, 0x1          	MOVWF	(_ep2_source_data + 2), B
                                           ;	.line	77; ep1.c	prepare_ep2_in();
000b30   ec4c     call	0x1698, 0           	CALL	_prepare_ep2_in
000b32   f00b
                                           ;	.line	78; ep1.c	break;
000b34   eff0     goto	0xbe0               	GOTO	_00123_DS_
000b36   f005
                                           _00115_DS_:
000b38   0100     movlb	0                  	BANKSEL	_adc_flags
                                           ;	.line	81; ep1.c	if(adc_flags.adc_sampling==0) {
000b3a   b16d     btfsc	0x6d, 0, 0x1       	BTFSC	_adc_flags, 0, B
000b3c   ef01     goto	0xc02               	GOTO	_00130_DS_
000b3e   f006
                                           ;	.line	82; ep1.c	adc_init();
000b40   ec08     call	0x1810, 0           	CALL	_adc_init
000b42   f00c
                                           ;	.line	83; ep1.c	adc_start();
000b44   ecfa     call	0x13f4, 0           	CALL	_adc_start
000b46   f009
                                           ;	.line	84; ep1.c	ep2_num_bytes_to_send = sizeof(ack);
000b48   0e03     movlw	0x3                	MOVLW	0x03
000b4a   0100     movlb	0                  	BANKSEL	_ep2_num_bytes_to_send
000b4c   6f8f     movwf	0x8f, 0x1          	MOVWF	_ep2_num_bytes_to_send, B
000b4e   0100     movlb	0                  	BANKSEL	(_ep2_num_bytes_to_send + 1)
000b50   6b90     clrf	0x90, 0x1           	CLRF	(_ep2_num_bytes_to_send + 1), B
                                           ;	.line	85; ep1.c	ep2_source_data = (uchar __code *) ack;
000b52   0eb6     movlw	0xb6               	MOVLW	LOW(_ack)
000b54   0100     movlb	0                  	BANKSEL	_ep2_source_data
000b56   6f8a     movwf	0x8a, 0x1          	MOVWF	_ep2_source_data, B
000b58   0e09     movlw	0x9                	MOVLW	HIGH(_ack)
000b5a   0100     movlb	0                  	BANKSEL	(_ep2_source_data + 1)
000b5c   6f8b     movwf	0x8b, 0x1          	MOVWF	(_ep2_source_data + 1), B
000b5e   0e00     movlw	0                  	MOVLW	UPPER(_ack)
000b60   0100     movlb	0                  	BANKSEL	(_ep2_source_data + 2)
000b62   6f8c     movwf	0x8c, 0x1          	MOVWF	(_ep2_source_data + 2), B
                                           ;	.line	86; ep1.c	prepare_ep2_in();
000b64   ec4c     call	0x1698, 0           	CALL	_prepare_ep2_in
000b66   f00b
000b68   eff0     goto	0xbe0               	GOTO	_00123_DS_
000b6a   f005
                                           _00119_DS_:
                                           ;	.line	93; ep1.c	adc_stop();
000b6c   ec27     call	0x1c4e, 0           	CALL	_adc_stop
000b6e   f00e
                                           ;	.line	94; ep1.c	ep2_num_bytes_to_send = sizeof(ack);
000b70   0e03     movlw	0x3                	MOVLW	0x03
000b72   0100     movlb	0                  	BANKSEL	_ep2_num_bytes_to_send
000b74   6f8f     movwf	0x8f, 0x1          	MOVWF	_ep2_num_bytes_to_send, B
000b76   0100     movlb	0                  	BANKSEL	(_ep2_num_bytes_to_send + 1)
000b78   6b90     clrf	0x90, 0x1           	CLRF	(_ep2_num_bytes_to_send + 1), B
                                           ;	.line	95; ep1.c	ep2_source_data = (uchar __code *) ack;
000b7a   0eb6     movlw	0xb6               	MOVLW	LOW(_ack)
000b7c   0100     movlb	0                  	BANKSEL	_ep2_source_data
000b7e   6f8a     movwf	0x8a, 0x1          	MOVWF	_ep2_source_data, B
000b80   0e09     movlw	0x9                	MOVLW	HIGH(_ack)
000b82   0100     movlb	0                  	BANKSEL	(_ep2_source_data + 1)
000b84   6f8b     movwf	0x8b, 0x1          	MOVWF	(_ep2_source_data + 1), B
000b86   0e00     movlw	0                  	MOVLW	UPPER(_ack)
000b88   0100     movlb	0                  	BANKSEL	(_ep2_source_data + 2)
000b8a   6f8c     movwf	0x8c, 0x1          	MOVWF	(_ep2_source_data + 2), B
                                           ;	.line	96; ep1.c	prepare_ep2_in();
000b8c   ec4c     call	0x1698, 0           	CALL	_prepare_ep2_in
000b8e   f00b
                                           ;	.line	97; ep1.c	break;
000b90   eff0     goto	0xbe0               	GOTO	_00123_DS_
000b92   f005
                                           _00120_DS_:
                                           ;	.line	100; ep1.c	adc_stop();
000b94   ec27     call	0x1c4e, 0           	CALL	_adc_stop
000b96   f00e
                                           ;	.line	101; ep1.c	ep2_num_bytes_to_send =2;
000b98   0e02     movlw	0x2                	MOVLW	0x02
000b9a   0100     movlb	0                  	BANKSEL	_ep2_num_bytes_to_send
000b9c   6f8f     movwf	0x8f, 0x1          	MOVWF	_ep2_num_bytes_to_send, B
000b9e   0100     movlb	0                  	BANKSEL	(_ep2_num_bytes_to_send + 1)
000ba0   6b90     clrf	0x90, 0x1           	CLRF	(_ep2_num_bytes_to_send + 1), B
                                           ;	.line	102; ep1.c	ep2_source_data = &adc_int_nr;
000ba2   0e00     movlw	0                  	MOVLW	HIGH(_adc_int_nr)
000ba4   0100     movlb	0                  	BANKSEL	(_ep2_source_data + 1)
000ba6   6f8b     movwf	0x8b, 0x1          	MOVWF	(_ep2_source_data + 1), B
000ba8   0e6f     movlw	0x6f               	MOVLW	LOW(_adc_int_nr)
000baa   0100     movlb	0                  	BANKSEL	_ep2_source_data
000bac   6f8a     movwf	0x8a, 0x1          	MOVWF	_ep2_source_data, B
000bae   0e80     movlw	0x80               	MOVLW	0x80
000bb0   0100     movlb	0                  	BANKSEL	(_ep2_source_data + 2)
000bb2   6f8c     movwf	0x8c, 0x1          	MOVWF	(_ep2_source_data + 2), B
                                           ;	.line	103; ep1.c	prepare_ep2_in();
000bb4   ec4c     call	0x1698, 0           	CALL	_prepare_ep2_in
000bb6   f00b
                                           ;	.line	104; ep1.c	break;
000bb8   eff0     goto	0xbe0               	GOTO	_00123_DS_
000bba   f005
                                           _00121_DS_:
                                           ;	.line	107; ep1.c	adc_stop();
000bbc   ec27     call	0x1c4e, 0           	CALL	_adc_stop
000bbe   f00e
                                           ;	.line	108; ep1.c	ep2_num_bytes_to_send =sizeof(adc_cfg);
000bc0   0e0b     movlw	0xb                	MOVLW	0x0b
000bc2   0100     movlb	0                  	BANKSEL	_ep2_num_bytes_to_send
000bc4   6f8f     movwf	0x8f, 0x1          	MOVWF	_ep2_num_bytes_to_send, B
000bc6   0100     movlb	0                  	BANKSEL	(_ep2_num_bytes_to_send + 1)
000bc8   6b90     clrf	0x90, 0x1           	CLRF	(_ep2_num_bytes_to_send + 1), B
                                           ;	.line	109; ep1.c	ep2_source_data = &adc_cfg;
000bca   0e00     movlw	0                  	MOVLW	HIGH(_adc_cfg)
000bcc   0100     movlb	0                  	BANKSEL	(_ep2_source_data + 1)
000bce   6f8b     movwf	0x8b, 0x1          	MOVWF	(_ep2_source_data + 1), B
000bd0   0e60     movlw	0x60               	MOVLW	LOW(_adc_cfg)
000bd2   0100     movlb	0                  	BANKSEL	_ep2_source_data
000bd4   6f8a     movwf	0x8a, 0x1          	MOVWF	_ep2_source_data, B
000bd6   0e80     movlw	0x80               	MOVLW	0x80
000bd8   0100     movlb	0                  	BANKSEL	(_ep2_source_data + 2)
000bda   6f8c     movwf	0x8c, 0x1          	MOVWF	(_ep2_source_data + 2), B
                                           ;	.line	110; ep1.c	prepare_ep2_in();
000bdc   ec4c     call	0x1698, 0           	CALL	_prepare_ep2_in
000bde   f00b
                                           _00123_DS_:
                                           ;	.line	117; ep1.c	EP_OUT_BD(1).Cnt = EP1_BUFFER_SIZE;
000be0   0e40     movlw	0x40               	MOVLW	0x40
000be2   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 9)
000be4   6f09     movwf	0x9, 0x1           	MOVWF	(_ep_bdt + 9), B
000be6   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 8)
                                           ;	.line	118; ep1.c	if(EP_OUT_BD(1).Stat.DTS == 0)
000be8   bd08     btfsc	0x8, 0x6, 0x1      	BTFSC	(_ep_bdt + 8), 6, B
000bea   effc     goto	0xbf8               	GOTO	_00125_DS_
000bec   f005
                                           ;	.line	120; ep1.c	EP_OUT_BD(1).Stat.uc = BDS_USIE | BDS_DAT1 | BDS_DTSEN;
000bee   0ec8     movlw	0xc8               	MOVLW	0xc8
000bf0   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 8)
000bf2   6f08     movwf	0x8, 0x1           	MOVWF	(_ep_bdt + 8), B
000bf4   efff     goto	0xbfe               	GOTO	_00129_DS_
000bf6   f005
                                           _00125_DS_:
                                           ;	.line	124; ep1.c	EP_OUT_BD(1).Stat.uc = BDS_USIE | BDS_DAT0 | BDS_DTSEN;
000bf8   0e88     movlw	0x88               	MOVLW	0x88
000bfa   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 8)
000bfc   6f08     movwf	0x8, 0x1           	MOVWF	(_ep_bdt + 8), B
                                           _00129_DS_:
                                           ;	.line	131; ep1.c	return;
000bfe   ef0d     goto	0xc1a               	GOTO	_00135_DS_
000c00   f006
                                           _00130_DS_:
                                           ;	.line	133; ep1.c	EP_OUT_BD(1).Cnt = EP1_BUFFER_SIZE;
000c02   0e40     movlw	0x40               	MOVLW	0x40
000c04   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 9)
000c06   6f09     movwf	0x9, 0x1           	MOVWF	(_ep_bdt + 9), B
                                           ;	.line	134; ep1.c	EP_OUT_BD(1).ADR = (uchar __data *)&ep1_OutBuffer;
000c08   0e10     movlw	0x10               	MOVLW	0x10
000c0a   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 10)
000c0c   6f0a     movwf	0xa, 0x1           	MOVWF	(_ep_bdt + 10), B
000c0e   0e05     movlw	0x5                	MOVLW	0x05
000c10   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 11)
000c12   6f0b     movwf	0xb, 0x1           	MOVWF	(_ep_bdt + 11), B
                                           ;	.line	135; ep1.c	EP_OUT_BD(1).Stat.uc = BDS_USIE | BDS_BSTALL;
000c14   0e84     movlw	0x84               	MOVLW	0x84
000c16   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 8)
000c18   6f08     movwf	0x8, 0x1           	MOVWF	(_ep_bdt + 8), B
                                           _00135_DS_:
                                           ;	.line	136; ep1.c	return;
000c1a   cfe4     movff	0xfe4, 0x7         	MOVFF	PREINC1, r0x07
000c1c   f007
000c1e   cfe4     movff	0xfe4, 0x6         	MOVFF	PREINC1, r0x06
000c20   f006
000c22   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
000c24   f005
000c26   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
000c28   f004
000c2a   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
000c2c   f003
000c2e   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
000c30   f002
000c32   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
000c34   f001
000c36   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
000c38   f000
000c3a   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
000c3c   ffd9
000c3e   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ep1__ep1_init	code
                                           _ep1_init:
                                           ;	.line	40; ep1.c	void ep1_init(void)
001b7a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001b7c   ffe5
001b7e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001b80   ffd9
                                           ;	.line	43; ep1.c	EP_OUT_BD(1).Cnt = EP1_BUFFER_SIZE;
001b82   0e40     movlw	0x40               	MOVLW	0x40
001b84   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 9)
001b86   6f09     movwf	0x9, 0x1           	MOVWF	(_ep_bdt + 9), B
                                           ;	.line	44; ep1.c	EP_OUT_BD(1).ADR = (uchar __data *)&ep1_OutBuffer;
001b88   0e10     movlw	0x10               	MOVLW	0x10
001b8a   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 10)
001b8c   6f0a     movwf	0xa, 0x1           	MOVWF	(_ep_bdt + 10), B
001b8e   0e05     movlw	0x5                	MOVLW	0x05
001b90   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 11)
001b92   6f0b     movwf	0xb, 0x1           	MOVWF	(_ep_bdt + 11), B
                                           ;	.line	45; ep1.c	EP_OUT_BD(1).Stat.uc = BDS_USIE | BDS_DAT0 | BDS_DTSEN;
001b94   0e88     movlw	0x88               	MOVLW	0x88
001b96   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 8)
001b98   6f08     movwf	0x8, 0x1           	MOVWF	(_ep_bdt + 8), B
                                           ;	.line	46; ep1.c	UEP1 = EPHSHK_EN | EPOUTEN_EN | EPCONDIS_EN;       // Init EP1 as an OUT EP
001b9a   0e1c     movlw	0x1c               	MOVLW	0x1c
001b9c   6e71     movwf	0x71, 0            	MOVWF	_UEP1
001b9e   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001ba0   ffd9
001ba2   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _id_msg:
0009a4   5355     movf	0x55, 0x1, 0x1      	DB	0x55, 0x53, 0x42, 0x20, 0x41, 0x44, 0x43, 0x20, 0x76, 0x65, 0x72, 0x2e
0009a6   2042     addwfc	0x42, 0, 0        
0009a8   4441     rlncf	0x41, 0, 0         
0009aa   2043     addwfc	0x43, 0, 0        
0009ac   6576     cpfsgt	0x76, 0x1         
0009ae   2e72     decfsz	0x72, 0x1, 0      
0009b0   3120     rrcf	0x20, 0, 0x1        	DB	0x20, 0x31, 0x2e, 0x31, 0x00
0009b2   312e     rrcf	0x2e, 0, 0x1        
0009b4   0000     nop                      
                                           ; ; Starting pCode block for Ival
                                           _ack:
0009b6   4b4f     infsnz	0x4f, 0x1, 0x1    	DB	0x4f, 0x4b, 0x00
0009b8   0000     nop                      
                                           ; ; Starting pCode block for Ival
                                           _nack:
0009ba   5245     movf	0x45, 0x1, 0        	DB	0x45, 0x52, 0x52, 0x4f, 0x52, 0x00
0009bc   4f52     dcfsnz	0x52, 0x1, 0x1    
0009be   0052     dw	0x52  ;unknown opcode 
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  670 (0x029e) bytes ( 0.51%)
                                           ;           	  335 (0x014f) words
                                           ; udata size:	   66 (0x0042) bytes ( 3.68%)
                                           ; access size:	   10 (0x000a) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Aug 16 2006)
                                           ; This file generated Fri Sep 15 11:04:58 2006
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4455
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _ep2_init
                                           	global _prepare_ep2_in
                                           	global _ep2_in
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _ep_bdt
                                           	extern _usb_device_state
                                           	extern _usb_active_cfg
                                           	extern _usb_active_alt_setting
                                           	extern _device_descriptor
                                           	extern _configuration_descriptor
                                           	extern _string_descriptor
                                           	extern _ep_init
                                           	extern _ep_in
                                           	extern _ep_out
                                           	extern _ep_setup
                                           	extern _ep2_num_bytes_to_send
                                           	extern _ep2_source_data
                                           	extern _SPPDATAbits
                                           	extern _SPPCFGbits
                                           	extern _SPPEPSbits
                                           	extern _SPPCONbits
                                           	extern _UFRMLbits
                                           	extern _UFRMHbits
                                           	extern _UIRbits
                                           	extern _UIEbits
                                           	extern _UEIRbits
                                           	extern _UEIEbits
                                           	extern _USTATbits
                                           	extern _UCONbits
                                           	extern _UADDRbits
                                           	extern _UCFGbits
                                           	extern _UEP0bits
                                           	extern _UEP1bits
                                           	extern _UEP2bits
                                           	extern _UEP3bits
                                           	extern _UEP4bits
                                           	extern _UEP5bits
                                           	extern _UEP6bits
                                           	extern _UEP7bits
                                           	extern _UEP8bits
                                           	extern _UEP9bits
                                           	extern _UEP10bits
                                           	extern _UEP11bits
                                           	extern _UEP12bits
                                           	extern _UEP13bits
                                           	extern _UEP14bits
                                           	extern _UEP15bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _SPPDATA
                                           	extern _SPPCFG
                                           	extern _SPPEPS
                                           	extern _SPPCON
                                           	extern _UFRML
                                           	extern _UFRMH
                                           	extern _UIR
                                           	extern _UIE
                                           	extern _UEIR
                                           	extern _UEIE
                                           	extern _USTAT
                                           	extern _UCON
                                           	extern _UADDR
                                           	extern _UCFG
                                           	extern _UEP0
                                           	extern _UEP1
                                           	extern _UEP2
                                           	extern _UEP3
                                           	extern _UEP4
                                           	extern _UEP5
                                           	extern _UEP6
                                           	extern _UEP7
                                           	extern _UEP8
                                           	extern _UEP9
                                           	extern _UEP10
                                           	extern _UEP11
                                           	extern _UEP12
                                           	extern _UEP13
                                           	extern _UEP14
                                           	extern _UEP15
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _ECCP1DEL
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _ECCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           	extern _fill_in_buffer
                                           	extern _boot_device_descriptor
                                           	extern _boot_configuration_descriptor
                                           	extern _boot_string_descriptor
                                           	extern _str0
                                           	extern _str1
                                           	extern _str2
                                           	extern _str3
                                           	extern _boot_ep_init
                                           	extern _boot_ep_in
                                           	extern _boot_ep_out
                                           	extern _boot_ep_setup
                                           	extern _section_descriptor
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           r0x03	res	1
                                           r0x04	res	1
                                           r0x05	res	1
                                           
                                           udata_ep2_0	udata
                                           _last_send_was_null	res	1
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_ep2__ep2_in	code
                                           _ep2_in:
                                           ;	.line	62; ep2.c	void ep2_in(void)
0015be   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
0015c0   ffe5
0015c2   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
0015c4   ffd9
0015c6   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0015c8   ffe5
0015ca   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0015cc   ffe5
0015ce   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0015d0   ffe5
0015d2   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0015d4   ffe5
0015d6   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0015d8   ffe5
0015da   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0015dc   ffe5
0015de   0100     movlb	0                  	BANKSEL	_ep2_num_bytes_to_send
                                           ;	.line	65; ep2.c	if((ep2_num_bytes_to_send == 0) && last_send_was_null)
0015e0   518f     movf	0x8f, 0, 0x1        	MOVF	_ep2_num_bytes_to_send, W, B
0015e2   0100     movlb	0                  	BANKSEL	(_ep2_num_bytes_to_send + 1)
0015e4   1190     iorwf	0x90, 0, 0x1       	IORWF	(_ep2_num_bytes_to_send + 1), W, B
0015e6   a4d8     btfss	0xd8, 0x2, 0       	BTFSS	STATUS, 2
0015e8   effd     goto	0x15fa              	GOTO	_00122_DS_
0015ea   f00a
0015ec   0100     movlb	0                  	BANKSEL	_last_send_was_null
0015ee   51a4     movf	0xa4, 0, 0x1        	MOVF	_last_send_was_null, W, B
0015f0   b4d8     btfsc	0xd8, 0x2, 0       	BTFSC	STATUS, 2
0015f2   effd     goto	0x15fa              	GOTO	_00122_DS_
0015f4   f00a
                                           ;	.line	69; ep2.c	return;
0015f6   ef3d     goto	0x167a              	GOTO	_00127_DS_
0015f8   f00b
                                           _00122_DS_:
                                           ;	.line	71; ep2.c	last_send_was_null = (ep2_num_bytes_to_send < EP2_BUFFER_SIZE);
0015fa   0e00     movlw	0                  	MOVLW	0x00
0015fc   0100     movlb	0                  	BANKSEL	(_ep2_num_bytes_to_send + 1)
0015fe   5d90     subwf	0x90, 0, 0x1       	SUBWF	(_ep2_num_bytes_to_send + 1), W, B
001600   e103     bnz	0x1608               	BNZ	_00133_DS_
001602   0e40     movlw	0x40               	MOVLW	0x40
001604   0100     movlb	0                  	BANKSEL	_ep2_num_bytes_to_send
001606   5d8f     subwf	0x8f, 0, 0x1       	SUBWF	_ep2_num_bytes_to_send, W, B
                                           _00133_DS_:
001608   70d8     btg	0xd8, 0, 0           	BTG	STATUS, 0
00160a   0100     movlb	0                  	BANKSEL	_last_send_was_null
00160c   6ba4     clrf	0xa4, 0x1           	CLRF	_last_send_was_null, B
00160e   0100     movlb	0                  	BANKSEL	_last_send_was_null
001610   37a4     rlcf	0xa4, 0x1, 0x1      	RLCF	_last_send_was_null, F, B
001612   0100     movlb	0                  	BANKSEL	_ep2_num_bytes_to_send
                                           ;	.line	72; ep2.c	EP_IN_BD(2).Cnt = ep2_num_bytes_to_send;
001614   518f     movf	0x8f, 0, 0x1        	MOVF	_ep2_num_bytes_to_send, W, B
001616   6e00     movwf	0, 0               	MOVWF	r0x00
001618   5000     movf	0, 0, 0             	MOVF	r0x00, W
00161a   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 21)
00161c   6f15     movwf	0x15, 0x1          	MOVWF	(_ep_bdt + 21), B
                                           ;	.line	73; ep2.c	fill_in_buffer(2, &ep2_source_data, EP2_BUFFER_SIZE, &ep2_num_bytes_to_send);
00161e   0e00     movlw	0                  	MOVLW	HIGH(_ep2_source_data)
001620   6e01     movwf	0x1, 0             	MOVWF	r0x01
001622   0e8a     movlw	0x8a               	MOVLW	LOW(_ep2_source_data)
001624   6e00     movwf	0, 0               	MOVWF	r0x00
001626   0e80     movlw	0x80               	MOVLW	0x80
001628   6e02     movwf	0x2, 0             	MOVWF	r0x02
00162a   0e00     movlw	0                  	MOVLW	HIGH(_ep2_num_bytes_to_send)
00162c   6e04     movwf	0x4, 0             	MOVWF	r0x04
00162e   0e8f     movlw	0x8f               	MOVLW	LOW(_ep2_num_bytes_to_send)
001630   6e03     movwf	0x3, 0             	MOVWF	r0x03
001632   0e80     movlw	0x80               	MOVLW	0x80
001634   6e05     movwf	0x5, 0             	MOVWF	r0x05
001636   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001638   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00163a   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
00163c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00163e   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
001640   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001642   0e00     movlw	0                  	MOVLW	0x00
001644   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001646   0e40     movlw	0x40               	MOVLW	0x40
001648   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00164a   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
00164c   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00164e   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
001650   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001652   5000     movf	0, 0, 0             	MOVF	r0x00, W
001654   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001656   0e02     movlw	0x2                	MOVLW	0x02
001658   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00165a   ec20     call	0xc40, 0            	CALL	_fill_in_buffer
00165c   f006
00165e   0e09     movlw	0x9                	MOVLW	0x09
001660   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
001662   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 20)
                                           ;	.line	74; ep2.c	if(EP_IN_BD(2).Stat.DTS == 0)
001664   bd14     btfsc	0x14, 0x6, 0x1     	BTFSC	(_ep_bdt + 20), 6, B
001666   ef3a     goto	0x1674              	GOTO	_00125_DS_
001668   f00b
                                           ;	.line	76; ep2.c	EP_IN_BD(2).Stat.uc = BDS_USIE | BDS_DAT1 | BDS_DTSEN;
00166a   0ec8     movlw	0xc8               	MOVLW	0xc8
00166c   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 20)
00166e   6f14     movwf	0x14, 0x1          	MOVWF	(_ep_bdt + 20), B
001670   ef3d     goto	0x167a              	GOTO	_00127_DS_
001672   f00b
                                           _00125_DS_:
                                           ;	.line	80; ep2.c	EP_IN_BD(2).Stat.uc = BDS_USIE | BDS_DAT0 | BDS_DTSEN;
001674   0e88     movlw	0x88               	MOVLW	0x88
001676   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 20)
001678   6f14     movwf	0x14, 0x1          	MOVWF	(_ep_bdt + 20), B
                                           _00127_DS_:
00167a   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
00167c   f005
00167e   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
001680   f004
001682   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
001684   f003
001686   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001688   f002
00168a   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
00168c   f001
00168e   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001690   f000
001692   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001694   ffd9
001696   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ep2__prepare_ep2_in	code
                                           _prepare_ep2_in:
                                           ;	.line	45; ep2.c	void prepare_ep2_in(void)
001698   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
00169a   ffe5
00169c   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
00169e   ffd9
0016a0   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
0016a2   ffe5
0016a4   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
0016a6   ffe5
0016a8   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
0016aa   ffe5
0016ac   c003     movff	0x3, 0xfe5         	MOVFF	r0x03, POSTDEC1
0016ae   ffe5
0016b0   c004     movff	0x4, 0xfe5         	MOVFF	r0x04, POSTDEC1
0016b2   ffe5
0016b4   c005     movff	0x5, 0xfe5         	MOVFF	r0x05, POSTDEC1
0016b6   ffe5
                                           ;	.line	48; ep2.c	last_send_was_null = (ep2_num_bytes_to_send < EP2_BUFFER_SIZE);
0016b8   0e00     movlw	0                  	MOVLW	0x00
0016ba   0100     movlb	0                  	BANKSEL	(_ep2_num_bytes_to_send + 1)
0016bc   5d90     subwf	0x90, 0, 0x1       	SUBWF	(_ep2_num_bytes_to_send + 1), W, B
0016be   e103     bnz	0x16c6               	BNZ	_00116_DS_
0016c0   0e40     movlw	0x40               	MOVLW	0x40
0016c2   0100     movlb	0                  	BANKSEL	_ep2_num_bytes_to_send
0016c4   5d8f     subwf	0x8f, 0, 0x1       	SUBWF	_ep2_num_bytes_to_send, W, B
                                           _00116_DS_:
0016c6   70d8     btg	0xd8, 0, 0           	BTG	STATUS, 0
0016c8   0100     movlb	0                  	BANKSEL	_last_send_was_null
0016ca   6ba4     clrf	0xa4, 0x1           	CLRF	_last_send_was_null, B
0016cc   0100     movlb	0                  	BANKSEL	_last_send_was_null
0016ce   37a4     rlcf	0xa4, 0x1, 0x1      	RLCF	_last_send_was_null, F, B
0016d0   0100     movlb	0                  	BANKSEL	_ep2_num_bytes_to_send
                                           ;	.line	49; ep2.c	EP_IN_BD(2).Cnt = ep2_num_bytes_to_send;
0016d2   518f     movf	0x8f, 0, 0x1        	MOVF	_ep2_num_bytes_to_send, W, B
0016d4   6e00     movwf	0, 0               	MOVWF	r0x00
0016d6   5000     movf	0, 0, 0             	MOVF	r0x00, W
0016d8   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 21)
0016da   6f15     movwf	0x15, 0x1          	MOVWF	(_ep_bdt + 21), B
                                           ;	.line	50; ep2.c	EP_IN_BD(2).ADR = (uchar __data *)&ep2_InBuffer;
0016dc   0e50     movlw	0x50               	MOVLW	0x50
0016de   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 22)
0016e0   6f16     movwf	0x16, 0x1          	MOVWF	(_ep_bdt + 22), B
0016e2   0e05     movlw	0x5                	MOVLW	0x05
0016e4   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 23)
0016e6   6f17     movwf	0x17, 0x1          	MOVWF	(_ep_bdt + 23), B
                                           ;	.line	51; ep2.c	fill_in_buffer(2, &ep2_source_data, EP2_BUFFER_SIZE, &ep2_num_bytes_to_send);
0016e8   0e00     movlw	0                  	MOVLW	HIGH(_ep2_source_data)
0016ea   6e01     movwf	0x1, 0             	MOVWF	r0x01
0016ec   0e8a     movlw	0x8a               	MOVLW	LOW(_ep2_source_data)
0016ee   6e00     movwf	0, 0               	MOVWF	r0x00
0016f0   0e80     movlw	0x80               	MOVLW	0x80
0016f2   6e02     movwf	0x2, 0             	MOVWF	r0x02
0016f4   0e00     movlw	0                  	MOVLW	HIGH(_ep2_num_bytes_to_send)
0016f6   6e04     movwf	0x4, 0             	MOVWF	r0x04
0016f8   0e8f     movlw	0x8f               	MOVLW	LOW(_ep2_num_bytes_to_send)
0016fa   6e03     movwf	0x3, 0             	MOVWF	r0x03
0016fc   0e80     movlw	0x80               	MOVLW	0x80
0016fe   6e05     movwf	0x5, 0             	MOVWF	r0x05
001700   5005     movf	0x5, 0, 0           	MOVF	r0x05, W
001702   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001704   5004     movf	0x4, 0, 0           	MOVF	r0x04, W
001706   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001708   5003     movf	0x3, 0, 0           	MOVF	r0x03, W
00170a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00170c   0e00     movlw	0                  	MOVLW	0x00
00170e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001710   0e40     movlw	0x40               	MOVLW	0x40
001712   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001714   5002     movf	0x2, 0, 0           	MOVF	r0x02, W
001716   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001718   5001     movf	0x1, 0, 0           	MOVF	r0x01, W
00171a   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
00171c   5000     movf	0, 0, 0             	MOVF	r0x00, W
00171e   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001720   0e02     movlw	0x2                	MOVLW	0x02
001722   6ee5     movwf	0xe5, 0            	MOVWF	POSTDEC1
001724   ec20     call	0xc40, 0            	CALL	_fill_in_buffer
001726   f006
001728   0e09     movlw	0x9                	MOVLW	0x09
00172a   26e1     addwf	0xe1, 0x1, 0       	ADDWF	FSR1L, F
00172c   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 20)
                                           ;	.line	52; ep2.c	if(EP_IN_BD(2).Stat.DTS == 0)
00172e   bd14     btfsc	0x14, 0x6, 0x1     	BTFSC	(_ep_bdt + 20), 6, B
001730   ef9f     goto	0x173e              	GOTO	_00110_DS_
001732   f00b
                                           ;	.line	54; ep2.c	EP_IN_BD(2).Stat.uc = BDS_USIE | BDS_DAT1 | BDS_DTSEN;
001734   0ec8     movlw	0xc8               	MOVLW	0xc8
001736   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 20)
001738   6f14     movwf	0x14, 0x1          	MOVWF	(_ep_bdt + 20), B
00173a   efa2     goto	0x1744              	GOTO	_00112_DS_
00173c   f00b
                                           _00110_DS_:
                                           ;	.line	58; ep2.c	EP_IN_BD(2).Stat.uc = BDS_USIE | BDS_DAT0 | BDS_DTSEN;
00173e   0e88     movlw	0x88               	MOVLW	0x88
001740   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 20)
001742   6f14     movwf	0x14, 0x1          	MOVWF	(_ep_bdt + 20), B
                                           _00112_DS_:
001744   cfe4     movff	0xfe4, 0x5         	MOVFF	PREINC1, r0x05
001746   f005
001748   cfe4     movff	0xfe4, 0x4         	MOVFF	PREINC1, r0x04
00174a   f004
00174c   cfe4     movff	0xfe4, 0x3         	MOVFF	PREINC1, r0x03
00174e   f003
001750   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001752   f002
001754   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001756   f001
001758   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
00175a   f000
00175c   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
00175e   ffd9
001760   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_ep2__ep2_init	code
                                           _ep2_init:
                                           ;	.line	35; ep2.c	void ep2_init(void)
001c1e   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001c20   ffe5
001c22   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001c24   ffd9
                                           ;	.line	41; ep2.c	EP_IN_BD(2).Stat.uc = BDS_UCPU | BDS_DAT1 | BDS_DTSEN;
001c26   0e48     movlw	0x48               	MOVLW	0x48
001c28   0104     movlb	0x4                	BANKSEL	(_ep_bdt + 20)
001c2a   6f14     movwf	0x14, 0x1          	MOVWF	(_ep_bdt + 20), B
                                           ;	.line	42; ep2.c	UEP2 = EPHSHK_EN | EPINEN_EN | EPCONDIS_EN;       // Init EP2 as an IN EP
001c2c   0e1a     movlw	0x1a               	MOVLW	0x1a
001c2e   6e72     movwf	0x72, 0            	MOVWF	_UEP2
001c30   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001c32   ffd9
001c34   0012     return	0                 	RETURN	
                                           
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  444 (0x01bc) bytes ( 0.34%)
                                           ;           	  222 (0x00de) words
                                           ; udata size:	    1 (0x0001) bytes ( 0.06%)
                                           ; access size:	    6 (0x0006) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Aug 16 2006)
                                           ; This file generated Fri Sep 15 11:04:58 2006
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4455
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _application_data
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; ; Starting pCode block for absolute Ival
                                           S_application__application_data	code	0X002030
                                           _application_data:
002030   00ff     reset                    	DB	0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
002032   0000     nop                      
002034   0000     nop                      
002036   0000     nop                      
002038   0000     nop                      
00203a   0000     nop                      
00203c   0000     nop                      	DB	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
00203e   0000     nop                      
002040   0000     nop                      
002042   0000     nop                      
002044   0000     nop                      
002046   0000     nop                      
002048   0000     nop                      	DB	0x00
                                           
                                           ; I code from now on!
                                           
                                           
                                           ; Statistics:
                                           ; code size:	    6 (0x0006) bytes ( 0.00%)
                                           ;           	    3 (0x0003) words
                                           ; udata size:	    0 (0x0000) bytes ( 0.00%)
                                           ; access size:	    0 (0x0000) bytes
                                           
                                           
                                           	end
                                           ;--------------------------------------------------------
                                           ; File Created by SDCC : FreeWare ANSI-C Compiler
                                           ; Version 2.6.0 #4309 (Aug 16 2006)
                                           ; This file generated Fri Sep 15 11:04:58 2006
                                           ;--------------------------------------------------------
                                           ; PIC16 port for the Microchip 16-bit core micros
                                           ;--------------------------------------------------------
                                           	list	p=18f4455
                                           
                                           	radix dec
                                           
                                           ;--------------------------------------------------------
                                           ; public variables in this module
                                           ;--------------------------------------------------------
                                           	global _ep2_source_data
                                           	global _ep2_num_bytes_to_send
                                           	global _write_block
                                           	global _erase_block
                                           	global _section_descriptor
                                           
                                           ;--------------------------------------------------------
                                           ; extern variables in this module
                                           ;--------------------------------------------------------
                                           	extern _SPPDATAbits
                                           	extern _SPPCFGbits
                                           	extern _SPPEPSbits
                                           	extern _SPPCONbits
                                           	extern _UFRMLbits
                                           	extern _UFRMHbits
                                           	extern _UIRbits
                                           	extern _UIEbits
                                           	extern _UEIRbits
                                           	extern _UEIEbits
                                           	extern _USTATbits
                                           	extern _UCONbits
                                           	extern _UADDRbits
                                           	extern _UCFGbits
                                           	extern _UEP0bits
                                           	extern _UEP1bits
                                           	extern _UEP2bits
                                           	extern _UEP3bits
                                           	extern _UEP4bits
                                           	extern _UEP5bits
                                           	extern _UEP6bits
                                           	extern _UEP7bits
                                           	extern _UEP8bits
                                           	extern _UEP9bits
                                           	extern _UEP10bits
                                           	extern _UEP11bits
                                           	extern _UEP12bits
                                           	extern _UEP13bits
                                           	extern _UEP14bits
                                           	extern _UEP15bits
                                           	extern _PORTAbits
                                           	extern _PORTBbits
                                           	extern _PORTCbits
                                           	extern _PORTDbits
                                           	extern _PORTEbits
                                           	extern _LATAbits
                                           	extern _LATBbits
                                           	extern _LATCbits
                                           	extern _LATDbits
                                           	extern _LATEbits
                                           	extern _TRISAbits
                                           	extern _TRISBbits
                                           	extern _TRISCbits
                                           	extern _TRISDbits
                                           	extern _TRISEbits
                                           	extern _OSCTUNEbits
                                           	extern _PIE1bits
                                           	extern _PIR1bits
                                           	extern _IPR1bits
                                           	extern _PIE2bits
                                           	extern _PIR2bits
                                           	extern _IPR2bits
                                           	extern _EECON1bits
                                           	extern _RCSTAbits
                                           	extern _TXSTAbits
                                           	extern _T3CONbits
                                           	extern _CMCONbits
                                           	extern _CVRCONbits
                                           	extern _ECCP1ASbits
                                           	extern _ECCP1DELbits
                                           	extern _BAUDCONbits
                                           	extern _CCP2CONbits
                                           	extern _ECCP1CONbits
                                           	extern _ADCON2bits
                                           	extern _ADCON1bits
                                           	extern _ADCON0bits
                                           	extern _SSPCON2bits
                                           	extern _SSPCON1bits
                                           	extern _SSPSTATbits
                                           	extern _T2CONbits
                                           	extern _T1CONbits
                                           	extern _RCONbits
                                           	extern _WDTCONbits
                                           	extern _HLVDCONbits
                                           	extern _OSCCONbits
                                           	extern _T0CONbits
                                           	extern _STATUSbits
                                           	extern _FSR2Hbits
                                           	extern _BSRbits
                                           	extern _FSR1Hbits
                                           	extern _FSR0Hbits
                                           	extern _INTCON3bits
                                           	extern _INTCON2bits
                                           	extern _INTCONbits
                                           	extern _TBLPTRUbits
                                           	extern _PCLATHbits
                                           	extern _PCLATUbits
                                           	extern _STKPTRbits
                                           	extern _TOSUbits
                                           	extern _stdin
                                           	extern _stdout
                                           	extern _SPPDATA
                                           	extern _SPPCFG
                                           	extern _SPPEPS
                                           	extern _SPPCON
                                           	extern _UFRML
                                           	extern _UFRMH
                                           	extern _UIR
                                           	extern _UIE
                                           	extern _UEIR
                                           	extern _UEIE
                                           	extern _USTAT
                                           	extern _UCON
                                           	extern _UADDR
                                           	extern _UCFG
                                           	extern _UEP0
                                           	extern _UEP1
                                           	extern _UEP2
                                           	extern _UEP3
                                           	extern _UEP4
                                           	extern _UEP5
                                           	extern _UEP6
                                           	extern _UEP7
                                           	extern _UEP8
                                           	extern _UEP9
                                           	extern _UEP10
                                           	extern _UEP11
                                           	extern _UEP12
                                           	extern _UEP13
                                           	extern _UEP14
                                           	extern _UEP15
                                           	extern _PORTA
                                           	extern _PORTB
                                           	extern _PORTC
                                           	extern _PORTD
                                           	extern _PORTE
                                           	extern _LATA
                                           	extern _LATB
                                           	extern _LATC
                                           	extern _LATD
                                           	extern _LATE
                                           	extern _TRISA
                                           	extern _TRISB
                                           	extern _TRISC
                                           	extern _TRISD
                                           	extern _TRISE
                                           	extern _OSCTUNE
                                           	extern _PIE1
                                           	extern _PIR1
                                           	extern _IPR1
                                           	extern _PIE2
                                           	extern _PIR2
                                           	extern _IPR2
                                           	extern _EECON1
                                           	extern _EECON2
                                           	extern _EEDATA
                                           	extern _EEADR
                                           	extern _RCSTA
                                           	extern _TXSTA
                                           	extern _TXREG
                                           	extern _RCREG
                                           	extern _SPBRG
                                           	extern _SPBRGH
                                           	extern _T3CON
                                           	extern _TMR3L
                                           	extern _TMR3H
                                           	extern _CMCON
                                           	extern _CVRCON
                                           	extern _ECCP1AS
                                           	extern _ECCP1DEL
                                           	extern _BAUDCON
                                           	extern _CCP2CON
                                           	extern _CCPR2L
                                           	extern _CCPR2H
                                           	extern _ECCP1CON
                                           	extern _CCPR1L
                                           	extern _CCPR1H
                                           	extern _ADCON2
                                           	extern _ADCON1
                                           	extern _ADCON0
                                           	extern _ADRESL
                                           	extern _ADRESH
                                           	extern _SSPCON2
                                           	extern _SSPCON1
                                           	extern _SSPSTAT
                                           	extern _SSPADD
                                           	extern _SSPBUF
                                           	extern _T2CON
                                           	extern _PR2
                                           	extern _TMR2
                                           	extern _T1CON
                                           	extern _TMR1L
                                           	extern _TMR1H
                                           	extern _RCON
                                           	extern _WDTCON
                                           	extern _HLVDCON
                                           	extern _OSCCON
                                           	extern _T0CON
                                           	extern _TMR0L
                                           	extern _TMR0H
                                           	extern _STATUS
                                           	extern _FSR2L
                                           	extern _FSR2H
                                           	extern _PLUSW2
                                           	extern _PREINC2
                                           	extern _POSTDEC2
                                           	extern _POSTINC2
                                           	extern _INDF2
                                           	extern _BSR
                                           	extern _FSR1L
                                           	extern _FSR1H
                                           	extern _PLUSW1
                                           	extern _PREINC1
                                           	extern _POSTDEC1
                                           	extern _POSTINC1
                                           	extern _INDF1
                                           	extern _WREG
                                           	extern _FSR0L
                                           	extern _FSR0H
                                           	extern _PLUSW0
                                           	extern _PREINC0
                                           	extern _POSTDEC0
                                           	extern _POSTINC0
                                           	extern _INDF0
                                           	extern _INTCON3
                                           	extern _INTCON2
                                           	extern _INTCON
                                           	extern _PRODL
                                           	extern _PRODH
                                           	extern _TABLAT
                                           	extern _TBLPTRL
                                           	extern _TBLPTRH
                                           	extern _TBLPTRU
                                           	extern _PCL
                                           	extern _PCLATH
                                           	extern _PCLATU
                                           	extern _STKPTR
                                           	extern _TOSL
                                           	extern _TOSH
                                           	extern _TOSU
                                           ;--------------------------------------------------------
                                           ;	Equates to used internal registers
                                           ;--------------------------------------------------------
                                           STATUS	equ	0xfd8
                                           FSR0L	equ	0xfe9
                                           FSR0H	equ	0xfea
                                           FSR1L	equ	0xfe1
                                           FSR2L	equ	0xfd9
                                           INDF0	equ	0xfef
                                           POSTDEC1	equ	0xfe5
                                           PREINC1	equ	0xfe4
                                           PLUSW2	equ	0xfdb
                                           
                                           
                                           ; Internal registers
                                           .registers	udata_ovr	0x0000
                                           r0x00	res	1
                                           r0x01	res	1
                                           r0x02	res	1
                                           
                                           udata_flash_0	udata
                                           _ep2_num_bytes_to_send	res	2
                                           
                                           udata_flash_1	udata
                                           _ep2_source_data	res	3
                                           
                                           ;--------------------------------------------------------
                                           ; global & static initialisations
                                           ;--------------------------------------------------------
                                           ; I code from now on!
                                           ; ; Starting pCode block
                                           S_flash__erase_block	code
                                           _erase_block:
                                           ;	.line	91; flash.c	void erase_block()
001ba4   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001ba6   ffe5
001ba8   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001baa   ffd9
001bac   8ea6     bsf	0xa6, 0x7, 0         	bsf _EECON1, 7
001bae   9ca6     bcf	0xa6, 0x6, 0         	bcf _EECON1, 6
001bb0   84a6     bsf	0xa6, 0x2, 0         	bsf _EECON1, 2
001bb2   88a6     bsf	0xa6, 0x4, 0         	bsf _EECON1, 4
001bb4   9ef2     bcf	0xf2, 0x7, 0         	bcf _INTCON, 7
001bb6   0e55     movlw	0x55               	movlw 0x55
001bb8   6ea7     movwf	0xa7, 0            	movwf _EECON2
001bba   0eaa     movlw	0xaa               	movlw 0xaa
001bbc   6ea7     movwf	0xa7, 0            	movwf _EECON2
001bbe   82a6     bsf	0xa6, 0x1, 0         	bsf _EECON1, 1
                                           	
001bc0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001bc2   ffd9
001bc4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block
                                           S_flash__write_block	code
                                           _write_block:
                                           ;	.line	45; flash.c	void write_block(__data uchar *src)
001a4a   cfd9     movff	0xfd9, 0xfe5       	MOVFF	FSR2L, POSTDEC1
001a4c   ffe5
001a4e   cfe1     movff	0xfe1, 0xfd9       	MOVFF	FSR1L, FSR2L
001a50   ffd9
001a52   c000     movff	0, 0xfe5           	MOVFF	r0x00, POSTDEC1
001a54   ffe5
001a56   c001     movff	0x1, 0xfe5         	MOVFF	r0x01, POSTDEC1
001a58   ffe5
001a5a   c002     movff	0x2, 0xfe5         	MOVFF	r0x02, POSTDEC1
001a5c   ffe5
001a5e   0e02     movlw	0x2                	MOVLW	0x02
001a60   cfdb     movff	0xfdb, 0           	MOVFF	PLUSW2, r0x00
001a62   f000
001a64   0e03     movlw	0x3                	MOVLW	0x03
001a66   cfdb     movff	0xfdb, 0x1         	MOVFF	PLUSW2, r0x01
001a68   f001
001a6a   000a     tblrd	*-                 	tblrd*-
                                           	
                                           ;	.line	56; flash.c	for(i = 0; i < 32; i++)
001a6c   6a02     clrf	0x2, 0              	CLRF	r0x02
                                           _00105_DS_:
001a6e   0e20     movlw	0x20               	MOVLW	0x20
001a70   5c02     subwf	0x2, 0, 0          	SUBWF	r0x02, W
001a72   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001a74   ef49     goto	0x1a92              	GOTO	_00108_DS_
001a76   f00d
                                           ;	.line	58; flash.c	TABLAT = *src;
001a78   c000     movff	0, 0xfe9           	MOVFF	r0x00, FSR0L
001a7a   ffe9
001a7c   c001     movff	0x1, 0xfea         	MOVFF	r0x01, FSR0H
001a7e   ffea
001a80   cfef     movff	0xfef, 0xff5       	MOVFF	INDF0, _TABLAT
001a82   fff5
                                           ;	.line	60; flash.c	src++;
001a84   2a00     incf	0, 0x1, 0           	INCF	r0x00, F
001a86   b0d8     btfsc	0xd8, 0, 0         	BTFSC	STATUS, 0
001a88   2a01     incf	0x1, 0x1, 0         	INCF	r0x01, F
001a8a   000f     tblwt	+*                 	tblwt+*
                                           	
                                           ;	.line	56; flash.c	for(i = 0; i < 32; i++)
001a8c   2a02     incf	0x2, 0x1, 0         	INCF	r0x02, F
001a8e   ef37     goto	0x1a6e              	GOTO	_00105_DS_
001a90   f00d
                                           _00108_DS_:
001a92   8ea6     bsf	0xa6, 0x7, 0         	bsf _EECON1, 7
001a94   9ca6     bcf	0xa6, 0x6, 0         	bcf _EECON1, 6
001a96   84a6     bsf	0xa6, 0x2, 0         	bsf _EECON1, 2
001a98   9ef2     bcf	0xf2, 0x7, 0         	bcf _INTCON, 7
001a9a   0e55     movlw	0x55               	movlw 0x55
001a9c   6ea7     movwf	0xa7, 0            	movwf _EECON2
001a9e   0eaa     movlw	0xaa               	movlw 0xaa
001aa0   6ea7     movwf	0xa7, 0            	movwf _EECON2
001aa2   82a6     bsf	0xa6, 0x1, 0         	bsf _EECON1, 1
                                           	
001aa4   cfe4     movff	0xfe4, 0x2         	MOVFF	PREINC1, r0x02
001aa6   f002
001aa8   cfe4     movff	0xfe4, 0x1         	MOVFF	PREINC1, r0x01
001aaa   f001
001aac   cfe4     movff	0xfe4, 0           	MOVFF	PREINC1, r0x00
001aae   f000
001ab0   cfe4     movff	0xfe4, 0xfd9       	MOVFF	PREINC1, FSR2L
001ab2   ffd9
001ab4   0012     return	0                 	RETURN	
                                           
                                           ; ; Starting pCode block for Ival
                                           	code
                                           _section_descriptor:
0009c0   0103     movlb	0x3                	DB	0x03, 0x01, 0x00, 0x00, 0x00, 0xff, 0x1f, 0x00, 0x03, 0x00, 0x20, 0x00
0009c2   0000     nop                      
0009c4   ff00     dw	0xff00  ;unknown opcode 
0009c6   001f     dw	0x1f  ;unknown opcode 
0009c8   0003     sleep                    
0009ca   0020     dw	0x20  ;unknown opcode 
0009cc   7fff     btg	0xff, 0x7, 0x1       	DB	0xff, 0x7f, 0x00, 0x01, 0x00, 0x00, 0x30, 0x0d, 0x00, 0x30
0009ce   0100     movlb	0                  
0009d0   0000     nop                      
0009d2   0d30     mullw	0x30               
0009d4   3000     rrcf	0, 0, 0             
                                           
                                           
                                           ; Statistics:
                                           ; code size:	  156 (0x009c) bytes ( 0.12%)
                                           ;           	   78 (0x004e) words
                                           ; udata size:	    5 (0x0005) bytes ( 0.28%)
                                           ; access size:	    3 (0x0003) bytes
                                           
                                           
                                           	end
